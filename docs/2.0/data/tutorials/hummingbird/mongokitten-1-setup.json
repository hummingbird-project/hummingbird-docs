{"sections":[{"content":[{"inlineContent":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"type":"paragraph"}],"kind":"hero","estimatedTimeInMinutes":15,"title":"Create a Hummingbird + MongoKitten application.","chapter":"Build a Social Media Platform for Kittens","backgroundImage":"hummingbird.png","image":"hummingbird.png"},{"tasks":[{"title":"Create your project","stepsSection":[{"code":"mongokitten-setup-01.sh","media":null,"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Clone the Hummingbird template GitHub project","type":"text"}],"type":"paragraph"}],"caption":[]},{"code":"mongokitten-setup-02.sh","media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create your project, using the template configure script. Press return on each question to use the default value.","type":"text"}]}],"caption":[]},{"code":"mongokitten-setup-04.swift","media":null,"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"code":"MongoKitten","type":"codeVoice"},{"text":" dependency.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"MongoKitten doesn’t need any special treatment. It works seamlessly with Hummingbird.","type":"text"}]}]}],"contentSection":[{"kind":"contentAndMedia","media":"mongokitten.png","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Clone the Hummingbird template, configure a project and review the contents of the generated project."}],"type":"paragraph"}]}],"anchor":"Create-your-project"},{"title":"Setup MongoDB","stepsSection":[{"media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Install and Run ","type":"text"},{"identifier":"https:\/\/www.docker.com\/products\/docker-desktop\/","isActive":true,"type":"reference"},{"text":" if it’s not running already.","type":"text"}]}],"code":"install-mongodb-docker.sh","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, run this command to download and run MongoDB."}]}]}],"contentSection":[{"kind":"contentAndMedia","media":"mongodb.png","content":[{"inlineContent":[{"type":"text","text":"MongoDB is a serivce that needs to run alongside your application. It’s a prerequisite for running MongoKitten."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Setup-MongoDB"},{"title":"Add MongoKitten","stepsSection":[{"code":"mongokitten-setup-06.swift","content":[{"inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[{"inlineContent":[{"type":"text","text":"Add the MongoKitten dependency, and modify the "},{"code":"AppArguments","type":"codeVoice"},{"type":"text","text":" to contain two new variables."}],"type":"paragraph"}]},{"code":"mongokitten-setup-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/App.swift"}]}],"runtimePreview":null,"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This contains an "},{"type":"codeVoice","code":"App"},{"type":"text","text":" type conforming to "},{"type":"codeVoice","code":"AsyncParsableCommand"},{"type":"text","text":" with three options, the "},{"type":"codeVoice","code":"hostname"},{"type":"text","text":" and "},{"type":"codeVoice","code":"port"},{"type":"text","text":" are used to define the server bind address, "},{"type":"codeVoice","code":"logLevel"},{"type":"text","text":" sets the level of logging required. Finally the "},{"type":"codeVoice","code":"run()"},{"type":"text","text":" function which calls "},{"type":"codeVoice","code":"buildApplication(_:)"},{"type":"text","text":" to create an "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" and then runs it using "},{"type":"codeVoice","code":"runService()"},{"type":"text","text":". You can find out more about the argument parser library "},{"type":"reference","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","isActive":true},{"type":"text","text":"."}]}]},{"code":"mongokitten-setup-08.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the new app arguments with default values."}]}],"runtimePreview":null,"type":"step","media":null,"caption":[]},{"code":"mongokitten-setup-09.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":" again. We can now start the MongoKitten driver."}]}],"runtimePreview":null,"type":"step","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"This will connect and login to the server immediately. If any network hiccups occur, MongoKitten reconnects automatically.","type":"text"}]}]}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"With your Package.swift and database set up, lets add MongoKitten to your project."}],"type":"paragraph"}],"mediaPosition":"trailing","media":"mongokitten.png","kind":"contentAndMedia"}],"anchor":"Add-MongoKitten"},{"title":"Add Kittens API","stepsSection":[{"code":"mongokitten-setup-10.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"MongoKitten always requires a stored property named "},{"type":"codeVoice","code":"_id"},{"type":"text","text":". This is used by MongoDB as the unique ID."}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a file named "},{"type":"codeVoice","code":"Kitten.swift"},{"type":"text","text":", and add the following data model."}]}],"type":"step","media":null},{"code":"mongokitten-setup-11.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we create the "},{"type":"codeVoice","code":"Router"},{"type":"text","text":". We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use "},{"type":"codeVoice","code":"Router.add(middleware:)"},{"type":"text","text":" to add individual middleware. Finally we add a single endpoint GET "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" which returns “Hello!”"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we look further down the file we can find the "},{"type":"codeVoice","code":"buildRouter()"},{"type":"text","text":" function."}]}],"type":"step","media":null},{"code":"mongokitten-setup-12.swift","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Because the database is empty now, we’ll add a route "},{"type":"codeVoice","code":"PUT \/kittens"},{"type":"text","text":" to add your own kittens."}],"type":"paragraph"}],"content":[{"inlineContent":[{"type":"text","text":"We’ll add a single route "},{"code":"GET \/kittens","type":"codeVoice"},{"type":"text","text":", which lists all registered kittens. This requires passing in the database handle to your routes."}],"type":"paragraph"}],"type":"step","media":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Add your database models and routes to edit them.","type":"text"}],"type":"paragraph"}],"media":"mongokitten.png"}],"anchor":"Add-Kittens-API"},{"title":"Test your Backend","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can run this application and use curl to test it works."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"First, add your own kitten!"}]}],"type":"step","media":null,"code":"mongokitten-setup-17.sh","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Then, query the list of kittens.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"mongokitten-setup-18.sh","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Now we have a running server, lets add some functionality to it."}],"type":"paragraph"}],"caption":[],"type":"step","media":null,"code":"mongokitten-setup-19.sh","runtimePreview":null}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Now that your MongoDB backend is complete, it’s time to validate the results!"}],"type":"paragraph"}],"kind":"contentAndMedia","media":"hummingbird.png","mediaPosition":"trailing"}],"anchor":"Test-your-Backend"}],"kind":"tasks"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup"},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"categoryPathComponent":"MongoKitten","title":"Create a Hummingbird + MongoKitten application.","role":"project","category":"MongoKitten Backend"},"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten\/Build-a-Social-Media-Platform-for-Kittens","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Create-your-project"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Setup-MongoDB"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Add-MongoKitten"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Add-Kittens-API"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Test-your-Backend"}]}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten\/Build-a-Social-Media-Platform-for-Kittens"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"},"variants":[{"paths":["\/tutorials\/hummingbird\/mongokitten-1-setup"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup":{"role":"project","estimatedTime":"15min","type":"topic","kind":"project","url":"\/tutorials\/hummingbird\/mongokitten-1-setup","title":"Create a Hummingbird + MongoKitten application.","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup#Test-your-Backend":{"title":"Test your Backend","url":"\/tutorials\/hummingbird\/mongokitten-1-setup#Test-your-Backend","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Test-your-Backend","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"type":"section","kind":"section","role":"pseudoSymbol"},"mongokitten-setup-10.swift":{"fileType":"swift","type":"file","syntax":"swift","content":["import MongoKitten","import Hummingbird","","struct Kitten: ResponseCodable {","    static let collection = \"kittens\"","","    let _id: ObjectId","    var name: String","}"],"fileName":"Sources\/App\/Kitten.swift","identifier":"mongokitten-setup-10.swift","highlights":[]},"https://www.docker.com/products/docker-desktop/":{"title":"Docker","url":"https:\/\/www.docker.com\/products\/docker-desktop\/","identifier":"https:\/\/www.docker.com\/products\/docker-desktop\/","titleInlineContent":[{"text":"Docker","type":"text"}],"type":"link"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup#Add-MongoKitten":{"title":"Add MongoKitten","url":"\/tutorials\/hummingbird\/mongokitten-1-setup#Add-MongoKitten","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Add-MongoKitten","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"type":"section","kind":"section","role":"pseudoSymbol"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup#Create-your-project":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/mongokitten-1-setup#Create-your-project","title":"Create your project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Create-your-project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}]},"mongokitten.png":{"alt":"MongoKitten logo","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/mongokitten.png"}],"identifier":"mongokitten.png","type":"image"},"hummingbird.png":{"identifier":"hummingbird.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png"}],"type":"image","alt":"Hummingbird logo"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup#Setup-MongoDB":{"title":"Setup MongoDB","url":"\/tutorials\/hummingbird\/mongokitten-1-setup#Setup-MongoDB","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Setup-MongoDB","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"type":"section","kind":"section","role":"pseudoSymbol"},"mongokitten-setup-08.swift":{"fileType":"swift","type":"file","syntax":"swift","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    @Option(name: .shortAndLong)","    var connectionString: String = \"mongodb:\/\/localhost:27017\/meowsocial\"","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"fileName":"Sources\/App\/App.swift","identifier":"mongokitten-setup-08.swift","highlights":[{"line":16},{"line":17},{"line":18}]},"mongokitten-setup-09.swift":{"highlights":[{"line":31},{"line":32},{"line":33}],"fileName":"Sources\/App\/Application+build.swift","identifier":"mongokitten-setup-09.swift","type":"file","content":["import Hummingbird","import Logging","import MongoKitten","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var connectionString: String { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"MeowSocial\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let mongo = try await MongoDatabase.connect(to: arguments.connectionString)","","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"MeowSocial\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"syntax":"swift","fileType":"swift"},"mongokitten-setup-17.sh":{"type":"file","fileType":"","syntax":"","content":["> curl -i -X PUT -H \"Content-Type: application\/json\" -d '{\"name\":\"Milo\"}' localhost:8080\/kittens","HTTP\/1.1 201 Created","Content-Length: 0","Date: Sat, 23 Nov 2024 09:22:26 GMT","Server: MeowSocial"],"fileName":"Test Application","identifier":"mongokitten-setup-17.sh","highlights":[]},"mongokitten-setup-11.swift":{"highlights":[],"fileName":"Sources\/App\/Application+build.swift","identifier":"mongokitten-setup-11.swift","type":"file","content":["import Hummingbird","import Logging","import MongoKitten","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var connectionString: String { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"MeowSocial\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let mongo = try await MongoDatabase.connect(to: arguments.connectionString)","","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"MeowSocial\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"syntax":"swift","fileType":"swift"},"mongodb.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/mongodb.png"}],"alt":"MongoDB logo","type":"image","identifier":"mongodb.png"},"install-mongodb-docker.sh":{"fileType":"app","type":"file","syntax":"app","content":["docker run -d --publish 27017:27017 mongo"],"fileName":"Terminal.app","identifier":"install-mongodb-docker.sh","highlights":[]},"mongokitten-setup-02.sh":{"highlights":[],"fileName":"Create Swift Package","identifier":"mongokitten-setup-02.sh","type":"file","content":["> .\/template\/configure.sh MeowSocial","Enter your package name: [MeowSocial] > ","Enter your executable name: [App] > ","Include Visual Studio Code snippets: [Y\/n] > "],"syntax":"","fileType":""},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten/Build-a-Social-Media-Platform-for-Kittens":{"role":"article","type":"topic","kind":"article","url":"\/tutorials\/mongokitten\/build-a-social-media-platform-for-kittens","title":"Build a Social Media Platform for Kittens","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten\/Build-a-Social-Media-Platform-for-Kittens"},"mongokitten-setup-19.sh":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"fileName":"Test Application","identifier":"mongokitten-setup-19.sh","type":"file","content":["> curl -i localhost:8080\/kittens","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 66","Date: Thu, 21 Nov 2024 14:55:26 GMT","Server: MeowSocial","","[{\"_id\":\"6744f4e1c89cdc21285c6fd5\",\"name\":\"Milo\"}]"],"syntax":"","fileType":""},"mongokitten-setup-04.swift":{"fileType":"swift","type":"file","syntax":"swift","content":["\/\/ swift-tools-version:6.0","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"MeowSocial\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","        .package(url: \"https:\/\/github.com\/orlandos-nl\/MongoKitten.git\", from: \"7.9.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"MongoKitten\", package: \"MongoKitten\"),","            ],","            path: \"Sources\/App\"","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\")","            ],","            path: \"Tests\/AppTests\"","        )","    ]",")"],"fileName":"Package.swift","identifier":"mongokitten-setup-04.swift","highlights":[{"line":15},{"line":23}]},"mongokitten-setup-07.swift":{"highlights":[],"fileName":"Sources\/App\/App.swift","identifier":"mongokitten-setup-07.swift","type":"file","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"syntax":"swift","fileType":"swift"},"https://apple.github.io/swift-argument-parser/documentation/argumentparser":{"type":"link","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","url":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","title":"here","titleInlineContent":[{"type":"text","text":"here"}]},"mongokitten-setup-06.swift":{"fileType":"swift","type":"file","syntax":"swift","content":["import Hummingbird","import Logging","import MongoKitten","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var connectionString: String { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"MeowSocial\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"MeowSocial\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"fileName":"Sources\/App\/Application+build.swift","identifier":"mongokitten-setup-06.swift","highlights":[{"line":3},{"line":10}]},"mongokitten-setup-01.sh":{"highlights":[],"fileName":"Clone template","identifier":"mongokitten-setup-01.sh","type":"file","content":["> git clone https:\/\/github.com\/hummingbird-project\/template"],"syntax":"","fileType":""},"mongokitten-setup-18.sh":{"type":"file","fileType":"","syntax":"","content":["> curl -i localhost:8080\/kittens"],"fileName":"Test Application","identifier":"mongokitten-setup-18.sh","highlights":[{"line":1}]},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"title":"Store Data with MongoKitten","url":"\/tutorials\/mongokitten","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","type":"topic","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens."}],"kind":"overview","role":"overview"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/MongoKitten-1-Setup#Add-Kittens-API":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/hummingbird\/mongokitten-1-setup#Add-Kittens-API","title":"Add Kittens API","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/MongoKitten-1-Setup#Add-Kittens-API","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}]},"mongokitten-setup-12.swift":{"highlights":[{"line":34},{"line":47},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":73},{"line":74},{"line":75},{"line":76}],"fileName":"Sources\/App\/Application+build.swift","identifier":"mongokitten-setup-12.swift","type":"file","content":["import Hummingbird","import Logging","import MongoKitten","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var connectionString: String { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"MeowSocial\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let mongo = try await MongoDatabase.connect(to: arguments.connectionString)","","    let router = buildRouter(db: mongo)","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"MeowSocial\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter(db: MongoDatabase) -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    \/\/ List all kittens","    router.get(\"\/kittens\") { _, _ in","        return try await db[Kitten.collection].find().decode(Kitten.self).drain()","    }","    router.put(\"\/kittens\") { request, context -> Kitten in","        let body = try await request.decode(as: CreateKittenRequest.self, context: context)","        let kitten = Kitten(","            _id: ObjectId(),","            name: body.name","        )","        try await db[Kitten.collection].insertEncoded(kitten)","        return kitten","    }","    return router","}","","struct CreateKittenRequest: Codable {","    let name: String","}"],"syntax":"swift","fileType":"swift"}}}