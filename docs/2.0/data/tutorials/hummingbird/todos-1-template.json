{"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","interfaceLanguage":"swift"},"sections":[{"image":"hummingbird.png","title":"Create a Hummingbird application.","kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}]}],"estimatedTimeInMinutes":5,"backgroundImage":"hummingbird.png","chapter":"Application Setup"},{"kind":"tasks","tasks":[{"contentSection":[{"content":[{"inlineContent":[{"text":"Clone the Hummingbird template, configure a project and review the contents of the generated project.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png"}],"title":"Create your project","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clone the Hummingbird template GitHub project"}]}],"type":"step","caption":[],"media":null,"code":"todos-template-01.sh","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create your project, using the template configure script. Press return on each question to use the default value.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"todos-template-02.sh","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Now lets review what the template has setup. Open ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"You can see if has dependencies for Hummingbird and the Apple’s Argument Parser library.","type":"text"}],"type":"paragraph"}],"media":null,"code":"todos-template-03.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/App.swift"}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"This contains an ","type":"text"},{"type":"codeVoice","code":"App"},{"text":" type conforming to ","type":"text"},{"type":"codeVoice","code":"AsyncParsableCommand"},{"text":" with three options, the ","type":"text"},{"type":"codeVoice","code":"hostname"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"port"},{"text":" are used to define the server bind address, ","type":"text"},{"type":"codeVoice","code":"logLevel"},{"text":" sets the level of logging required. Finally the ","type":"text"},{"type":"codeVoice","code":"run()"},{"text":" function which calls ","type":"text"},{"type":"codeVoice","code":"buildApplication(_:)"},{"text":" to create an ","type":"text"},{"type":"codeVoice","code":"Application"},{"text":" and then runs it using ","type":"text"},{"type":"codeVoice","code":"runService()"},{"text":". You can find out more about the argument parser library ","type":"text"},{"type":"reference","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","isActive":true},{"text":".","type":"text"}]}],"media":null,"code":"todos-template-04.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Open ","type":"text"},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"text":" to find the `buildApplication(_:) function.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"Here we create a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":" with log level set by either the command line argument mentioned above, or the environment variable ","type":"text"},{"type":"codeVoice","code":"LOG_LEVEL"},{"text":". We then call a function ","type":"text"},{"type":"codeVoice","code":"buildRouter()"},{"text":" and use the result of that to create our ","type":"text"},{"type":"codeVoice","code":"Application"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"todos-template-05.swift","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"If we look further down the file we can find the "},{"type":"codeVoice","code":"buildRouter()"},{"type":"text","text":" function."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"Here we create the ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":". We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use ","type":"text"},{"code":"Router.add(middleware:)","type":"codeVoice"},{"text":" to add individual middleware. Finally we add a single endpoint GET ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" which returns a String response: “Hello”.","type":"text"}],"type":"paragraph"}],"media":null,"code":"todos-template-06.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"We can run this application and use curl to test it works.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"todos-template-07.sh","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we have a running server, lets add some functionality to it."}]}],"type":"step","caption":[],"media":null,"code":"todos-template-08.sh","runtimePreview":null}],"anchor":"Create-your-project"}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"action":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","isActive":true,"overridingTitle":"Get started"},"title":"Add your application API"}],"metadata":{"category":"Todo backend","categoryPathComponent":"Todos","role":"project","title":"Create a Hummingbird application."},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-1-template"]}],"references":{"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-1-template","role":"project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"estimatedTime":"5min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","title":"Create a Hummingbird application."},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"role":"article","url":"\/tutorials\/todos\/store-todos-in-a-database","type":"topic","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","title":"Store Todos in a database","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"title":"Testing your application","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","kind":"article","abstract":[],"url":"\/tutorials\/todos\/testing-your-application","role":"article"},"todos-template-07.sh":{"content":["> curl -i localhost:8080\/health"],"identifier":"todos-template-07.sh","highlights":[],"fileName":"Test Application","syntax":"","type":"file","fileType":""},"todos-template-02.sh":{"identifier":"todos-template-02.sh","syntax":"","highlights":[],"fileType":"","content":["> .\/template\/configure.sh Todos","Enter your package name: [Todos] > ","Enter your executable name: [App] > ","Include Visual Studio Code snippets: [Y\/n] > "],"type":"file","fileName":"Create Swift Package"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","role":"pseudoSymbol","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","title":"Create your project"},"todos-template-05.swift":{"content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = ","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"Todos\"","        ),","        logger: logger","    )","    return app","}"],"identifier":"todos-template-05.swift","highlights":[],"fileName":"buildApplication() - Sources\/App\/Application+build.swift","syntax":"swift","type":"file","fileType":"swift"},"todos-template-03.swift":{"identifier":"todos-template-03.swift","syntax":"swift","highlights":[],"fileType":"swift","content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"type":"file","fileName":"Package.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","title":"Setup your Postgres database"},"todos-template-04.swift":{"content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"identifier":"todos-template-04.swift","highlights":[],"fileName":"Sources\/App\/App.swift","syntax":"swift","type":"file","fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","title":"API Setup","kind":"article","abstract":[],"url":"\/tutorials\/todos\/api-setup","role":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"role":"article","url":"\/tutorials\/todos\/application-setup","type":"topic","abstract":[],"kind":"article","title":"Application Setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","title":"Test your application"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","title":"Setup a Postgres repository"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","role":"pseudoSymbol","abstract":[{"type":"text","text":"Add some functionality to your application."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","title":"Testing your application with curl"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-4-postgres","role":"project","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"estimatedTime":"15min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","title":"Use PostgresNIO to store your Todos in a Postgres database"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","title":"Project testing setup"},"todos-template-08.sh":{"identifier":"todos-template-08.sh","syntax":"","highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}],"fileType":"","content":["> curl -i localhost:8080\/health","HTTP\/1.1 200 OK","Content-Length: 0","Date: Fri, 6 Sep 2024 10:32:02 GMT","Server: Todos",""],"type":"file","fileName":"Test Application"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","title":"Build a Todos application.","kind":"overview","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"url":"\/tutorials\/todos","role":"overview"},"hummingbird.png":{"identifier":"hummingbird.png","type":"image","alt":"Hummingbird logo","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}]},"todos-template-06.swift":{"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"identifier":"todos-template-06.swift","highlights":[],"fileName":"buildRouter() - Sources\/App\/Application+build.swift","syntax":"swift","type":"file","fileType":"swift"},"todos-template-01.sh":{"identifier":"todos-template-01.sh","syntax":"","highlights":[],"fileType":"","content":["> git clone https:\/\/github.com\/hummingbird-project\/template"],"type":"file","fileName":"Clone template"},"https://apple.github.io/swift-argument-parser/documentation/argumentparser":{"url":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","titleInlineContent":[{"type":"text","text":"here"}],"type":"link","title":"here","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-2-api","role":"project","abstract":[{"type":"text","text":"Add some functionality to your application."}],"estimatedTime":"20min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","title":"Add your application API"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-3-testing","role":"project","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"estimatedTime":"15min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","title":"Testing your application"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"role":"pseudoSymbol","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","type":"section","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","title":"Todo Controller and Repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"}}}