{"sections":[{"image":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}]}],"kind":"hero","backgroundImage":"hummingbird.png","title":"Create a Hummingbird application.","estimatedTimeInMinutes":5,"chapter":"Application Setup"},{"kind":"tasks","tasks":[{"title":"Create your project","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clone the Hummingbird template, configure a project and review the contents of the generated project."}]}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clone the Hummingbird template GitHub project"}]}],"runtimePreview":null,"type":"step","code":"todos-template-01.sh","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create your project, using the template configure script. Press return on each question to use the default value.","type":"text"}]}],"runtimePreview":null,"type":"step","code":"todos-template-02.sh","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now lets review what the template has setup. Open "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}]}],"runtimePreview":null,"type":"step","code":"todos-template-03.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see if has dependencies for Hummingbird and the Apple’s Argument Parser library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/App.swift"}]}],"runtimePreview":null,"type":"step","code":"todos-template-04.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"This contains an ","type":"text"},{"code":"App","type":"codeVoice"},{"text":" type conforming to ","type":"text"},{"code":"AsyncParsableCommand","type":"codeVoice"},{"text":" with three options, the ","type":"text"},{"code":"hostname","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"port","type":"codeVoice"},{"text":" are used to define the server bind address, ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" sets the level of logging required. Finally the "},{"code":"run()","type":"codeVoice"},{"type":"text","text":" function which calls "},{"code":"buildApplication(_:)","type":"codeVoice"},{"type":"text","text":" to create an "},{"code":"Application","type":"codeVoice"},{"text":" and then runs it using ","type":"text"},{"code":"runService()","type":"codeVoice"},{"text":". You can find out more about the argument parser library ","type":"text"},{"isActive":true,"identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":" to find the `buildApplication(_:) function."}]}],"runtimePreview":null,"type":"step","code":"todos-template-05.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we create a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" with log level set by either the command line argument mentioned above, or the environment variable "},{"type":"codeVoice","code":"LOG_LEVEL"},{"type":"text","text":". We then call a function "},{"type":"codeVoice","code":"buildRouter()"},{"type":"text","text":" and use the result of that to create our "},{"type":"codeVoice","code":"Application"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If we look further down the file we can find the "},{"code":"buildRouter()","type":"codeVoice"},{"type":"text","text":" function."}]}],"runtimePreview":null,"type":"step","code":"todos-template-06.swift","media":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"Here we create the ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":". We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use ","type":"text"},{"code":"Router.add(middleware:)","type":"codeVoice"},{"text":" to add individual middleware. Finally we add a single endpoint GET ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":" which returns a String response: “Hello”.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"We can run this application and use curl to test it works.","type":"text"}]}],"runtimePreview":null,"type":"step","code":"todos-template-07.sh","media":null,"caption":[]},{"content":[{"inlineContent":[{"text":"Now we have a running server, lets add some functionality to it.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":"todos-template-08.sh","media":null,"caption":[]}],"anchor":"Create-your-project"}]},{"featuredEyebrow":"Tutorial","title":"Add your application API","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","isActive":true},"kind":"callToAction"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Create a Hummingbird application.","role":"project","category":"Todo backend","categoryPathComponent":"Todos"},"kind":"project","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-1-template"]}],"hierarchy":{"modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","kind":"task"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}]}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"references":{"todos-template-06.swift":{"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"type":"file","highlights":[],"fileName":"buildRouter() - Sources\/App\/Application+build.swift","fileType":"swift","identifier":"todos-template-06.swift","syntax":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"estimatedTime":"15min","title":"Use PostgresNIO to store your Todos in a Postgres database","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","kind":"project","role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-4-postgres"},"todos-template-07.sh":{"content":["> curl -i localhost:8080\/health"],"type":"file","highlights":[],"fileName":"Test Application","fileType":"","identifier":"todos-template-07.sh","syntax":""},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"title":"Create your project","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"role":"pseudoSymbol","type":"section","title":"Test your application","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"},"todos-template-08.sh":{"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}],"fileType":"","syntax":"","identifier":"todos-template-08.sh","fileName":"Test Application","content":["> curl -i localhost:8080\/health","HTTP\/1.1 200 OK","Content-Length: 0","Date: Fri, 6 Sep 2024 10:32:02 GMT","Server: Todos",""],"type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"role":"article","type":"topic","title":"Store Todos in a database","url":"\/tutorials\/todos\/store-todos-in-a-database","abstract":[],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"estimatedTime":"15min","title":"Testing your application","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-3-testing"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"role":"article","type":"topic","title":"Application Setup","url":"\/tutorials\/todos\/application-setup","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"estimatedTime":"20min","title":"Add your application API","abstract":[{"type":"text","text":"Add some functionality to your application."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","kind":"project","role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-2-api"},"hummingbird.png":{"alt":"Hummingbird logo","type":"image","identifier":"hummingbird.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}]},"https://apple.github.io/swift-argument-parser/documentation/argumentparser":{"type":"link","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","url":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","title":"here","titleInlineContent":[{"type":"text","text":"here"}]},"todos-template-04.swift":{"content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"type":"file","highlights":[],"fileName":"Sources\/App\/App.swift","fileType":"swift","identifier":"todos-template-04.swift","syntax":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"estimatedTime":"5min","title":"Create a Hummingbird application.","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"kind":"project","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-1-template"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"role":"article","type":"topic","title":"Testing your application","url":"\/tutorials\/todos\/testing-your-application","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","kind":"article"},"todos-template-03.swift":{"highlights":[],"fileType":"swift","syntax":"swift","identifier":"todos-template-03.swift","fileName":"Package.swift","content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"role":"article","type":"topic","title":"API Setup","url":"\/tutorials\/todos\/api-setup","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"title":"Build a Todos application.","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","kind":"overview","role":"overview","type":"topic","url":"\/tutorials\/todos"},"todos-template-01.sh":{"content":["> git clone https:\/\/github.com\/hummingbird-project\/template"],"type":"file","highlights":[],"fileName":"Clone template","fileType":"","identifier":"todos-template-01.sh","syntax":""},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"title":"Setup your Postgres database","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database"},"todos-template-05.swift":{"content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = ","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"Todos\"","        ),","        logger: logger","    )","    return app","}"],"type":"file","highlights":[],"fileName":"buildApplication() - Sources\/App\/Application+build.swift","fileType":"swift","identifier":"todos-template-05.swift","syntax":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"title":"Project testing setup","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup"},"todos-template-02.sh":{"content":["> .\/template\/configure.sh Todos","Enter your package name: [Todos] > ","Enter your executable name: [App] > ","Include Visual Studio Code snippets: [Y\/n] > "],"type":"file","highlights":[],"fileName":"Create Swift Package","fileType":"","identifier":"todos-template-02.sh","syntax":""},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"title":"Todo Controller and Repository","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"role":"pseudoSymbol","type":"section","title":"Testing your application with curl","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"title":"Setup a Postgres repository","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository"}}}