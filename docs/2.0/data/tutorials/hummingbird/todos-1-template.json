{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-1-template"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"]]},"sections":[{"image":"hummingbird.png","estimatedTimeInMinutes":5,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}]}],"backgroundImage":"hummingbird.png","title":"Create a Hummingbird application.","chapter":"Application Setup","kind":"hero"},{"kind":"tasks","tasks":[{"title":"Create your project","stepsSection":[{"type":"step","code":"todos-template-01.sh","content":[{"inlineContent":[{"type":"text","text":"Clone the Hummingbird template GitHub project"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null},{"type":"step","code":"todos-template-02.sh","content":[{"inlineContent":[{"text":"Create your project, using the template configure script. Press return on each question to use the default value.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null},{"type":"step","code":"todos-template-03.swift","content":[{"inlineContent":[{"text":"Now lets review what the template has setup. Open ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"You can see if has dependencies for Hummingbird and the Apple’s Argument Parser library.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","code":"todos-template-04.swift","content":[{"inlineContent":[{"type":"text","text":"Open "},{"code":"Sources\/App\/App.swift","type":"codeVoice"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"This contains an "},{"code":"App","type":"codeVoice"},{"type":"text","text":" type conforming to "},{"code":"AsyncParsableCommand","type":"codeVoice"},{"type":"text","text":" with three options, the "},{"code":"hostname","type":"codeVoice"},{"type":"text","text":" and "},{"code":"port","type":"codeVoice"},{"type":"text","text":" are used to define the server bind address, "},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" sets the level of logging required. Finally the "},{"code":"run()","type":"codeVoice"},{"type":"text","text":" function which calls "},{"code":"buildApplication(_:)","type":"codeVoice"},{"type":"text","text":" to create an "},{"code":"Application","type":"codeVoice"},{"type":"text","text":" and then runs it using "},{"code":"runService()","type":"codeVoice"},{"type":"text","text":". You can find out more about the argument parser library "},{"type":"reference","isActive":true,"identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null},{"type":"step","code":"todos-template-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":" to find the `buildApplication(_:) function."}]}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we create a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" with log level set by either the command line argument mentioned above, or the environment variable "},{"type":"codeVoice","code":"LOG_LEVEL"},{"type":"text","text":". We then call a function "},{"type":"codeVoice","code":"buildRouter()"},{"type":"text","text":" and use the result of that to create our "},{"type":"codeVoice","code":"Application"},{"type":"text","text":"."}]}],"media":null},{"type":"step","code":"todos-template-06.swift","content":[{"inlineContent":[{"text":"If we look further down the file we can find the ","type":"text"},{"code":"buildRouter()","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Here we create the "},{"type":"codeVoice","code":"Router"},{"type":"text","text":". We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use "},{"type":"codeVoice","code":"Router.add(middleware:)"},{"type":"text","text":" to add individual middleware. Finally we add a single endpoint GET "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" which returns a String response: “Hello”."}],"type":"paragraph"}],"media":null},{"type":"step","code":"todos-template-07.sh","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can run this application and use curl to test it works."}]}],"runtimePreview":null,"caption":[],"media":null},{"type":"step","code":"todos-template-08.sh","content":[{"inlineContent":[{"text":"Now we have a running server, lets add some functionality to it.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null}],"anchor":"Create-your-project","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Clone the Hummingbird template, configure a project and review the contents of the generated project."}],"type":"paragraph"}],"kind":"contentAndMedia","media":"hummingbird.png"}]}]},{"title":"Add your application API","kind":"callToAction","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"action":{"overridingTitle":"Get started","isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"featuredEyebrow":"Tutorial"}],"metadata":{"categoryPathComponent":"Todos","role":"project","title":"Create a Hummingbird application.","category":"Todo backend"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template"},"kind":"project","references":{"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","title":"API Setup","url":"\/tutorials\/todos\/api-setup","abstract":[],"kind":"article","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"url":"\/tutorials\/hummingbird\/todos-4-postgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","type":"topic","kind":"project","role":"project","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"title":"Use PostgresNIO to store your Todos in a Postgres database","estimatedTime":"15min"},"todos-template-02.sh":{"highlights":[],"fileName":"Create Swift Package","identifier":"todos-template-02.sh","syntax":"","content":["> .\/template\/configure.sh Todos","Enter your package name: [Todos] > ","Enter your executable name: [App] > ","Include Visual Studio Code snippets: [Y\/n] > "],"fileType":"","type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","title":"Todo Controller and Repository","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section"},"todos-template-05.swift":{"fileType":"swift","identifier":"todos-template-05.swift","type":"file","syntax":"swift","fileName":"buildApplication() - Sources\/App\/Application+build.swift","content":["\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"Todos\")","        logger.logLevel = ","            arguments.logLevel ??","            environment.get(\"LOG_LEVEL\").map { Logger.Level(rawValue: $0) ?? .info } ??","            .info","        return logger","    }()","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"Todos\"","        ),","        logger: logger","    )","    return app","}"],"highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","title":"Testing your application with curl","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section"},"todos-template-07.sh":{"highlights":[],"fileName":"Test Application","identifier":"todos-template-07.sh","syntax":"","content":["> curl -i localhost:8080\/health"],"fileType":"","type":"file"},"https://apple.github.io/swift-argument-parser/documentation/argumentparser":{"titleInlineContent":[{"type":"text","text":"here"}],"type":"link","title":"here","url":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser"},"todos-template-06.swift":{"fileType":"swift","identifier":"todos-template-06.swift","type":"file","syntax":"swift","fileName":"buildRouter() - Sources\/App\/Application+build.swift","content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"highlights":[]},"todos-template-04.swift":{"highlights":[],"fileName":"Sources\/App\/App.swift","identifier":"todos-template-04.swift","syntax":"swift","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"fileType":"swift","type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","title":"Testing your application","url":"\/tutorials\/todos\/testing-your-application","abstract":[],"kind":"article","role":"article","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"title":"Setup your Postgres database"},"todos-template-08.sh":{"fileType":"","identifier":"todos-template-08.sh","type":"file","syntax":"","fileName":"Test Application","content":["> curl -i localhost:8080\/health","HTTP\/1.1 200 OK","Content-Length: 0","Date: Fri, 6 Sep 2024 10:32:02 GMT","Server: Todos",""],"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6}]},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"url":"\/tutorials\/todos\/application-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","type":"topic","kind":"article","role":"article","abstract":[],"title":"Application Setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"url":"\/tutorials\/hummingbird\/todos-2-api","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","type":"topic","kind":"project","role":"project","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"title":"Add your application API","estimatedTime":"20min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","title":"Create your project","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"estimatedTime":"5min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","title":"Create a Hummingbird application.","url":"\/tutorials\/hummingbird\/todos-1-template","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"kind":"project","role":"project","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","title":"Build a Todos application.","url":"\/tutorials\/todos","abstract":[{"type":"text","text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO."}],"kind":"overview","role":"overview","type":"topic"},"todos-template-03.swift":{"highlights":[],"fileName":"Package.swift","identifier":"todos-template-03.swift","syntax":"swift","content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"fileType":"swift","type":"file"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"url":"\/tutorials\/todos\/store-todos-in-a-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","type":"topic","kind":"article","role":"article","abstract":[],"title":"Store Todos in a database"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","type":"topic","kind":"project","role":"project","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"title":"Testing your application","estimatedTime":"15min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","title":"Test your application","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"kind":"section","role":"pseudoSymbol","type":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"title":"Project testing setup"},"todos-template-01.sh":{"fileType":"","identifier":"todos-template-01.sh","type":"file","syntax":"","fileName":"Clone template","content":["> git clone https:\/\/github.com\/hummingbird-project\/template"],"highlights":[]},"hummingbird.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}],"identifier":"hummingbird.png","alt":"Hummingbird logo"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","type":"section","kind":"section","role":"pseudoSymbol","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"title":"Setup a Postgres repository"}}}