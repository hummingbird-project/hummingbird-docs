{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"project","metadata":{"categoryPathComponent":"Todos","category":"Todo backend","role":"project","title":"Testing your application"},"hierarchy":{"modules":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template"}]},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","projects":[{"sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","kind":"task"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"}]}],"paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"]],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/todos-3-testing"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing"},"sections":[{"backgroundImage":"hummingbird.png","image":"hummingbird.png","chapter":"Testing your application","title":"Testing your application","kind":"hero","content":[{"type":"paragraph","inlineContent":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}]}],"estimatedTimeInMinutes":15},{"kind":"tasks","tasks":[{"stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Open Package.swift"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"You see at the bottom there is a test target called ","type":"text"},{"type":"codeVoice","code":"AppTests"},{"text":". It is dependent on the target ","type":"text"},{"type":"codeVoice","code":"App"},{"text":" and the library ","type":"text"},{"code":"HummingbirdTesting","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"todos-testing-01.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Open Tests\/AppTests\/AppTests.swift","type":"text"}]}],"code":"todos-testing-02.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It contains one test, "},{"type":"codeVoice","code":"testApp()"},{"type":"text","text":". This creates a copy of the Application using "},{"code":"buildApplication(_:)","type":"codeVoice"},{"text":" and uses the Hummingbird test framework to verify the GET ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" endpoint returns a “Hello!” string.","type":"text"}]}],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"We cannot create an instance of ","type":"text"},{"type":"codeVoice","code":"App"},{"text":", so need another way of passing the arguments to the ","type":"text"},{"type":"codeVoice","code":"buildApplication"},{"text":" function in our tests. So ","type":"text"},{"code":"buildApplication(_:)","type":"codeVoice"},{"text":" doesn’t take ","type":"text"},{"code":"App","type":"codeVoice"},{"text":" as a parameter. Instead its parameter is a type that conforms to the protocol ","type":"text"},{"code":"AppArguments","type":"codeVoice"},{"text":" which includes the parameters the function needs. We then conform ","type":"text"},{"type":"codeVoice","code":"App"},{"type":"text","text":" to  "},{"type":"codeVoice","code":"AppArguments"},{"type":"text","text":" and in our tests create a new type "},{"type":"codeVoice","code":"TestArguments"},{"text":" which conforms to the protocol ","type":"text"},{"code":"AppArguments","type":"codeVoice"},{"type":"text","text":"."}]}],"media":null,"caption":[],"code":"todos-testing-03.swift","runtimePreview":null,"type":"step"}],"title":"Project testing setup","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Review application testing setup from template."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png"}],"anchor":"Project-testing-setup"},{"contentSection":[{"kind":"contentAndMedia","media":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"text":"Writing Tests to ensure you application API works.","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Test your application","anchor":"Test-your-application","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Lets replace the "},{"type":"codeVoice","code":"testApp"},{"type":"text","text":" function with a test for the create todo function. Application testing is done with the function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","isActive":true},{"text":". The first parameter indicates what test framework you want to use. Here we are using ","type":"text"},{"type":"codeVoice","code":".router"},{"text":" which sends our request directly to the router without a live server process.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"In the closure passed to ","type":"text"},{"code":"test","type":"codeVoice"},{"text":" you are provided with a client to interact with the current test framework. With this you can send requests and verify the contents of their responses.","type":"text"}],"type":"paragraph"}],"code":"todos-testing-08.swift","type":"step","runtimePreview":null,"media":null},{"runtimePreview":null,"code":"todos-testing-09.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Writing the whole execute line out each time and converting the responses to something readable can become tiresome. So lets break out the create API call to a separate function. You’ll notice in this function we return the decoded "},{"code":"Todo","type":"codeVoice"},{"type":"text","text":" from the execute closure."}]}],"caption":[{"inlineContent":[{"text":"Now the create test has been simplified to two lines of code. Call create function, test return value.","type":"text"}],"type":"paragraph"}],"media":null},{"content":[{"inlineContent":[{"text":"In actual fact lets create helper functions for all the API calls. With these it shoud be a lot easier to write tests","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step","code":"todos-testing-10.swift","media":null},{"runtimePreview":null,"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now create more complex test functions. This one edits a todo twice and verifies the edits have been stored."}]}],"caption":[],"code":"todos-testing-11.swift"},{"caption":[],"code":"todos-testing-12.swift","type":"step","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"The following is the equivalent of the list of curl commands we wrote in the previous chapter to test everything was working ok. Its not the most sensible test but it demonstrates how much easier it is test your application using HummingbirdTesting."}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Hint: A couple of these require you to use execute directly instead of calling the helper functions we wrote at the top."}],"type":"paragraph"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Here are some tests that haven’t been written yet. Maybe you could complete them for me.","type":"text"}]}],"code":"todos-testing-13.swift","type":"step","media":null}]}]},{"action":{"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"title":"Use PostgresNIO to store your Todos in a Postgres database","kind":"callToAction","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"featuredEyebrow":"Tutorial"}],"references":{"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"url":"\/tutorials\/todos\/store-todos-in-a-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","abstract":[],"role":"article","type":"topic","title":"Store Todos in a database","kind":"article"},"todos-testing-08.swift":{"fileName":"Tests\/AppTests\/AppTests.swift","identifier":"todos-testing-08.swift","content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 0","        let logLevel: Logger.Level? = .trace","    }","","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            try await client.execute(uri: \"\/todos\", method: .post, body: ByteBuffer(string: #\"{\"title\":\"My first todo\"}\"#)) { response in","                XCTAssertEqual(response.status, .created)","                let todo = try JSONDecoder().decode(Todo.self, from: response.body)","                XCTAssertEqual(todo.title, \"My first todo\")","            }","        }","    }","}"],"type":"file","syntax":"swift","highlights":[],"fileType":"swift"},"todos-testing-11.swift":{"syntax":"swift","fileName":"Tests\/AppTests\/AppTests.swift","fileType":"swift","identifier":"todos-testing-11.swift","type":"file","highlights":[{"line":9},{"line":10},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","extension AppTests {","    func testPatch() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            \/\/ create todo","            let todo = try await Self.create(title: \"Deliver parcels to James\", client: client)","            \/\/ rename it","            _ = try await Self.patch(id: todo.id, title: \"Deliver parcels to Claire\", client: client)","            let editedTodo = try await Self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo?.title, \"Deliver parcels to Claire\")","            \/\/ set it to completed","            _ = try await Self.patch(id: todo.id, completed: true, client: client)","            let editedTodo2 = try await Self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo2?.completed, true)","            \/\/ revert it","            _ = try await Self.patch(id: todo.id, title: \"Deliver parcels to James\", completed: false, client: client)","            let editedTodo3 = try await Self.get(id: todo.id, client: client)","            XCTAssertEqual(editedTodo3?.title, \"Deliver parcels to James\")","            XCTAssertEqual(editedTodo3?.completed, false)","        }","    }","}"]},"todos-testing-12.swift":{"fileName":"Tests\/AppTests\/AppTests.swift","identifier":"todos-testing-12.swift","content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","extension AppTests {","    func testAPI() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            \/\/ create two todos","            let todo1 = try await Self.create(title: \"Wash my hair\", client: client)","            let todo2 = try await Self.create(title: \"Brush my teeth\", client: client)","            \/\/ get first todo","            let getTodo = try await Self.get(id: todo1.id, client: client)","            XCTAssertEqual(getTodo, todo1)","            \/\/ patch second todo","            let optionalPatchedTodo = try await Self.patch(id: todo2.id, completed: true, client: client)","            let patchedTodo = try XCTUnwrap(optionalPatchedTodo)","            XCTAssertEqual(patchedTodo.completed, true)","            XCTAssertEqual(patchedTodo.title, todo2.title)","            \/\/ get all todos and check first todo and patched second todo are in the list","            let todos = try await Self.list(client: client)","            XCTAssertNotNil(todos.firstIndex(of: todo1))","            XCTAssertNotNil(todos.firstIndex(of: patchedTodo))","            \/\/ delete a todo and verify it has been deleted","            let status = try await Self.delete(id: todo1.id, client: client)","            XCTAssertEqual(status, .ok)","            let deletedTodo = try await Self.get(id: todo1.id, client: client)","            XCTAssertNil(deletedTodo)","            \/\/ delete all todos and verify there are none left","            try await Self.deleteAll(client: client)","            let todos2 = try await Self.list(client: client)","            XCTAssertEqual(todos2.count, 0)","        }","    }","}"],"type":"file","syntax":"swift","highlights":[{"line":10},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"fileType":"swift"},"todos-testing-13.swift":{"syntax":"swift","fileName":"Tests\/AppTests\/AppTests.swift","fileType":"swift","identifier":"todos-testing-13.swift","type":"file","highlights":[{"line":10},{"line":11},{"line":12},{"line":13}],"content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","extension AppTests {","    func testDeletingTodoTwiceReturnsBadRequest() async throws {}","    func testGettingTodoWithInvalidUUIDReturnsBadRequest() async throws {}","    func test30ConcurrentlyCreatedTodosAreAllCreated() async throws {}","    func testUpdatingNonExistentTodoReturnsBadRequest() async throws {}","}"]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","kind":"section","title":"Todo Controller and Repository","abstract":[{"type":"text","text":"Add some functionality to your application."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},"todos-testing-01.swift":{"fileName":"Package.swift","identifier":"todos-testing-01.swift","content":["\/\/ swift-tools-version:5.9","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"Todos\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","            ]","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\"),","            ]","        ),","    ]",")"],"type":"file","syntax":"swift","highlights":[],"fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"role":"article","type":"topic","url":"\/tutorials\/todos\/testing-your-application","kind":"article","title":"Testing your application","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},"todos-testing-02.swift":{"syntax":"swift","fileName":"Tests\/AppTests\/AppTests.swift","fileType":"swift","identifier":"todos-testing-02.swift","type":"file","highlights":[],"content":["import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 0","        let logLevel: Logger.Level? = .trace","    }","","    func testApp() async throws {","        let args = TestArguments()","        let app = try await buildApplication(args)","        try await app.test(.router) { client in","            try await client.execute(uri: \"\/\", method: .get) { response in","                XCTAssertEqual(response.body, ByteBuffer(string: \"Hello!\"))","            }","        }","    }","}"]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Test your application","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","abstract":[{"type":"text","text":"Add some functionality to your application."}],"role":"pseudoSymbol","type":"section","title":"Testing your application with curl","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Setup your Postgres database","kind":"section"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"kind":"symbol","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier","text":"TestingSetup"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"}],"type":"topic","title":"test(_:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","kind":"section","title":"Create your project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"role":"overview","type":"topic","url":"\/tutorials\/todos","kind":"overview","title":"Build a Todos application.","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-2-api","estimatedTime":"20min","kind":"project","title":"Add your application API","abstract":[{"text":"Add some functionality to your application.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"role":"pseudoSymbol","type":"section","title":"Setup a Postgres repository","kind":"section"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","kind":"section","title":"Project testing setup","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"role":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-4-postgres","estimatedTime":"15min","kind":"project","title":"Use PostgresNIO to store your Todos in a Postgres database","abstract":[{"text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres"},"todos-testing-10.swift":{"fileName":"Tests\/AppTests\/AppTests.swift","identifier":"todos-testing-10.swift","content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 0","        let logLevel: Logger.Level? = .trace","    }","","    struct CreateRequest: Encodable {","        let title: String","        let order: Int?","    }","","    static func create(title: String, order: Int? = nil, client: some TestClientProtocol) async throws -> Todo {","        let request = CreateRequest(title: title, order: order)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\", method: .post, body: buffer) { response in","            XCTAssertEqual(response.status, .created)","            return try JSONDecoder().decode(Todo.self, from: response.body)","        }","    }","","    static func get(id: UUID, client: some TestClientProtocol) async throws -> Todo? {","        try await client.execute(uri: \"\/todos\/\\(id)\", method: .get) { response in","            \/\/ either the get request returned an 200 status or it didn't return a Todo","            XCTAssert(response.status == .ok || response.body.readableBytes == 0)","            if response.body.readableBytes > 0 {","                return try JSONDecoder().decode(Todo.self, from: response.body)","            } else {","                return nil","            }","        }","    }","","    static func list(client: some TestClientProtocol) async throws -> [Todo] {","        try await client.execute(uri: \"\/todos\", method: .get) { response in","            XCTAssertEqual(response.status, .ok)","            return try JSONDecoder().decode([Todo].self, from: response.body)","        }","    }","","    struct UpdateRequest: Encodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","","    static func patch(id: UUID, title: String? = nil, order: Int? = nil, completed: Bool? = nil, client: some TestClientProtocol) async throws -> Todo? {","        let request = UpdateRequest(title: title, order: order, completed: completed)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\/\\(id)\", method: .patch, body: buffer) { response in","            XCTAssertEqual(response.status, .ok)","            if response.body.readableBytes > 0 {","                return try JSONDecoder().decode(Todo.self, from: response.body)","            } else {","                return nil","            }","        }","    }","","    static func delete(id: UUID, client: some TestClientProtocol) async throws -> HTTPResponse.Status {","        try await client.execute(uri: \"\/todos\/\\(id)\", method: .delete) { response in","            response.status","        }","    }","","    static func deleteAll(client: some TestClientProtocol) async throws {","        try await client.execute(uri: \"\/todos\", method: .delete) { _ in }","    }","","    \/\/ MARK: Tests","","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            let todo = try await Self.create(title: \"My first todo\", client: client)","            XCTAssertEqual(todo.title, \"My first todo\")","        }","    }","}"],"type":"file","syntax":"swift","highlights":[{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73},{"line":74},{"line":75},{"line":76},{"line":77},{"line":79}],"fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"url":"\/tutorials\/todos\/api-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","abstract":[],"role":"article","type":"topic","title":"API Setup","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"url":"\/tutorials\/todos\/application-setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup","abstract":[],"role":"article","type":"topic","title":"Application Setup","kind":"article"},"hummingbird.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}],"alt":"Hummingbird logo","type":"image","identifier":"hummingbird.png"},"todos-testing-09.swift":{"fileName":"Tests\/AppTests\/AppTests.swift","identifier":"todos-testing-09.swift","content":["import Foundation","import Hummingbird","import HummingbirdTesting","import Logging","import XCTest","","@testable import App","","final class AppTests: XCTestCase {","    struct TestArguments: AppArguments {","        let hostname = \"127.0.0.1\"","        let port = 0","        let logLevel: Logger.Level? = .trace","    }","","    struct CreateRequest: Encodable {","        let title: String","        let order: Int?","    }","","    static func create(title: String, order: Int? = nil, client: some TestClientProtocol) async throws -> Todo {","        let request = CreateRequest(title: title, order: order)","        let buffer = try JSONEncoder().encodeAsByteBuffer(request, allocator: ByteBufferAllocator())","        return try await client.execute(uri: \"\/todos\", method: .post, body: buffer) { response in","            XCTAssertEqual(response.status, .created)","            return try JSONDecoder().decode(Todo.self, from: response.body)","        }","    }","","    \/\/ MARK: Tests","    ","    func testCreate() async throws {","        let app = try await buildApplication(TestArguments())","        try await app.test(.router) { client in","            let todo = try await Self.create(title: \"My first todo\", client: client)","            XCTAssertEqual(todo.title, \"My first todo\")","        }","    }","}"],"type":"file","syntax":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":35},{"line":36}],"fileType":"swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"url":"\/tutorials\/hummingbird\/todos-1-template","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"role":"project","type":"topic","title":"Create a Hummingbird application.","kind":"project","estimatedTime":"5min"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"url":"\/tutorials\/hummingbird\/todos-3-testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"role":"project","type":"topic","title":"Testing your application","kind":"project","estimatedTime":"15min"},"todos-testing-03.swift":{"syntax":"swift","fileName":"Sources\/App\/Application+build.swift","fileType":"swift","identifier":"todos-testing-03.swift","type":"file","highlights":[],"content":["\/\/\/ Application arguments protocol. ","public protocol AppArguments {","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {"]}}}