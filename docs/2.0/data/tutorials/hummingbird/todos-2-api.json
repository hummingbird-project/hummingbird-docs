{"variants":[{"paths":["\/tutorials\/hummingbird\/todos-2-api"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"category":"Todo backend","title":"Add your application API","role":"project","categoryPathComponent":"Todos"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"]],"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","sections":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","kind":"task"},{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","kind":"task"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application"},{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"project","sections":[{"image":"hummingbird.png","content":[{"inlineContent":[{"text":"Add some functionality to your application.","type":"text"}],"type":"paragraph"}],"chapter":"API Setup","estimatedTimeInMinutes":20,"title":"Add your application API","kind":"hero","backgroundImage":"hummingbird.png"},{"kind":"tasks","tasks":[{"title":"Todo Controller and Repository","contentSection":[{"media":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a controller type that will hold the Todos API"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add the new file ","type":"text"},{"type":"codeVoice","code":"Sources\/App\/Controllers\/TodoController.swift"},{"text":".","type":"text"}]}],"caption":[],"code":"todos-api-01.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to ","type":"text"},{"code":"buildRouter()","type":"codeVoice"},{"text":" in Application+build.swift. Routers ensure a Request is ","type":"text"},{"inlineContent":[{"type":"text","text":"routed"}],"type":"emphasis"},{"text":" to the correct handler function.","type":"text"}]}],"caption":[],"code":"todos-template-06.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add the TodoController endpoints to your router. The Todos API has a URI prefix of “todos”."}]}],"caption":[],"code":"todos-api-02.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to use the "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/"},{"type":"text","text":" to separate our storage concerns from our API. With this we should be able to create an API and test it without worrying about Database setup."}]}],"caption":[],"code":null,"runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"Create a product ","type":"text"},{"type":"codeVoice","code":"Todo"},{"text":" that includes everything to define a todo.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-api-03.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"We are going to use "},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" as the return value for some of our routes, so it needs to conform to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":". This allows us to return it from our routes and have it automatically encoded as JSON. Later we will also be using it in tests so lets add "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformances, for reading JSON and comparing todos."}],"type":"paragraph"}],"caption":[],"code":"todos-api-04.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"TodoRepository"},{"type":"text","text":" protocol that defines all the methods to manage todos: (get, list, create, update, delete and deleteAll). This allows us to use a different implementation of the repository for different storage methods."}]}],"caption":[],"code":"todos-api-05.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create a concrete implementation of "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" protocol that saves everything to memory. We use an actor because multiple tasks could be accessing the repository at the same time, and actors are thread safe."}],"type":"paragraph"}],"caption":[],"code":"todos-api-06.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Return to TodoController.swift","type":"text"}]}],"caption":[],"code":"todos-api-01.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And add a generic repository member variable conforming to "},{"code":"TodoRepository","type":"codeVoice"},{"type":"text","text":" to be used by the "},{"code":"TodoController","type":"codeVoice"},{"type":"text","text":" routes. Generics allow us to use the same controller for different repository implementations."}]}],"caption":[],"code":"todos-api-07.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"Go to ","type":"text"},{"type":"codeVoice","code":"buildRouter()"},{"text":" in Application+build.swift","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-api-02.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"And add the repository parameter to the TodoController initializer. We are using the memory implementation of the ","type":"text"},{"code":"TodoRepository","type":"codeVoice"},{"text":" we have already implemented previously.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-api-08.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Return to TodoController.swift. We can now start adding our endpoints. An endpoint (or Route) is a function that replies to a request if the path and method match.","type":"text"}]}],"caption":[],"code":"todos-api-07.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Our first endpoint is to return a Todo given an id in the URI. We extract the id from the URI, attempt to convert it to a UUID and then call the repository method "},{"type":"codeVoice","code":"get"},{"type":"text","text":" and return the result. The result is then converted to a response using the response encoder (JSONEncoder by default) attached to the context."}]}],"caption":[],"code":"todos-api-09.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"This endpoint has a few other features. If it fails to convert the id to a UUID then it throws an ","type":"text"},{"type":"codeVoice","code":"HTTPError"},{"text":". This is an error that can be converted by the server to a valid HTTP response. If the server receives an error it cannot convert to an HTTP response it will return a 500 (Internal Server Error) HTTP error to the client.","type":"text"}],"type":"paragraph"}],"caption":[{"inlineContent":[{"type":"text","text":"If the endpoint returns nil because it could not find a todo this will automatically return a 204 (No Content) HTTP response to the client."}],"type":"paragraph"}],"code":"todos-api-09.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"Our second endpoint is to create a Todo. We have added a struct to decode from the request. In a similar way the get endpoint response uses JSONEncoder to generate its response, this uses the JSONDecoder attached to the context to read JSON from the request. We then call the repository ","type":"text"},{"type":"codeVoice","code":"create"},{"text":" method and return the result.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-api-10.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning an object and not a raw Response, in general sets the response status to 200 (OK). In this situation we want to return a 201 (Created) status. We can do this by returning an "},{"type":"codeVoice","code":"EditedResponse"},{"type":"text","text":" which can be used to edit the status code and headers of a generated response."}]}],"caption":[],"code":"todos-api-11.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"We now have an API we can test. Lets use curl to create a Todo. If we include the command line parameter ","type":"text"},{"type":"codeVoice","code":"-i"},{"text":" we get the full HTTP response and can see that the status code is 201 (Created).","type":"text"}]}],"caption":[],"code":"todos-api-12.sh","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Then use curl to access the URL that was in the returned json from the previous curl call."}],"type":"paragraph"}],"caption":[{"inlineContent":[{"text":"Cool it works!","type":"text"}],"type":"paragraph"}],"code":"todos-api-13.sh","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Continuing with adding our API endpoints"}],"type":"paragraph"}],"caption":[],"code":"todos-api-11.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the endpoint that lists all of the todos that have been created. Because "},{"type":"codeVoice","code":"Todo"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Array<Todo>"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":" as well."}]}],"caption":[],"code":"todos-api-14.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"This is the endpoint that updates a todo. It extracts the todo id from the URI, decodes the UpdateRequest from the request and then calls the repository ","type":"text"},{"code":"update","type":"codeVoice"},{"text":" function.","type":"text"}]}],"caption":[],"code":"todos-api-15.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"This is the endpoint that deletes a todo. It extracts the todo id from the URI and calls the repository "},{"type":"codeVoice","code":"delete"},{"type":"text","text":" function."}],"type":"paragraph"}],"caption":[],"code":"todos-api-16.swift","runtimePreview":null,"type":"step"},{"media":null,"content":[{"inlineContent":[{"text":"The final endpoint is the one that deletes all todos. It simply calls the repository ","type":"text"},{"code":"deleteAll","type":"codeVoice"},{"text":" function, as it doesn’t need to extract any information from the request.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"todos-api-17.swift","runtimePreview":null,"type":"step"}],"anchor":"Todo-Controller-and-Repository"},{"title":"Testing your application with curl","contentSection":[{"kind":"contentAndMedia","media":"hummingbird.png","content":[{"inlineContent":[{"type":"text","text":"Use curl to ensure your API is working as expected."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Lets test the full API. First we are going to create two todos"}]}],"caption":[],"type":"step","code":"todos-api-18.sh","runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"When we query the URL returned by the first curl request we should get the first Todo added.","type":"text"}]}],"caption":[],"type":"step","code":"todos-api-19.sh","runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"If we update the second Todo and set it to completed …","type":"text"}]}],"caption":[],"type":"step","code":"todos-api-20.sh","runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"text":"when we list all the tests you will see it is now flagged as completed","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"todos-api-21.sh","runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"text":"If we delete a Todo …","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"todos-api-22.sh","runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"when we try to get it again a 204 (No Content) response is returned, as it no longer exists.","type":"text"}]}],"caption":[],"type":"step","code":"todos-api-23.sh","runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"If we delete all of the Todos …"}],"type":"paragraph"}],"caption":[],"type":"step","code":"todos-api-24.sh","runtimePreview":null},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"when we list the Todos, the list is empty.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is not exactly a thorough way to test your application. It is error prone and cumbersome. Move onto the next chapter to discover how you can make this process more streamlined."}]}],"type":"step","code":"todos-api-25.sh","runtimePreview":null}],"anchor":"Testing-your-application-with-curl"}]},{"title":"Testing your application","kind":"callToAction","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"action":{"overridingTitle":"Get started","type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","isActive":true},"featuredEyebrow":"Tutorial"}],"references":{"doc://com.opticalaberration.hummingbird/tutorials/Todos/Store-Todos-in-a-database":{"role":"article","url":"\/tutorials\/todos\/store-todos-in-a-database","type":"topic","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Store-Todos-in-a-database","title":"Store Todos in a database","kind":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Todos":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos","title":"Build a Todos application.","kind":"overview","abstract":[{"text":"A tutorial showing you how to build a simple Todos application that allows you to store, access, edit and delete Todos in a database, using Hummingbird and PostgresNIO.","type":"text"}],"url":"\/tutorials\/todos","role":"overview"},"todos-api-23.sh":{"fileType":"","highlights":[{"line":5},{"line":6},{"line":7},{"line":8}],"fileName":"Test delete","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT"],"type":"file","identifier":"todos-api-23.sh","syntax":""},"todos-api-17.swift":{"type":"file","identifier":"todos-api-17.swift","syntax":"swift","highlights":[{"line":16},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","            .delete(use: deleteAll)","    }","","    \/\/\/ Delete all todos endpoint","    @Sendable func deleteAll(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        try await self.repository.deleteAll()","        return .ok","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"fileType":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Todo-Controller-and-Repository":{"role":"pseudoSymbol","url":"\/tutorials\/hummingbird\/todos-2-api#Todo-Controller-and-Repository","type":"section","abstract":[{"type":"text","text":"Add some functionality to your application."}],"kind":"section","title":"Todo Controller and Repository","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Todo-Controller-and-Repository"},"todos-api-13.sh":{"type":"file","identifier":"todos-api-13.sh","syntax":"","highlights":[],"content":["> curl http:\/\/localhost:8080\/todos\/284DC153-4FE9-458D-8A93-6CB60990B2F3","{\"completed\":false,\"title\":\"Read chapter on testing applications\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\"}"],"fileType":"","fileName":"Test get"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Application-Setup":{"role":"article","url":"\/tutorials\/todos\/application-setup","type":"topic","abstract":[],"kind":"article","title":"Application Setup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Application-Setup"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Test-your-application":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Test-your-application","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Test-your-application","title":"Test your application"},"todos-template-06.swift":{"type":"file","identifier":"todos-template-06.swift","syntax":"swift","highlights":[],"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift"},"todos-api-15.swift":{"highlights":[{"line":14},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36}],"type":"file","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"fileName":"Sources\/App\/Controllers\/TodoController.swift","fileType":"swift","identifier":"todos-api-15.swift"},"todos-api-16.swift":{"type":"file","identifier":"todos-api-16.swift","syntax":"swift","highlights":[{"line":15},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","            .patch(\":id\", use: update)","            .delete(\":id\", use: delete)","    }","","    \/\/\/ Delete todo endpoint","    @Sendable func delete(request: Request, context: some RequestContext) async throws -> HTTPResponse.Status {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        if try await self.repository.delete(id: id) {","            return .ok","        } else {","            return .badRequest","        }","    }","","    struct UpdateRequest: Decodable {","        let title: String?","        let order: Int?","        let completed: Bool?","    }","    \/\/\/ Update todo endpoint","    @Sendable func update(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        let request = try await request.decode(as: UpdateRequest.self, context: context)","        guard let todo = try await self.repository.update(","            id: id, ","            title: request.title, ","            order: request.order, ","            completed: request.completed","        ) else {","            throw HTTPError(.badRequest)","        }","        return todo","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"fileType":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing#Project-testing-setup":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-3-testing#Project-testing-setup","role":"pseudoSymbol","abstract":[{"type":"text","text":"Test your application using the HummingbirdTesting framework"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing#Project-testing-setup","title":"Project testing setup"},"todos-api-03.swift":{"type":"file","identifier":"todos-api-03.swift","syntax":"swift","highlights":[],"content":["import Foundation","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}"],"fileType":"swift","fileName":"Sources\/App\/Repositories\/Todo.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-2-api","role":"project","abstract":[{"type":"text","text":"Add some functionality to your application."}],"estimatedTime":"20min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API","title":"Add your application API"},"todos-api-06.swift":{"type":"file","identifier":"todos-api-06.swift","syntax":"swift","highlights":[],"content":["import Foundation","","\/\/\/ Concrete implementation of `TodoRepository` that stores everything in memory","actor TodoMemoryRepository: TodoRepository {","    var todos: [UUID: Todo]","","    init() {","        self.todos = [:]","    }","","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo {","        let id = UUID()","        let url = urlPrefix + id.uuidString","        let todo = Todo(id: id, title: title, order: order, url: url, completed: false)","        self.todos[id] = todo","        return todo","    }","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo? {","        return self.todos[id]","    }","    \/\/\/ List all todos","    func list() async throws -> [Todo] {","        return self.todos.values.map { $0 }","    }","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo? {","        if var todo = self.todos[id] {","            if let title {","                todo.title = title","            }","            if let order {","                todo.order = order","            }","            if let completed {","                todo.completed = completed","            }","            self.todos[id] = todo","            return todo","        }","        return nil","    }","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool {","        if self.todos[id] != nil {","            self.todos[id] = nil","            return true","        }","        return false","    }","    \/\/\/ Delete all todos","    func deleteAll() async throws {","        self.todos = [:]","    }","","}"],"fileType":"swift","fileName":"Sources\/App\/Repositories\/TodoMemoryRepository.swift"},"todos-api-04.swift":{"highlights":[{"line":2},{"line":16},{"line":17}],"syntax":"swift","type":"file","content":["import Foundation","import Hummingbird","","struct Todo {","    \/\/ Todo ID","    var id: UUID","    \/\/ Title ","    var title: String","    \/\/ Order number","    var order: Int?","    \/\/ URL to get this ToDo","    var url: String","    \/\/ Is Todo complete","    var completed: Bool?","}","","extension Todo: ResponseEncodable, Decodable, Equatable {}"],"fileName":"Sources\/App\/Repositories\/Todo.swift","fileType":"swift","identifier":"todos-api-04.swift"},"hummingbird.png":{"alt":"Hummingbird logo","type":"image","identifier":"hummingbird.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}]},"todos-api-25.sh":{"type":"file","identifier":"todos-api-25.sh","syntax":"","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}],"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT","","> curl -i http:\/\/localhost:8080\/todos\/                                              ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 2","Date: Mon, 9 Sep 2024 11:52:24 GMT","","[]"],"fileType":"","fileName":"Test delete"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-2-API#Testing-your-application-with-curl":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-2-api#Testing-your-application-with-curl","role":"pseudoSymbol","abstract":[{"type":"text","text":"Add some functionality to your application."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-2-API#Testing-your-application-with-curl","title":"Testing your application with curl"},"todos-api-12.sh":{"type":"file","identifier":"todos-api-12.sh","syntax":"","highlights":[],"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Read chapter on testing applications\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 187","Date: Mon, 9 Sep 2024 10:02:08 GMT","","{\"completed\":false,\"id\":\"284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/284DC153-4FE9-458D-8A93-6CB60990B2F3\",\"title\":\"Read chapter on testing applications\"}"],"fileType":"","fileName":"Test create"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-3-Testing":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-3-testing","role":"project","abstract":[{"text":"Test your application using the HummingbirdTesting framework","type":"text"}],"estimatedTime":"15min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-3-Testing","title":"Testing your application"},"todos-api-20.sh":{"type":"file","identifier":"todos-api-20.sh","syntax":"","highlights":[],"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"fileType":"","fileName":"Test update"},"todos-api-07.swift":{"highlights":[],"type":"file","syntax":"swift","content":["import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"fileName":"Sources\/App\/Controllers\/TodoController.swift","identifier":"todos-api-07.swift","fileType":"swift"},"todos-api-11.swift":{"type":"file","identifier":"todos-api-11.swift","syntax":"swift","highlights":[],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"fileType":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-a-Postgres-repository":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-a-Postgres-repository","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-a-Postgres-repository","title":"Setup a Postgres repository"},"https://www.geeksforgeeks.org/repository-design-pattern/":{"url":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","identifier":"https:\/\/www.geeksforgeeks.org\/repository-design-pattern\/","titleInlineContent":[{"type":"text","text":"repository design pattern"}],"type":"link","title":"repository design pattern"},"todos-api-08.swift":{"type":"file","identifier":"todos-api-08.swift","syntax":"swift","highlights":[{"line":13}],"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    router.addRoutes(TodoController(repository: TodoMemoryRepository()).endpoints, atPath: \"\/todos\")","    return router","}"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template#Create-your-project":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-1-template#Create-your-project","role":"pseudoSymbol","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template#Create-your-project","title":"Create your project"},"todos-api-19.sh":{"type":"file","identifier":"todos-api-19.sh","syntax":"","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:43 GMT","","{\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"completed\":false}"],"fileType":"","fileName":"Test create and get"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-4-postgres","role":"project","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"estimatedTime":"15min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres","title":"Use PostgresNIO to store your Todos in a Postgres database"},"doc://com.opticalaberration.hummingbird/tutorials/Todos/API-Setup":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/API-Setup","title":"API Setup","kind":"article","abstract":[],"url":"\/tutorials\/todos\/api-setup","role":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-1-Template":{"kind":"project","type":"topic","url":"\/tutorials\/hummingbird\/todos-1-template","role":"project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"estimatedTime":"5min","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-1-Template","title":"Create a Hummingbird application."},"doc://com.opticalaberration.hummingbird/tutorials/Todos/Testing-your-application":{"title":"Testing your application","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Todos\/Testing-your-application","kind":"article","abstract":[],"url":"\/tutorials\/todos\/testing-your-application","role":"article"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Todos-4-Postgres#Setup-your-Postgres-database":{"kind":"section","type":"section","url":"\/tutorials\/hummingbird\/todos-4-postgres#Setup-your-Postgres-database","role":"pseudoSymbol","abstract":[{"type":"text","text":"Now we have a working API and a way to test it, lets look into storing our todos in a Postgres database with PostgresNIO."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Todos-4-Postgres#Setup-your-Postgres-database","title":"Setup your Postgres database"},"todos-api-21.sh":{"type":"file","identifier":"todos-api-21.sh","syntax":"","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"content":["> curl -i -X PATCH http:\/\/localhost:8080\/todos\/31B0FCCA-F084-4EB6-BCEF-002A00077549 -d '{\"completed\": true}'","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 164","Date: Mon, 9 Sep 2024 11:50:01 GMT","","{\"title\":\"Brush my teeth\",\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\"}","","> curl -i http:\/\/localhost:8080\/todos\/","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 330","Date: Mon, 9 Sep 2024 11:50:26 GMT","","[{\"completed\":true,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\"},{\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}]",""],"fileType":"","fileName":"Test update"},"todos-api-05.swift":{"highlights":[],"type":"file","syntax":"swift","content":["import Foundation","","\/\/\/ Interface for storing and editing todos","protocol TodoRepository: Sendable {","    \/\/\/ Create todo.","    func create(title: String, order: Int?, urlPrefix: String) async throws -> Todo","    \/\/\/ Get todo","    func get(id: UUID) async throws -> Todo?","    \/\/\/ List all todos","    func list() async throws -> [Todo]","    \/\/\/ Update todo. Returns updated todo if successful","    func update(id: UUID, title: String?, order: Int?, completed: Bool?) async throws -> Todo?","    \/\/\/ Delete todo. Returns true if successful","    func delete(id: UUID) async throws -> Bool","    \/\/\/ Delete all todos","    func deleteAll() async throws","}"],"fileName":"Sources\/App\/Repositories\/TodoRepository.swift","identifier":"todos-api-05.swift","fileType":"swift"},"todos-api-24.sh":{"type":"file","identifier":"todos-api-24.sh","syntax":"","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT","","> curl -i http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 204 No Content","Date: Mon, 9 Sep 2024 11:51:59 GMT","","> curl -i -X DELETE http:\/\/localhost:8080\/todos\/                                    ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:52:19 GMT"],"fileType":"","fileName":"Test delete"},"todos-api-01.swift":{"highlights":[],"type":"file","syntax":"swift","content":["import Hummingbird","","struct TodoController {","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","    }","}"],"fileName":"Sources\/App\/Controllers\/TodoController.swift","fileType":"swift","identifier":"todos-api-01.swift"},"todos-api-18.sh":{"type":"file","identifier":"todos-api-18.sh","syntax":"","highlights":[],"content":["> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Wash my hair\"}'  ","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 163","Date: Mon, 9 Sep 2024 11:48:06 GMT","","{\"completed\":false,\"title\":\"Wash my hair\",\"id\":\"7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\",\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253\"}","","> curl -i -X POST localhost:8080\/todos -d'{\"title\": \"Brush my teeth\"}'","HTTP\/1.1 201 Created","Content-Type: application\/json; charset=utf-8","Content-Length: 165","Date: Mon, 9 Sep 2024 11:48:11 GMT","","{\"id\":\"31B0FCCA-F084-4EB6-BCEF-002A00077549\",\"title\":\"Brush my teeth\",\"completed\":false,\"url\":\"http:\\\/\\\/localhost:8080\\\/todos\\\/31B0FCCA-F084-4EB6-BCEF-002A00077549\"}"],"fileType":"","fileName":"Test create and get"},"todos-api-09.swift":{"highlights":[],"type":"file","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","}"],"fileName":"Sources\/App\/Controllers\/TodoController.swift","fileType":"swift","identifier":"todos-api-09.swift"},"todos-api-02.swift":{"type":"file","identifier":"todos-api-02.swift","syntax":"swift","highlights":[],"content":["\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    router.addRoutes(TodoController().endpoints, atPath: \"\/todos\")","    return router","}"],"fileType":"swift","fileName":"Sources\/App\/Application+build.swift"},"todos-api-10.swift":{"highlights":[{"line":12},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29}],"type":"file","syntax":"swift","content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> Todo {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        return try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","    }","}"],"fileName":"Sources\/App\/Controllers\/TodoController.swift","fileType":"swift","identifier":"todos-api-10.swift"},"todos-api-14.swift":{"type":"file","identifier":"todos-api-14.swift","syntax":"swift","highlights":[{"line":12},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26}],"content":["import Foundation","import Hummingbird","","struct TodoController<Repository: TodoRepository> {","    \/\/ Todo repository","    let repository: Repository","","    \/\/ return todo endpoints","    var endpoints: RouteCollection<AppRequestContext> {","        return RouteCollection(context: AppRequestContext.self)","            .get(\":id\", use: get)","            .get(use: list)","            .post(use: create)","    }","","    \/\/\/ Get todo endpoint","    @Sendable func get(request: Request, context: some RequestContext) async throws -> Todo? {","        let id = try context.parameters.require(\"id\", as: UUID.self)","        return try await self.repository.get(id: id)","    }","","    \/\/\/ Get list of todos endpoint","    @Sendable func list(request: Request, context: some RequestContext) async throws -> [Todo] {","        return try await self.repository.list()","    }","","    struct CreateRequest: Decodable {","        let title: String","        let order: Int?","    }","    \/\/\/ Create todo endpoint","    @Sendable func create(request: Request, context: some RequestContext) async throws -> EditedResponse<Todo> {","        let request = try await request.decode(as: CreateRequest.self, context: context)","        let todo = try await self.repository.create(title: request.title, order: request.order, urlPrefix: \"http:\/\/localhost:8080\/todos\/\")","        return EditedResponse(status: .created, response: todo)","    }","}"],"fileType":"swift","fileName":"Sources\/App\/Controllers\/TodoController.swift"},"todos-api-22.sh":{"highlights":[],"syntax":"","type":"file","content":["> curl -i -X DELETE http:\/\/localhost:8080\/todos\/7BDECA4F-3A8A-49AC-A83C-5F1C6E181253 ","HTTP\/1.1 200 OK","Content-Length: 0","Date: Mon, 9 Sep 2024 11:51:47 GMT"],"fileName":"Test delete","fileType":"","identifier":"todos-api-22.sh"}}}