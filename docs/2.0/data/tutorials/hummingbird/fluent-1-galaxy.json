{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy","interfaceLanguage":"swift"},"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy","sections":[{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Create-your-project"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Add-Fluent"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Add-Galaxy-API"},{"kind":"task","reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Test-your-Backend"}]}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent\/Build-a-Galaxy-Backend"}],"reference":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","paths":[["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent\/$volume","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent\/Build-a-Galaxy-Backend"]]},"metadata":{"title":"Create a Hummingbird + Fluent application.","categoryPathComponent":"Fluent","role":"project","category":"Fluent Backend"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/hummingbird\/fluent-1-galaxy"]}],"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[{"title":"Create a Hummingbird + Fluent application.","estimatedTimeInMinutes":15,"image":"hummingbird.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}]}],"kind":"hero","backgroundImage":"hummingbird.png","chapter":"Build a Galaxy Backend"},{"kind":"tasks","tasks":[{"stepsSection":[{"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Clone the Hummingbird template GitHub project"}],"type":"paragraph"}],"caption":[],"media":null,"code":"fluent-universe-01.sh"},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create your project, using the template configure script. Press return on each question to use the default value."}]}],"caption":[],"media":null,"code":"fluent-universe-02.sh"},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Add the ","type":"text"},{"code":"hummingbird-fluent","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fluent-sqlite-driver","type":"codeVoice"},{"text":" dependencies.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Like with Vapor, you can use different Fluent Drivers as your backing storage.","type":"text"}]}],"media":null,"code":"fluent-universe-04.swift"}],"title":"Create your project","anchor":"Create-your-project","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Clone the Hummingbird template, configure a project and review the contents of the generated project.","type":"text"}],"type":"paragraph"}],"media":"hummingbird.png"}]},{"stepsSection":[{"content":[{"inlineContent":[{"text":"Open ","type":"text"},{"code":"Sources\/App\/Application+build.swift","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Add the Fluent dependencies, and modify the "},{"type":"codeVoice","code":"AppArguments"},{"type":"text","text":" to contain two new variables."}],"type":"paragraph"}],"runtimePreview":null,"code":"fluent-universe-06.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/App.swift"}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This contains an "},{"code":"App","type":"codeVoice"},{"type":"text","text":" type conforming to "},{"code":"AsyncParsableCommand","type":"codeVoice"},{"type":"text","text":" with three options, the "},{"code":"hostname","type":"codeVoice"},{"type":"text","text":" and "},{"code":"port","type":"codeVoice"},{"type":"text","text":" are used to define the server bind address, "},{"code":"logLevel","type":"codeVoice"},{"type":"text","text":" sets the level of logging required. Finally the "},{"code":"run()","type":"codeVoice"},{"type":"text","text":" function which calls "},{"code":"buildApplication(_:)","type":"codeVoice"},{"type":"text","text":" to create an "},{"code":"Application","type":"codeVoice"},{"type":"text","text":" and then runs it using "},{"code":"runService()","type":"codeVoice"},{"type":"text","text":". You can find out more about the argument parser library "},{"identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","type":"reference","isActive":true},{"type":"text","text":"."}]}],"runtimePreview":null,"code":"fluent-universe-07.swift","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Add the new app arguments with default values."}],"type":"paragraph"}],"type":"step","caption":[],"runtimePreview":null,"code":"fluent-universe-08.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":" again."}]}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now add Fluent to our application’s lifecycle."}]}],"runtimePreview":null,"code":"fluent-universe-06.swift","media":null},{"content":[{"inlineContent":[{"text":"First, create a Fluent object and add the SQLite driver to Fluent.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Depending on the "},{"type":"codeVoice","code":"inMemoryDatabase"},{"type":"text","text":" boolean, this application can run completely in-memory. This is useful for testing, as it loses all data when the application is re-launched."}],"type":"paragraph"}],"runtimePreview":null,"code":"fluent-universe-09.swift","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Next, we’ll use Fluent as a persistence mechanism for the Persist framework. This step is "},{"type":"strong","inlineContent":[{"text":"optional","type":"text"}]},{"type":"text","text":" for this tutorial."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"text":"This allows it to integrate with Hummingbird’s ecosystem, including the Auth framework.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"code":"fluent-universe-10.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Finally, both Fluent and the FluentPersistDriver are added to swift-service-lifecycle.","type":"text"}]}],"type":"step","caption":[],"runtimePreview":null,"code":"fluent-universe-11.swift","media":null}],"title":"Add Fluent","anchor":"Add-Fluent","contentSection":[{"content":[{"inlineContent":[{"text":"With your Package.swift set up, lets add Fluent to your project.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia","media":"hummingbird.png"}]},{"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a file named ","type":"text"},{"code":"Galaxy.swift","type":"codeVoice"},{"text":", and add the following Fluent Model.","type":"text"}]}],"media":null,"code":"fluent-universe-12.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"text":"This Fluent model has the ‘id’ and a ‘name’ properties.","type":"text"}]}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Before being able to use a Model, a migration must be added.","type":"text"}]}],"media":null,"code":"fluent-universe-13.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration creates or reverts a diff to the schema in the database."}]}],"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"Sources\/App\/Application+build.swift"},{"type":"text","text":" again. Fluent is now a completely blank slate, let’s set it up."}],"type":"paragraph"}],"media":null,"code":"fluent-universe-14.swift","type":"step","caption":[{"inlineContent":[{"text":"The newly added migrations are added to Fluent. Make sure that any new migrations are added to Fluent in the right order.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"The final step to set up Fluent is to run the migrations.","type":"text"}]}],"media":null,"code":"fluent-universe-15.swift","type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s common to explicitly run migrations, but for small scale set-ups can also run migrations on every app launch."}]}],"runtimePreview":null},{"content":[{"inlineContent":[{"text":"If we look further down the file we can find the ","type":"text"},{"type":"codeVoice","code":"buildRouter()"},{"text":" function.","type":"text"}],"type":"paragraph"}],"media":null,"code":"fluent-universe-15.swift","type":"step","caption":[{"inlineContent":[{"text":"Here we create the ","type":"text"},{"type":"codeVoice","code":"Router"},{"text":". We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use ","type":"text"},{"type":"codeVoice","code":"Router.add(middleware:)"},{"text":" to add individual middleware. Finally we add a single endpoint GET ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" which returns “Hello!”","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"content":[{"inlineContent":[{"text":"We’ll add a single route ","type":"text"},{"code":"GET \/galaxies","type":"codeVoice"},{"text":", which lists all registered galaxies.","type":"text"}],"type":"paragraph"}],"media":null,"code":"fluent-universe-16.swift","type":"step","caption":[{"inlineContent":[{"text":"Because the database is empty now, we’ll add a route ","type":"text"},{"code":"PUT \/galaxies","type":"codeVoice"},{"text":" to add your own galaxies.","type":"text"}],"type":"paragraph"}],"runtimePreview":null}],"title":"Add Galaxy API","anchor":"Add-Galaxy-API","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Add your database models and routes to edit them.","type":"text"}],"type":"paragraph"}],"media":"hummingbird.png"}]},{"stepsSection":[{"caption":[{"inlineContent":[{"text":"First, create your own galaxy!","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"We can run the application and use curl to test it works."}],"type":"paragraph"}],"type":"step","code":"fluent-universe-17.sh"},{"caption":[],"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Then, query the list of galaxies.","type":"text"}],"type":"paragraph"}],"type":"step","code":"fluent-universe-18.sh"},{"caption":[],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can see the galaxy added in the first call, is returned when we ask to list all the galaxies."}]}],"type":"step","code":"fluent-universe-19.sh"}],"title":"Test your Backend","anchor":"Test-your-Backend","contentSection":[{"mediaPosition":"trailing","media":"hummingbird.png","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Now that your Fluent backend is complete, it’s time to validate the results!","type":"text"}]}]}]}]}],"references":{"hummingbird.png":{"identifier":"hummingbird.png","type":"image","alt":"Hummingbird logo","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/hummingbird.png","traits":["1x","light"]}]},"fluent-universe-02.sh":{"fileName":"Create Swift Package","type":"file","content":["> .\/template\/configure.sh TodosFluent","Enter your package name: [TodosFluent] > ","Enter your executable name: [App] > ","Include Visual Studio Code snippets: [Y\/n] > "],"identifier":"fluent-universe-02.sh","syntax":"","fileType":"","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"role":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","title":"Store Data with Fluent","kind":"overview","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}],"type":"topic","url":"\/tutorials\/fluent"},"fluent-universe-19.sh":{"content":["> curl -i localhost:8080\/galaxies","HTTP\/1.1 200 OK","Content-Type: application\/json; charset=utf-8","Content-Length: 66","Date: Thu, 21 Nov 2024 14:55:26 GMT","Server: TodosFluent","","[{\"id\":\"9DB14C0C-EC2E-4C51-84CB-A2BEB4CDF967\",\"name\":\"Andromeda\"}]"],"highlights":[{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8}],"identifier":"fluent-universe-19.sh","type":"file","fileName":"Test Application","syntax":"","fileType":""},"fluent-universe-16.swift":{"fileName":"Sources\/App\/Application+build.swift","type":"file","content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","    \/\/ add migrations","    await fluent.migrations.add(CreateGalaxy())","","    let fluentPersist = await FluentPersistDriver(fluent: fluent)","","    \/\/ migrate","    if arguments.migrate || arguments.inMemoryDatabase {","        try await fluent.migrate()","    }","","    let router = buildRouter(fluent: fluent)","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    app.addServices(fluent, fluentPersist)","    return app","}","","\/\/\/ Build router","func buildRouter(fluent: Fluent) -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    \/\/ List all galaxies","    router.get(\"\/galaxies\") { _,_ -> [Galaxy] in","        try await Galaxy.query(on: self.fluent.db()).all()","    }","    router.put(\"\/galaxies\") { request, context -> Response in","        let galaxy = try await request.decode(as: Galaxy.self, context: context)","        try await galaxy.save(on: fluent.db())","        return Response(status: .created)","    }","    return router","}"],"identifier":"fluent-universe-16.swift","syntax":"swift","fileType":"swift","highlights":[{"line":52},{"line":66},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85}]},"fluent-universe-13.swift":{"content":["import FluentKit","import Foundation","import Hummingbird","","final class Galaxy: Model, @unchecked Sendable, ResponseCodable {","    \/\/ Name of the table or collection.","    static let schema = \"galaxies\"","","    \/\/ Unique identifier for this Galaxy.","    @ID(key: .id)","    var id: UUID?","","    \/\/ The Galaxy's name.","    @Field(key: \"name\")","    var name: String","","    \/\/ Creates a new, empty Galaxy.","    init() { }","","    \/\/ Creates a new Galaxy with all properties set.","    init(id: UUID? = nil, name: String) {","        self.id = id","        self.name = name","    }","}","","struct CreateGalaxy: AsyncMigration {","    func prepare(on database: Database) async throws {","        return try await database.schema(Galaxy.schema)","            .id()","            .field(\"name\", .string, .required)","            .create()","    }","","    func revert(on database: Database) async throws {","        return try await database.schema(Galaxy.schema).delete()","    }","}"],"highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"fileName":"Sources\/App\/Galaxy.swift","identifier":"fluent-universe-13.swift","type":"file","syntax":"swift","fileType":"swift"},"fluent-universe-04.swift":{"fileName":"Package.swift","type":"file","content":["\/\/ swift-tools-version:6.0","\/\/ The swift-tools-version declares the minimum version of Swift required to build this package.","","import PackageDescription","","let package = Package(","    name: \"TodosFluent\",","    platforms: [.macOS(.v14), .iOS(.v17), .tvOS(.v17)],","    products: [","        .executable(name: \"App\", targets: [\"App\"]),","    ],","    dependencies: [","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird.git\", from: \"2.0.0\"),","        .package(url: \"https:\/\/github.com\/apple\/swift-argument-parser.git\", from: \"1.3.0\"),","        .package(url: \"https:\/\/github.com\/hummingbird-project\/hummingbird-fluent.git\", from: \"2.0.0-beta.5\"),","        .package(url: \"https:\/\/github.com\/vapor\/fluent-sqlite-driver.git\", from: \"4.7.0\"),","    ],","    targets: [","        .executableTarget(","            name: \"App\",","            dependencies: [","                .product(name: \"ArgumentParser\", package: \"swift-argument-parser\"),","                .product(name: \"FluentSQLiteDriver\", package: \"fluent-sqlite-driver\"),","                .product(name: \"Hummingbird\", package: \"hummingbird\"),","                .product(name: \"HummingbirdFluent\", package: \"hummingbird-fluent\"),","            ],","            path: \"Sources\/App\"","        ),","        .testTarget(","            name: \"AppTests\",","            dependencies: [","                .byName(name: \"App\"),","                .product(name: \"HummingbirdTesting\", package: \"hummingbird\")","            ],","            path: \"Tests\/AppTests\"","        )","    ]",")"],"identifier":"fluent-universe-04.swift","syntax":"swift","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":23},{"line":25}]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Fluent-1-Galaxy#Test-your-Backend":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Test-your-Backend","title":"Test your Backend","kind":"section","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"url":"\/tutorials\/hummingbird\/fluent-1-galaxy#Test-your-Backend","type":"section","role":"pseudoSymbol"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Fluent-1-Galaxy#Create-your-project":{"title":"Create your project","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Create-your-project","url":"\/tutorials\/hummingbird\/fluent-1-galaxy#Create-your-project","kind":"section","role":"pseudoSymbol"},"fluent-universe-11.swift":{"content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","","    let fluentPersist = await FluentPersistDriver(fluent: fluent)","    ","    let router = buildRouter()","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    app.addServices(fluent, fluentPersist)","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"highlights":[{"line":46},{"line":54}],"type":"file","fileName":"Sources\/App\/Application+build.swift","identifier":"fluent-universe-11.swift","syntax":"swift","fileType":"swift"},"fluent-universe-15.swift":{"fileName":"Sources\/App\/Application+build.swift","type":"file","content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","    \/\/ add migrations","    await fluent.migrations.add(CreateGalaxy())","","    let fluentPersist = await FluentPersistDriver(fluent: fluent)","","    \/\/ migrate","    if arguments.migrate || arguments.inMemoryDatabase {","        try await fluent.migrate()","    }","","    let router = buildRouter()","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    app.addServices(fluent, fluentPersist)","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"identifier":"fluent-universe-15.swift","syntax":"swift","fileType":"swift","highlights":[]},"doc://com.opticalaberration.hummingbird/tutorials/Fluent/Build-a-Galaxy-Backend":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent\/Build-a-Galaxy-Backend","kind":"article","title":"Build a Galaxy Backend","url":"\/tutorials\/fluent\/build-a-galaxy-backend","abstract":[],"role":"article"},"https://apple.github.io/swift-argument-parser/documentation/argumentparser":{"type":"link","titleInlineContent":[{"text":"here","type":"text"}],"identifier":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser","title":"here","url":"https:\/\/apple.github.io\/swift-argument-parser\/documentation\/argumentparser"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Fluent-1-Galaxy#Add-Galaxy-API":{"abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"title":"Add Galaxy API","type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Add-Galaxy-API","url":"\/tutorials\/hummingbird\/fluent-1-galaxy#Add-Galaxy-API","kind":"section","role":"pseudoSymbol"},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Fluent-1-Galaxy#Add-Fluent":{"type":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy#Add-Fluent","kind":"section","title":"Add Fluent","url":"\/tutorials\/hummingbird\/fluent-1-galaxy#Add-Fluent","abstract":[{"text":"Create a simple web application using the Hummingbird template.","type":"text"}],"role":"pseudoSymbol"},"fluent-universe-09.swift":{"fileName":"Sources\/App\/Application+build.swift","type":"file","content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"identifier":"fluent-universe-09.swift","syntax":"swift","fileType":"swift","highlights":[{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42}]},"fluent-universe-07.swift":{"content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"highlights":[],"identifier":"fluent-universe-07.swift","type":"file","fileName":"Sources\/App\/App.swift","syntax":"swift","fileType":"swift"},"fluent-universe-17.sh":{"fileName":"Test Application","type":"file","content":["> curl -i -X PUT -H \"Content-Type: application\/json\" -d '{\"name\":\"Andromeda\"}' localhost:8080\/galaxies","HTTP\/1.1 201 Created","Content-Length: 0","Date: Sat, 23 Nov 2024 09:22:26 GMT","Server: TodosFluent"],"identifier":"fluent-universe-17.sh","syntax":"","fileType":"","highlights":[]},"fluent-universe-14.swift":{"content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","    \/\/ add migrations","    await fluent.migrations.add(CreateGalaxy())","","    let fluentPersist = await FluentPersistDriver(fluent: fluent)","    ","    let router = buildRouter()","    var app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    app.addServices(fluent, fluentPersist)","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"highlights":[{"line":42},{"line":43}],"identifier":"fluent-universe-14.swift","type":"file","fileName":"Sources\/App\/Application+build.swift","syntax":"swift","fileType":"swift"},"fluent-universe-08.swift":{"fileName":"Sources\/App\/App.swift","type":"file","content":["import ArgumentParser","import Hummingbird","import Logging","","@main","struct App: AsyncParsableCommand, AppArguments {","    @Option(name: .shortAndLong)","    var hostname: String = \"127.0.0.1\"","","    @Option(name: .shortAndLong)","    var port: Int = 8080","","    @Option(name: .shortAndLong)","    var logLevel: Logger.Level?","","    @Flag(name: .shortAndLong)","    var migrate: Bool = false","","    @Flag(name: .shortAndLong)","    var inMemoryDatabase: Bool = false","","    func run() async throws {","        let app = try await buildApplication(self)","        try await app.runService()","    }","}","","\/\/\/ Extend `Logger.Level` so it can be used as an argument","#if hasFeature(RetroactiveAttribute)","    extension Logger.Level: @retroactive ExpressibleByArgument {}","#else","    extension Logger.Level: ExpressibleByArgument {}","#endif"],"identifier":"fluent-universe-08.swift","syntax":"swift","fileType":"swift","highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21}]},"fluent-universe-12.swift":{"fileType":"swift","highlights":[],"type":"file","identifier":"fluent-universe-12.swift","fileName":"Sources\/App\/Galaxy.swift","syntax":"swift","content":["import FluentKit","import Foundation","import Hummingbird","","final class Galaxy: Model, @unchecked Sendable, ResponseCodable {","    \/\/ Name of the table or collection.","    static let schema = \"galaxies\"","","    \/\/ Unique identifier for this Galaxy.","    @ID(key: .id)","    var id: UUID?","","    \/\/ The Galaxy's name.","    @Field(key: \"name\")","    var name: String","","    \/\/ Creates a new, empty Galaxy.","    init() { }","","    \/\/ Creates a new Galaxy with all properties set.","    init(id: UUID? = nil, name: String) {","        self.id = id","        self.name = name","    }","}"]},"doc://com.opticalaberration.hummingbird/tutorials/Hummingbird/Fluent-1-Galaxy":{"title":"Create a Hummingbird + Fluent application.","abstract":[{"type":"text","text":"Create a simple web application using the Hummingbird template."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Hummingbird\/Fluent-1-Galaxy","url":"\/tutorials\/hummingbird\/fluent-1-galaxy","kind":"project","estimatedTime":"15min","role":"project"},"fluent-universe-10.swift":{"fileType":"swift","highlights":[{"line":43},{"line":44}],"type":"file","identifier":"fluent-universe-10.swift","fileName":"Sources\/App\/Application+build.swift","syntax":"swift","content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","","    let fluent = Fluent(logger: logger)","    \/\/ add sqlite database","    if arguments.inMemoryDatabase {","        fluent.databases.use(.sqlite(.memory), as: .sqlite)","    } else {","        fluent.databases.use(.sqlite(.file(\"db.sqlite\")), as: .sqlite)","    }","","    let fluentPersist = await FluentPersistDriver(fluent: fluent)","    ","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"]},"fluent-universe-01.sh":{"fileName":"Clone template","type":"file","content":["> git clone https:\/\/github.com\/hummingbird-project\/template"],"identifier":"fluent-universe-01.sh","syntax":"","fileType":"","highlights":[]},"fluent-universe-06.swift":{"content":["import Hummingbird","import Logging","import FluentSQLiteDriver","import Foundation","import HummingbirdFluent","","\/\/\/ Application arguments protocol. We use a protocol so we can call","\/\/\/ `buildApplication` inside Tests as well as in the App executable.","\/\/\/ Any variables added here also have to be added to `App` in App.swift and","\/\/\/ `TestArguments` in AppTest.swift","public protocol AppArguments {","    var inMemoryDatabase: Bool { get }","    var migrate: Bool { get }","    var hostname: String { get }","    var port: Int { get }","    var logLevel: Logger.Level? { get }","}","","\/\/ Request context used by application","typealias AppRequestContext = BasicRequestContext","","\/\/\/  Build application","\/\/\/ - Parameter arguments: application arguments","public func buildApplication(_ arguments: some AppArguments) async throws -> some ApplicationProtocol {","    let environment = Environment()","    let logger = {","        var logger = Logger(label: \"TodosFluent\")","        logger.logLevel =","        arguments.logLevel ??","        environment.get(\"LOG_LEVEL\").flatMap { Logger.Level(rawValue: $0) } ??","            .info","        return logger","    }()","    let router = buildRouter()","    let app = Application(","        router: router,","        configuration: .init(","            address: .hostname(arguments.hostname, port: arguments.port),","            serverName: \"TodosFluent\"","        ),","        logger: logger","    )","    return app","}","","\/\/\/ Build router","func buildRouter() -> Router<AppRequestContext> {","    let router = Router(context: AppRequestContext.self)","    \/\/ Add middleware","    router.addMiddleware {","        \/\/ logging middleware","        LogRequestsMiddleware(.info)","    }","    \/\/ Add default endpoint","    router.get(\"\/\") { _,_ in","        return \"Hello!\"","    }","    return router","}"],"highlights":[],"identifier":"fluent-universe-06.swift","type":"file","fileName":"Sources\/App\/Application+build.swift","syntax":"swift","fileType":"swift"},"fluent-universe-18.sh":{"fileName":"Test Application","type":"file","content":["> curl -i localhost:8080\/galaxies"],"identifier":"fluent-universe-18.sh","syntax":"","fileType":"","highlights":[{"line":1}]}}}