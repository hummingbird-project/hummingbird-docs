{"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Called to request that the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" connect to a given "},{"type":"codeVoice","code":"SocketAddress"},{"type":"text","text":"."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier","text":"ChannelHandlerContext"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":" "},{"kind":"internalParam","text":"address"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","kind":"typeIdentifier","text":"SocketAddress"},{"kind":"text","text":", "},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">?)"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"ChannelHandlerContext","type":"codeVoice"},{"text":" which this ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" belongs to.","type":"text"}],"type":"paragraph"}],"name":"context"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SocketAddress"},{"type":"text","text":" to which the the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" should connect."}],"type":"paragraph"}],"name":"to"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" which should be notified once the operation completes, or nil if no notification should take place."}]}],"name":"promise"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This should call "},{"type":"codeVoice","code":"context.connect"},{"type":"text","text":" to forward the operation to the next "},{"type":"codeVoice","code":"_ChannelOutboundHandler"},{"type":"text","text":" in the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"text","text":"complete the "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" to let the caller know that the operation completed."}]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler"]]},"variants":[{"paths":["\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/connect(context:to:promise:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/connect(context:to:promise:)"},"sections":[],"metadata":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"modules":[{"name":"HummingbirdCore","relatedModules":["NIOCore"]}],"extendedModule":"NIOCore","title":"connect(context:to:promise:)","externalID":"s:7NIOCore23_ChannelOutboundHandlerPAAE7connect7context2to7promiseyAA0bD7ContextC_AA13SocketAddressOAA16EventLoopPromiseVyytGSgtF::SYNTHESIZED::s:15HummingbirdCore34AvailableConnectionsChannelHandlerC","roleHeading":"Instance Method","symbolKind":"method"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/connect(context:to:promise:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/connect(context:to:promise:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"abstract":[{"text":"Called to request that the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" connect to a given ","type":"text"},{"type":"codeVoice","code":"SocketAddress"},{"text":".","type":"text"}],"title":"connect(context:to:promise:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/connect(context:to:promise:)","type":"topic"},"logo.png":{"identifier":"logo.png","alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"kind":"symbol","title":"AvailableConnectionsChannelHandler","abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore"}}}