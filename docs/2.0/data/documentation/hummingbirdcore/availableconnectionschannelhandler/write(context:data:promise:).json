{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler"]]},"metadata":{"symbolKind":"method","externalID":"s:7NIOCore23_ChannelOutboundHandlerPAAE5write7context4data7promiseyAA0bD7ContextC_AA6NIOAnyVAA16EventLoopPromiseVyytGSgtF::SYNTHESIZED::s:15HummingbirdCore34AvailableConnectionsChannelHandlerC","extendedModule":"NIOCore","role":"symbol","roleHeading":"Instance Method","title":"write(context:data:promise:)","modules":[{"name":"HummingbirdCore","relatedModules":["NIOCore"]}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"write","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopPromise","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">?)","kind":"text"}]},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"write","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"context","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"ChannelHandlerContext","type":"codeVoice"},{"type":"text","text":" which this "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" belongs to."}]}]},{"name":"data","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The data to write through the "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":", wrapped in a "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}]}]},{"name":"promise","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" which should be notified once the operation completes, or nil if no notification should take place."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This should call ","type":"text"},{"code":"context.write","type":"codeVoice"},{"text":" to forward the operation to the next ","type":"text"},{"code":"_ChannelOutboundHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" or","type":"text"},{"text":" ","type":"text"},{"text":"complete the ","type":"text"},{"code":"EventLoopPromise","type":"codeVoice"},{"text":" to let the caller know that the operation completed.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/write(context:data:promise:)"},"variants":[{"paths":["\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/write(context:data:promise:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Called to request a write operation. The write operation will write the messages through the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Those are then ready to be flushed to the actual "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel.flush"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ChannelHandlerContext.flush"},{"type":"text","text":" is called."}],"references":{"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/write(context:data:promise:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"write","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"data","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"promise","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">?)","kind":"text"}],"abstract":[{"type":"text","text":"Called to request a write operation. The write operation will write the messages through the"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":". Those are then ready to be flushed to the actual "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" when"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel.flush"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ChannelHandlerContext.flush"},{"type":"text","text":" is called."}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/write(context:data:promise:)","type":"topic","title":"write(context:data:promise:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/write(context:data:promise:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"type":"topic","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"title":"HummingbirdCore","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"role":"symbol","type":"topic","title":"AvailableConnectionsChannelHandler","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","navigatorTitle":[{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}]}}}