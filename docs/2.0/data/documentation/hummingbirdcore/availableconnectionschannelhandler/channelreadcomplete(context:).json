{"abstract":[{"type":"text","text":"Called when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has completed its current read loop, either because no more data is available to read from the transport at this time, or because the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" needs to yield to the event loop to process other I\/O events for other "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"ChannelOptions.autoRead"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":" no further read attempt will be made until "},{"type":"codeVoice","code":"ChannelHandlerContext.read"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Channel.read"},{"type":"text","text":" is explicitly called."}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/channelReadComplete(context:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","extendedModule":"NIOCore","symbolKind":"method","modules":[{"relatedModules":["NIOCore"],"name":"HummingbirdCore"}],"roleHeading":"Instance Method","externalID":"s:7NIOCore22_ChannelInboundHandlerPAAE19channelReadComplete7contextyAA0bD7ContextC_tF::SYNTHESIZED::s:15HummingbirdCore34AvailableConnectionsChannelHandlerC","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelReadComplete","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","text":"ChannelHandlerContext","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"channelReadComplete(context:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelReadComplete","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ChannelHandlerContext"},{"type":"text","text":" which this "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" belongs to."}],"type":"paragraph"}],"name":"context"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This should call ","type":"text"},{"code":"context.fireChannelReadComplete","type":"codeVoice"},{"text":" to forward the operation to the next ","type":"text"},{"code":"_ChannelInboundHandler","type":"codeVoice"},{"text":" in the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" if you want to allow the next handler to also handle the event.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/channelreadcomplete(context:)"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler"]]},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/channelReadComplete(context:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelReadComplete","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ChannelHandlerContext","preciseIdentifier":"s:7NIOCore21ChannelHandlerContextC","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/channelReadComplete(context:)","abstract":[{"type":"text","text":"Called when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has completed its current read loop, either because no more data is available to read from the transport at this time, or because the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" needs to yield to the event loop to process other I\/O events for other "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"ChannelOptions.autoRead"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"},{"type":"text","text":" no further read attempt will be made until "},{"type":"codeVoice","code":"ChannelHandlerContext.read"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Channel.read"},{"type":"text","text":" is explicitly called."}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/channelreadcomplete(context:)","title":"channelReadComplete(context:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"abstract":[{"text":"Channel Handler that controls whether we should accept new connections","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"title":"AvailableConnectionsChannelHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","role":"symbol"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","type":"topic","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"kind":"symbol","title":"HummingbirdCore"}}}