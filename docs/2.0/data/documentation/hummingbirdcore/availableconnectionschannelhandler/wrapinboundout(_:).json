{"abstract":[{"text":"Inherited from ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler.wrapInboundOut(_:)"},{"text":".","type":"text"}],"metadata":{"externalID":"s:7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF::SYNTHESIZED::s:15HummingbirdCore34AvailableConnectionsChannelHandlerC","title":"wrapInboundOut(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"wrapInboundOut","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7NIOCore21ChannelInboundHandlerP0C3OutQa","text":"InboundOut","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier"}],"role":"symbol","symbolKind":"method","roleHeading":"Instance Method","extendedModule":"NIOCore","modules":[{"relatedModules":["NIOCore"],"name":"HummingbirdCore"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrapInboundOut"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"value","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"InboundOut","preciseIdentifier":"s:7NIOCore21ChannelInboundHandlerP0C3OutQa"},{"kind":"text","text":") -> "},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"}]}]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/wrapInboundOut(_:)","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/ChannelInboundHandler-Implementations"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/wrapinboundout(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"title":"HummingbirdCore","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdcore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"title":"AvailableConnectionsChannelHandler","role":"symbol","abstract":[{"text":"Channel Handler that controls whether we should accept new connections","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsChannelHandler"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/ChannelInboundHandler-Implementations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/ChannelInboundHandler-Implementations","title":"ChannelInboundHandler Implementations","abstract":[],"role":"collectionGroup","type":"topic","kind":"article","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/channelinboundhandler-implementations"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","role":"collection","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/index","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler/wrapInboundOut(_:)":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler\/wrapInboundOut(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21ChannelInboundHandlerP0C3OutQa"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier","text":"NIOAny"}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler\/wrapinboundout(_:)","type":"topic","kind":"symbol","title":"wrapInboundOut(_:)"}}}