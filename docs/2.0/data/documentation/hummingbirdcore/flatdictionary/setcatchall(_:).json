{"abstract":[{"type":"text","text":"Set path components caught by recursive capture"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setCatchAll","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"value","content":[{"type":"paragraph","inlineContent":[{"text":"Parameter value","type":"text"}]}]}]}],"kind":"symbol","metadata":{"role":"symbol","extendedModule":"HummingbirdCore","modules":[{"name":"HummingbirdCore"}],"roleHeading":"Instance Method","symbolKind":"method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Substring","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setCatchAll","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Substring","preciseIdentifier":"s:Ss","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"setCatchAll(_:)","externalID":"s:15HummingbirdCore14FlatDictionaryV0A0SsRszSsRs_rlE11setCatchAllyySsF"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore\/flatdictionary\/setcatchall(_:)"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary\/setCatchAll(_:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"role":"collection"},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"url":"\/documentation\/hummingbirdcore\/flatdictionary","role":"symbol","kind":"symbol","title":"FlatDictionary","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary/setCatchAll(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary\/setCatchAll(_:)","role":"symbol","url":"\/documentation\/hummingbirdcore\/flatdictionary\/setcatchall(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setCatchAll","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Key"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}]},"kind":"symbol","abstract":[{"type":"text","text":"Set path components caught by recursive capture"}],"title":"setCatchAll(_:)"}}}