{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setCatchAll","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Ss","text":"Substring","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Parameter value","type":"text"}]}],"name":"value"}]}],"sections":[],"metadata":{"symbolKind":"method","externalID":"s:15HummingbirdCore14FlatDictionaryV0A0SsRszSsRs_rlE11setCatchAllyySsF","conformance":{"constraints":[{"type":"codeVoice","code":"Key"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"roleHeading":"Instance Method","modules":[{"name":"HummingbirdCore"}],"extendedModule":"HummingbirdCore","title":"setCatchAll(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setCatchAll"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"kind":"text","text":")"}],"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary\/setCatchAll(_:)"},"abstract":[{"type":"text","text":"Set path components caught by recursive capture"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore\/flatdictionary\/setcatchall(_:)"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary/setCatchAll(_:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary\/setCatchAll(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"setCatchAll","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Key"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"Set path components caught by recursive capture"}],"title":"setCatchAll(_:)","type":"topic","url":"\/documentation\/hummingbirdcore\/flatdictionary\/setcatchall(_:)"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","url":"\/documentation\/hummingbirdcore","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","type":"topic","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"kind":"symbol","title":"HummingbirdCore"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"title":"FlatDictionary","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/flatdictionary","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","role":"symbol"}}}