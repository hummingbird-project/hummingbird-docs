{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"role":"article","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Setup","anchor":"Setup","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}],"type":"paragraph"},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference"},{"text":" serivce group using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"reference"},{"text":" or added to an external managed ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["var app = Application(router: myRouter)","app.addServices(persist)"],"type":"codeListing","syntax":"swift"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"code":"create","type":"codeVoice"}],"type":"paragraph"},{"code":["try await persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"type":"codeVoice","code":"PersistError.duplicate"},{"type":"text","text":" error will be thrown."}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"code":["try await persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Both ","type":"text"},{"type":"codeVoice","code":"create"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"set"},{"text":" have an ","type":"text"},{"type":"codeVoice","code":"expires"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This returns the value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist."},{"type":"text","text":" "},{"type":"text","text":"If the value is not of the expected type, this will throw "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing","syntax":"swift"},{"text":"Drivers","anchor":"Drivers","type":"heading","level":2},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" comes with a memory based driver ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","type":"reference","isActive":true},{"text":" which will store these values in the memory of your server.","type":"text"}],"type":"paragraph"},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"text":"Valkey\/Redis","anchor":"ValkeyRedis","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You can use Valkey\/Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","isActive":true},{"type":"text","text":" from the "},{"type":"codeVoice","code":"HummingbirdValkey"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Valkey as follows."}],"type":"paragraph"},{"code":["let valkeyClient = ValkeyClient(","    .hostname(valkeyHostname, port: 6379), ","    logger: Logger(label: \"Valkey\")",")","let persist = ValkeyPersistDriver(client: valkeyClient)"],"type":"codeListing","syntax":"swift"},{"text":"Fluent","anchor":"Fluent","type":"heading","level":3},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","isActive":true,"type":"reference"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after creating the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","isActive":true,"type":"reference"},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"title":"FluentPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"kind":"symbol","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/routerguide","kind":"article","title":"Router","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}],"navigatorTitle":[{"text":"PostgresPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver","abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"article","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","kind":"article","title":"Hummingbird Documentation","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"type":"topic","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/requestdecoding","kind":"article","title":"Request Decoding","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/routerbuilderguide","kind":"article","title":"Result Builder Router","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","type":"topic","role":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","title":"Logging, Metrics and Tracing","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","role":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Service Lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/serverprotocol","kind":"article","title":"Server protocol","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","type":"topic","title":"invalidConversion","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"invalidConversion"},{"kind":"text","text":": `Self`"}],"kind":"symbol","abstract":[{"text":"Failed to convert a persist value to the requested type","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","url":"\/documentation\/hummingbird\/responseencoding","type":"topic","role":"article","abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Response Encoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","url":"\/documentation\/hummingbird\/memorypersistdriver","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"role":"symbol","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"kind":"symbol","title":"MemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"role":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"kind":"symbol","title":"Application"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","abstract":[{"type":"text","text":"Integration with Vaporâ€™s Fluent ORM framework."}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdfluent","kind":"symbol","title":"HummingbirdFluent","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","title":"Request Contexts","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","url":"\/documentation\/hummingbird\/persistdriver","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"kind":"symbol","title":"PersistDriver"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey/ValkeyPersistDriver":{"title":"ValkeyPersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValkeyPersistDriver"}],"kind":"symbol","abstract":[{"text":"Valkey\/Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValkeyPersistDriver"}],"url":"\/documentation\/hummingbirdvalkey\/valkeypersistdriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/application\/addservices(_:)","title":"addServices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"role":"symbol"}}}