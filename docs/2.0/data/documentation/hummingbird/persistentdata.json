{"sections":[],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Persistent data","role":"article"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"],"anchor":"Related-Documentation"},{"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"text":"Setup","anchor":"Setup","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":" serivce group using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"type":"text","text":" or added to an external managed "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}]},{"code":["var app = Application(router: myRouter)","app.addServices(persist)"],"type":"codeListing","syntax":"swift"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"code":"create","type":"codeVoice"}]},{"code":["try await persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"code":"PersistError.duplicate","type":"codeVoice"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"code":["try await persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" key\/value store you use"}]},{"code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This returns the value associated with the key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist.","type":"text"},{"text":" ","type":"text"},{"text":"If the value is not of the expected type, this will throw ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}]},{"code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing","syntax":"swift"},{"text":"Drivers","anchor":"Drivers","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","type":"reference","isActive":true},{"type":"text","text":" which will store these values in the memory of your server."}]},{"code":["let persist = MemoryPersistDriver()"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes."}]},{"text":"Valkey\/Redis","anchor":"ValkeyRedis","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use Valkey\/Redis to store the ","type":"text"},{"type":"codeVoice","code":"persists"},{"text":" key\/value pairs with ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","type":"reference","isActive":true},{"text":" from the ","type":"text"},{"type":"codeVoice","code":"HummingbirdValkey"},{"text":" library. You would setup ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" to use Valkey as follows.","type":"text"}]},{"code":["let valkeyClient = ValkeyClient(","    .hostname(valkeyHostname, port: 6379), ","    logger: Logger(label: \"Valkey\")",")","let persist = ValkeyPersistDriver(client: valkeyClient)"],"type":"codeListing","syntax":"swift"},{"text":"Fluent","anchor":"Fluent","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent"},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after creating the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver"},{"type":"text","text":" call has been made."}]},{"code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"url":"\/documentation\/hummingbird\/application","title":"Application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","role":"article","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"title":"PersistDriver","url":"\/documentation\/hummingbird\/persistdriver","navigatorTitle":[{"kind":"identifier","text":"PersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistDriver"}],"type":"topic","role":"symbol","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"url":"\/documentation\/hummingbird\/responseencoding","title":"Response Encoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"article","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"title":"addServices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","url":"\/documentation\/hummingbird\/application\/addservices(_:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","abstract":[{"text":"How to build errors for the server to return.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"type":"topic","role":"article","title":"Request Decoding","url":"\/documentation\/hummingbird\/requestdecoding","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","images":[{"type":"icon","identifier":"logo.png"}]},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"title":"FluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"type":"topic","role":"symbol","abstract":[{"text":"Fluent driver for persist system for storing persistent cross request key\/value pairs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver","navigatorTitle":[{"text":"PostgresPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"Postgres driver for persist system for storing persistent cross request key\/value pairs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","role":"article","title":"Result Builder Router","url":"\/documentation\/hummingbird\/routerbuilderguide","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"url":"\/documentation\/hummingbird\/memorypersistdriver","title":"MemoryPersistDriver","navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","kind":"symbol","fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"type":"topic","role":"symbol","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"abstract":[{"type":"text","text":"Failed to convert a persist value to the requested type"}],"title":"invalidConversion","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"invalidConversion","kind":"identifier"},{"text":": `Self`","kind":"text"}],"url":"\/documentation\/hummingbird\/persisterror\/invalidconversion"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey/ValkeyPersistDriver":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ValkeyPersistDriver"}],"title":"ValkeyPersistDriver","url":"\/documentation\/hummingbirdvalkey\/valkeypersistdriver","abstract":[{"type":"text","text":"Valkey\/Redis driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValkeyPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"article","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","role":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Hummingbird Documentation","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","kind":"symbol","abstract":[{"type":"text","text":"Integration with Vaporâ€™s Fluent ORM framework."}],"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Server protocol","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"role":"collectionGroup","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"article","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}]}}}