{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"],"anchor":"Related-Documentation"},{"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"type":"codeListing","syntax":"swift","code":["let persist = MemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist drivers conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" from Swift Service Lifecycle and should either to added to the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"type":"text","text":" serivce group using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"reference","isActive":true},{"type":"text","text":" or added to an external managed "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["var app = Application(router: myRouter)","app.addServices(persist)"]},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"code":"create","type":"codeVoice"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"type":"codeVoice","code":"PersistError.duplicate"},{"type":"text","text":" error will be thrown."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.set(key: \"mykey\", value: MyValue)"]},{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"type":"paragraph","inlineContent":[{"text":"To access values in the ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" key\/value store you use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"]},{"type":"paragraph","inlineContent":[{"text":"This returns the value associated with the key or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if that value doesnâ€™t exist.","type":"text"},{"text":" ","type":"text"},{"text":"If the value is not of the expected type, this will throw ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["try await persist.remove(key: \"mykey\")"]},{"type":"heading","level":2,"text":"Drivers","anchor":"Drivers"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","isActive":true,"type":"reference"},{"text":" which will store these values in the memory of your server.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let persist = MemoryPersistDriver()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes."}]},{"type":"heading","level":3,"text":"Redis","anchor":"Redis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use Redis to store the "},{"type":"codeVoice","code":"persists"},{"type":"text","text":" key\/value pairs with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" library. You would setup "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" to use Redis as follows."}]},{"type":"codeListing","syntax":"swift","code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"]},{"type":"heading","level":3,"text":"Fluent","anchor":"Fluent"},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference"},{"text":" also contains a ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"type":"codeVoice","code":"fluent.migrate()"},{"text":" after creating the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"reference"},{"text":" call has been made.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}]}],"metadata":{"title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"role":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","type":"topic","kind":"article","title":"Result Builder Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","type":"topic","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"kind":"article","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"url":"\/documentation\/hummingbird\/requestdecoding","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Decoding","abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/persistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"title":"PersistDriver","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"navigatorTitle":[{"text":"MemoryPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","url":"\/documentation\/hummingbird\/memorypersistdriver","role":"symbol","abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"type":"topic","title":"MemoryPersistDriver","kind":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemoryPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"article","url":"\/documentation\/hummingbird\/requestcontexts","type":"topic","kind":"article","title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","abstract":[{"text":"Integration with Vaporâ€™s Fluent ORM framework.","type":"text"}],"type":"topic","kind":"symbol","title":"HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"title":"Server protocol","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/serverprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","images":[{"identifier":"logo.png","type":"icon"}],"role":"collectionGroup"},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"title":"addServices(_:)","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/application\/addservices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"role":"symbol","url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","kind":"symbol","title":"invalidConversion","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"invalidConversion"},{"kind":"text","text":": `Self`"}],"abstract":[{"type":"text","text":"Failed to convert a persist value to the requested type"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","role":"symbol","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"type":"topic","title":"Application","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","title":"FluentPersistDriver","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Service Lifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}],"abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","title":"PostgresPersistDriver","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresPersistDriver"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"role":"article","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","kind":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","url":"\/documentation\/hummingbirdredis\/redispersistdriver","role":"symbol","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"type":"topic","kind":"symbol","title":"RedisPersistDriver","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","kind":"article","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"role":"article","url":"\/documentation\/hummingbird\/responseencoding","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","kind":"article","title":"Response Encoding","abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Middleware","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"kind":"article"}}}