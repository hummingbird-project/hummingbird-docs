{"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you are looking to store data between requests then the Hummingbird "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Setup","anchor":"Setup","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}],"type":"paragraph"},{"syntax":"swift","code":["let persist = MemoryPersistDriver()"],"type":"codeListing"},{"inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"text":" serivce group using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true,"type":"reference"},{"text":" or added to an external managed ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: myRouter)","app.addServices(persist)"],"type":"codeListing"},{"text":"Usage","anchor":"Usage","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"syntax":"swift","code":["try await persist.create(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"code":"PersistError.duplicate","type":"codeVoice"},{"text":" error will be thrown.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are not concerned about overwriting a previous key\/value pair you can use"}],"type":"paragraph"},{"syntax":"swift","code":["try await persist.set(key: \"mykey\", value: MyValue)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Both "},{"code":"create","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" have an "},{"code":"expires","type":"codeVoice"},{"type":"text","text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg"}],"type":"paragraph"},{"syntax":"swift","code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"syntax":"swift","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This returns the value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist."},{"type":"text","text":" "},{"type":"text","text":"If the value is not of the expected type, this will throw "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try await persist.remove(key: \"mykey\")"],"type":"codeListing"},{"text":"Drivers","anchor":"Drivers","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" comes with a memory based driver "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","isActive":true},{"type":"text","text":" which will store these values in the memory of your server."}],"type":"paragraph"},{"syntax":"swift","code":["let persist = MemoryPersistDriver()"],"type":"codeListing"},{"inlineContent":[{"text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes.","type":"text"}],"type":"paragraph"},{"text":"Valkey\/Redis","anchor":"ValkeyRedis","type":"heading","level":3},{"inlineContent":[{"text":"You can use Valkey\/Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","type":"reference"},{"text":" from the ","type":"text"},{"code":"HummingbirdValkey","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" to use Valkey as follows.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let valkeyClient = ValkeyClient(","    .hostname(valkeyHostname, port: 6379), ","    logger: Logger(label: \"Valkey\")",")","let persist = ValkeyPersistDriver(client: valkeyClient)"],"type":"codeListing"},{"text":"Fluent","anchor":"Fluent","type":"heading","level":3},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference","isActive":true},{"type":"text","text":" also contains a "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call "},{"type":"codeVoice","code":"fluent.migrate()"},{"type":"text","text":" after creating the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"reference","isActive":true},{"type":"text","text":" call has been made."}],"type":"paragraph"},{"syntax":"swift","code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"type":"codeListing"}],"kind":"content"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"sections":[],"metadata":{"roleHeading":"Article","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"role":"article"},"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"],"anchor":"Related-Documentation","title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"type":"topic","url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"invalidConversion","kind":"identifier"},{"text":": `Self`","kind":"text"}],"title":"invalidConversion","role":"symbol","abstract":[{"type":"text","text":"Failed to convert a persist value to the requested type"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey/ValkeyPersistDriver":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdvalkey\/valkeypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey\/ValkeyPersistDriver","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValkeyPersistDriver"}],"abstract":[{"type":"text","text":"Valkey\/Redis driver for persist system for storing persistent cross request key\/value pairs"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValkeyPersistDriver"}],"title":"ValkeyPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide","role":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"article","kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"article","type":"topic","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","title":"addServices(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"text":"(","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Service","kind":"typeIdentifier","preciseIdentifier":"s:16ServiceLifecycle0A0P"},{"text":"...)","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/addservices(_:)","kind":"symbol","type":"topic","abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"role":"symbol","abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}]},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbird\/memorypersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MemoryPersistDriver"}],"abstract":[{"type":"text","text":"In memory driver for persist system for storing persistent cross request key\/value pairs"}],"fragments":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemoryPersistDriver"}],"title":"MemoryPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"title":"FluentPersistDriver","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","navigatorTitle":[{"text":"FluentPersistDriver","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FluentPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","role":"article","type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"title":"Testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","type":"topic","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Decoding","url":"\/documentation\/hummingbird\/requestdecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/responseencoding","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"title":"Response Encoding","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","type":"topic","url":"\/documentation\/hummingbirdfluent","abstract":[{"type":"text","text":"Integration with Vaporâ€™s Fluent ORM framework."}],"kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"kind":"symbol","role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","navigatorTitle":[{"kind":"identifier","text":"Application"}],"type":"topic","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"title":"Service Lifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"article","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"title":"Server protocol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"title":"PersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","type":"topic","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/persistdriver","abstract":[{"type":"text","text":"Protocol for driver supporting persistent Key\/Value pairs across requests"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"title":"Result Builder Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","role":"article","type":"topic","title":"Request Contexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","images":[{"identifier":"logo.png","type":"icon"}]}}}