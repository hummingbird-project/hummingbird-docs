{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"metadata":{"roleHeading":"Article","role":"article","title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"],"anchor":"Related-Documentation","title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Setup","type":"heading","anchor":"Setup"},{"inlineContent":[{"text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let persist = MemoryPersistDriver()"]},{"inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"text":" serivce group using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true,"type":"reference"},{"text":" or added to an external managed ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: myRouter)","app.addServices(persist)"]},{"level":2,"text":"Usage","type":"heading","anchor":"Usage"},{"inlineContent":[{"type":"text","text":"To create a new entry you can call "},{"type":"codeVoice","code":"create"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try await persist.create(key: \"mykey\", value: MyValue)"]},{"inlineContent":[{"type":"text","text":"If there is an entry for the key already then a "},{"code":"PersistError.duplicate","type":"codeVoice"},{"type":"text","text":" error will be thrown."}],"type":"paragraph"},{"inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try await persist.set(key: \"mykey\", value: MyValue)"]},{"inlineContent":[{"text":"Both ","type":"text"},{"type":"codeVoice","code":"create"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"set"},{"text":" have an ","type":"text"},{"type":"codeVoice","code":"expires"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"]},{"inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"]},{"inlineContent":[{"type":"text","text":"This returns the value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist."},{"type":"text","text":" "},{"type":"text","text":"If the value is not of the expected type, this will throw "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And finally if you want to delete a key you can use"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["try await persist.remove(key: \"mykey\")"]},{"level":2,"text":"Drivers","type":"heading","anchor":"Drivers"},{"inlineContent":[{"type":"text","text":"The "},{"code":"persist","type":"codeVoice"},{"type":"text","text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" comes with a memory based driver "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","isActive":true},{"type":"text","text":" which will store these values in the memory of your server."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let persist = MemoryPersistDriver()"]},{"inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes."}],"type":"paragraph"},{"level":3,"text":"Redis","type":"heading","anchor":"Redis"},{"inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"type":"codeVoice","code":"persists"},{"text":" key\/value pairs with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"},{"text":" from the ","type":"text"},{"type":"codeVoice","code":"HummingbirdRedis"},{"text":" library. You would setup ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" to use Redis as follows.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"]},{"level":3,"text":"Fluent","type":"heading","anchor":"Fluent"},{"inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference","isActive":true},{"text":" also contains a ","type":"text"},{"type":"codeVoice","code":"persist"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"type":"codeVoice","code":"fluent.migrate()"},{"text":" after creating the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"reference","isActive":true},{"text":" call has been made.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","interfaceLanguage":"swift"},"kind":"article","references":{"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"role":"symbol","kind":"symbol","title":"addServices(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/addservices(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"type":"topic","title":"Request Decoding","url":"\/documentation\/hummingbird\/requestdecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/testing","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Testing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"article","url":"\/documentation\/hummingbird\/middlewareguide","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Middleware","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"title":"Hummingbird Documentation","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"navigatorTitle":[{"text":"Application","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"topic","url":"\/documentation\/hummingbird\/application","role":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"kind":"symbol","title":"Application"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdfluent","role":"collection","abstract":[{"text":"Integration with Vaporâ€™s Fluent ORM framework.","type":"text"}],"kind":"symbol","title":"HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"role":"article","url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","title":"Router","url":"\/documentation\/hummingbird\/routerguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","title":"Result Builder Router","url":"\/documentation\/hummingbird\/routerbuilderguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","abstract":[{"text":"Building your router using a result builder.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"kind":"symbol","type":"topic","title":"MemoryPersistDriver","abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"url":"\/documentation\/hummingbird\/memorypersistdriver","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemoryPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","navigatorTitle":[{"text":"MemoryPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"role":"article","url":"\/documentation\/hummingbird\/responseencoding","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Response Encoding","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"text":"PostgresPersistDriver","kind":"identifier"}],"title":"PostgresPersistDriver","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresPersistDriver","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FluentPersistDriver","kind":"identifier"}],"abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","navigatorTitle":[{"text":"FluentPersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","title":"FluentPersistDriver","kind":"symbol","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"type":"topic","title":"invalidConversion","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"invalidConversion"},{"kind":"text","text":": `Self`"}],"url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","kind":"symbol","role":"symbol","abstract":[{"text":"Failed to convert a persist value to the requested type","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"kind":"article","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"PersistDriver","kind":"identifier"}],"url":"\/documentation\/hummingbird\/persistdriver","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistDriver","kind":"identifier"}],"title":"PersistDriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","type":"topic","url":"\/documentation\/hummingbirdredis\/redispersistdriver","role":"symbol","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisPersistDriver"}],"kind":"symbol","title":"RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"role":"collectionGroup","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","title":"Server protocol","type":"topic"}}}