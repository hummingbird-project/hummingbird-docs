{"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver"]},{"anchor":"Hummingbird-Server","title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true}],"sections":[],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"article","roleHeading":"Article","title":"Persistent data"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"If you are looking to store data between requests then the Hummingbird ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework provides a key\/value store. Each key is a string and the value can be any object that conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"Setup","anchor":"Setup","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"At setup you need to choose your persist driver. Below we are using the in memory storage driver."}]},{"type":"codeListing","code":["let persist = MemoryPersistDriver()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The persist drivers conform to ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" from Swift Service Lifecycle and should either to added to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"text":" serivce group using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"text":" or added to an external managed ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["var app = Application(router: myRouter)","app.addServices(persist)"],"syntax":"swift"},{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"text":"To create a new entry you can call ","type":"text"},{"code":"create","type":"codeVoice"}]},{"type":"codeListing","code":["try await persist.create(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If there is an entry for the key already then a ","type":"text"},{"code":"PersistError.duplicate","type":"codeVoice"},{"text":" error will be thrown.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are not concerned about overwriting a previous key\/value pair you can use","type":"text"}]},{"type":"codeListing","code":["try await persist.set(key: \"mykey\", value: MyValue)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"code":"create","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" have an ","type":"text"},{"code":"expires","type":"codeVoice"},{"text":" parameter. With this parameter you can make a key\/value pair expire after a certain time period. eg","type":"text"}]},{"type":"codeListing","code":["try await persist.set(key: \"sessionID\", value: MyValue, expires: .hours(1))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To access values in the "},{"type":"codeVoice","code":"persist"},{"type":"text","text":" key\/value store you use"}]},{"type":"codeListing","code":["let value = try await persist.get(key: \"mykey\", as: MyValueType.self)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This returns the value associated with the key or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if that value doesnâ€™t exist."},{"type":"text","text":" "},{"type":"text","text":"If the value is not of the expected type, this will throw "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"And finally if you want to delete a key you can use","type":"text"}]},{"type":"codeListing","code":["try await persist.remove(key: \"mykey\")"],"syntax":"swift"},{"type":"heading","text":"Drivers","anchor":"Drivers","level":2},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" framework defines an API for storing key\/value pairs. You also need a driver for the framework. ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" comes with a memory based driver ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","isActive":true,"type":"reference"},{"text":" which will store these values in the memory of your server.","type":"text"}]},{"type":"codeListing","code":["let persist = MemoryPersistDriver()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use the memory based driver the key\/value pairs you store will be lost if your server goes down, also you will not be able to share values between server processes."}]},{"type":"heading","text":"Redis","anchor":"Redis","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use Redis to store the ","type":"text"},{"code":"persists","type":"codeVoice"},{"text":" key\/value pairs with ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","isActive":true,"type":"reference"},{"text":" from the ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"text":" library. You would setup ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" to use Redis as follows.","type":"text"}]},{"type":"codeListing","code":["let redis = RedisConnectionPoolService(","    .init(hostname: redisHostname, port: 6379), ","    logger: Logger(label: \"Redis\")",")","let persist = RedisPersistDriver(redisConnectionPoolService: redis)"],"syntax":"swift"},{"type":"heading","text":"Fluent","anchor":"Fluent","level":3},{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"reference"},{"text":" also contains a ","type":"text"},{"code":"persist","type":"codeVoice"},{"text":" driver for the storing the key\/value pairs in a database. To setup the Fluent driver you need to have setup Fluent first. The first time you run with the fluent driver you should ensure you call ","type":"text"},{"code":"fluent.migrate()","type":"codeVoice"},{"text":" after creating the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","type":"reference"},{"text":" call has been made.","type":"text"}]},{"type":"codeListing","code":["let fluent = Fluent(logger: Logger(label: \"Fluent\"))","fluent.databases.use(...)","let persist = await FluentPersistDriver(fluent: fluent)","\/\/ run migrations","if shouldMigrate {","    try await fluent.migrate()","}"],"syntax":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistDriver":{"title":"PersistDriver","abstract":[{"text":"Protocol for driver supporting persistent Key\/Value pairs across requests","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistDriver","navigatorTitle":[{"kind":"identifier","text":"PersistDriver"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistDriver"}],"type":"topic","url":"\/documentation\/hummingbird\/persistdriver"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"type":"topic","url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","kind":"symbol","title":"PostgresPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/index","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"role":"symbol","type":"topic","title":"Application","url":"\/documentation\/hummingbird\/application","navigatorTitle":[{"kind":"identifier","text":"Application"}],"abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","title":"Middleware","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"type":"topic","abstract":[{"text":"Redis driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisPersistDriver"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisPersistDriver"}],"kind":"symbol","url":"\/documentation\/hummingbirdredis\/redispersistdriver","title":"RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MemoryPersistDriver":{"type":"topic","url":"\/documentation\/hummingbird\/memorypersistdriver","kind":"symbol","title":"MemoryPersistDriver","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemoryPersistDriver","kind":"identifier"}],"abstract":[{"text":"In memory driver for persist system for storing persistent cross request key\/value pairs","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MemoryPersistDriver","navigatorTitle":[{"text":"MemoryPersistDriver","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"kind":"symbol","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","navigatorTitle":[{"text":"FluentPersistDriver","kind":"identifier"}],"title":"FluentPersistDriver","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FluentPersistDriver","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","url":"\/documentation\/hummingbird\/responseencoding","images":[{"identifier":"logo.png","type":"icon"}],"title":"Response Encoding","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistError/invalidConversion":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistError\/invalidConversion","title":"invalidConversion","abstract":[{"type":"text","text":"Failed to convert a persist value to the requested type"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"invalidConversion","kind":"identifier"},{"text":": `Self`","kind":"text"}],"url":"\/documentation\/hummingbird\/persisterror\/invalidconversion","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"title":"Request Decoding","abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/requestdecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","title":"Server protocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/routerbuilderguide","kind":"article","title":"Result Builder Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"role":"article"},"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"title":"Service Lifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/testing","kind":"article","title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"abstract":[{"type":"text","text":"Integration with Vaporâ€™s Fluent ORM framework."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","url":"\/documentation\/hummingbirdfluent","title":"HummingbirdFluent"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"url":"\/documentation\/hummingbird\/application\/addservices(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"addServices"},{"kind":"text","text":"("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"text":"Service","preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","title":"addServices(_:)","type":"topic","abstract":[{"type":"text","text":"Add service to be managed by application ServiceGroup"}],"role":"symbol","kind":"symbol"}}}