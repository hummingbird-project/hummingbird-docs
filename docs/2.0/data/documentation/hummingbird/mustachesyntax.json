{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"title":"Mustache","generated":true,"anchor":"Mustache","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating engine. The core language has no flow control statements. Instead it has tags that can be replaced with a value, nothing, or a series of values. This article documents the standard mustache tags."}],"type":"paragraph"},{"text":"Context","anchor":"Context","type":"heading","level":3},{"inlineContent":[{"text":"Mustache renders a template with a context stack. A context is a list of key\/value pairs. These can be represented by either a ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" or the reflection information that ","type":"text"},{"code":"Mirror","type":"codeVoice"},{"text":" provides. For example, the following two objects render in the same way","type":"text"}],"type":"paragraph"},{"code":["let object = [\"name\": \"John Smith\", \"age\": 68]"],"type":"codeListing","syntax":"swift"},{"code":["struct Person {","    let name: String","    let age: Int","}","let object = Person(name: \"John Smith\", age: 68)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Initially the stack consists of the root context object to render. When the template enters a section tag, mustache pushes the associated value onto the context stack. When the template leaves the section, it pops that value back off the stack."}],"type":"paragraph"},{"text":"Tags","anchor":"Tags","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Surround all tags with a double curly bracket "},{"type":"codeVoice","code":"{{}}"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When a tag has a reference to a key, mustache searches for the key from the context at the top of the context stack to return the associated value."},{"type":"text","text":" "},{"type":"text","text":"If the key can’t be found in the current context, then mustache recursively searches the next context down until either a key is found or it reaches the bottom of the stack."},{"type":"text","text":" "},{"type":"text","text":"If no key is found the output is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", which renders as an empty string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use dot notation to reference the child of an associated value of a key, similar to Swift."},{"type":"text","text":" "},{"type":"text","text":"For example, in the tag "},{"type":"codeVoice","code":"{{main.sub}}"},{"type":"text","text":", mustache searches the first context for the key "},{"type":"codeVoice","code":"main"},{"type":"text","text":". If found, is uses that value for context and searches "},{"type":"codeVoice","code":"main"},{"type":"text","text":" for the key "},{"type":"codeVoice","code":"sub"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To constrain mustache to search for values in the context at the top of the stack, prefix the variable name with the period ("},{"type":"codeVoice","code":"."},{"type":"text","text":"), for example: "},{"type":"codeVoice","code":"{{.key}}"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"{{.}}"},{"text":" to reference only the top of the stack, which can be useful if you present a template with a list.","type":"text"}],"type":"paragraph"},{"text":"Tag types","anchor":"Tag-types","type":"heading","level":3},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{key}}"},{"type":"text","text":": Render the value associated with "},{"type":"codeVoice","code":"key"},{"type":"text","text":" as text. By default this is HTML escaped. Mustache renders a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value as an empty string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{{name}}}","type":"codeVoice"},{"text":": Acts the same as ","type":"text"},{"code":"{{name}}","type":"codeVoice"},{"text":", except the resulting text is not HTML escaped. You can also use ","type":"text"},{"code":"{{&name}}","type":"codeVoice"},{"text":" to avoid HTML escaping.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{#section}}","type":"codeVoice"},{"type":"text","text":": The "},{"code":"#","type":"codeVoice"},{"type":"text","text":" character represents a section block that either renders text once or multiple times depending on the value of the key in the current context. A section begins with "},{"code":"{{#section}}","type":"codeVoice"},{"type":"text","text":" and ends with "},{"code":"{{\/section}}","type":"codeVoice"},{"type":"text","text":". If the key represents a Boolean value, it only renders if true. If the key represents an "},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" it renders if the object is non-nil. If the key represents an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" it renders the internals of the section multiple times, once for each element of the "},{"code":"Array","type":"codeVoice"},{"type":"text","text":". Otherwise it renders with the selected value pushed onto the top of the context stack. See "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections","type":"reference","isActive":true},{"type":"text","text":" for more information."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{^section}}"},{"type":"text","text":": An inverted section ("},{"type":"codeVoice","code":"^"},{"type":"text","text":") does the opposite of a section. If the key represents a Boolean value, it renders if the value is false. If the key represents an "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" it renders if it is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If the key represents a "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" it renders if the "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" is empty."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{! comment }}"},{"text":": ","type":"text"},{"type":"codeVoice","code":"!"},{"text":" indicates a comment tag, which is ignored.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{>partial}}","type":"codeVoice"},{"text":": A partial tag (","type":"text"},{"code":">","type":"codeVoice"},{"text":") renders another mustache file, with the current context stack. In Swift Mustache, partial tags only work for templates that are a part of a library, and the tag represents the  name of the referenced template without the “.mustache” extension. See ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","isActive":true,"type":"reference"},{"text":" for more information.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{*>dynamic}}"},{"type":"text","text":": Is a partial that mustache loads dynamically."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{<parent}}"},{"type":"text","text":": A parent ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") is similar to a partial, but allows for the user to override sections of the included file. A parent tag is a section tag, and needs to end with a "},{"type":"codeVoice","code":"{{\/parent}}"},{"type":"text","text":" tag. See "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","type":"reference","isActive":true},{"type":"text","text":" for more information."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{$}}"},{"type":"text","text":": The "},{"type":"codeVoice","code":"$"},{"type":"text","text":" represents a block that is a section of a parent template to override. If this is found inside a parent section, then it is the text that mustache replaces from the overriden block."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{=<% %>=}}"},{"text":": The set delimiter (","type":"text"},{"type":"codeVoice","code":"="},{"text":") tag allows you to change from using the double curly brackets as tag delimiters. In the example the delimiters have been changed to ","type":"text"},{"type":"codeVoice","code":"<% %>"},{"text":", but you can change them to whatever you like.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You can find out more about the standard Mustache tags in the ","type":"text"},{"identifier":"https:\/\/mustache.github.io\/mustache.5.html","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"metadata":{"title":"Mustache Syntax","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Overview of Mustache Syntax","type":"text"}],"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Partial-templates":{"title":"Partial templates","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","abstract":[],"url":"\/documentation\/hummingbird\/mustachefeatures#Partial-templates","kind":"section"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures":{"abstract":[{"type":"text","text":"An overview of the features of swift-mustache."}],"title":"Mustache Features","url":"\/documentation\/hummingbird\/mustachefeatures","type":"topic","role":"article","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures"},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","kind":"article","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Template-inheritance-and-parents":{"title":"Template inheritance and parents","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","abstract":[],"url":"\/documentation\/hummingbird\/mustachefeatures#Template-inheritance-and-parents","kind":"section"},"https://mustache.github.io/mustache.5.html":{"identifier":"https:\/\/mustache.github.io\/mustache.5.html","url":"https:\/\/mustache.github.io\/mustache.5.html","title":"Mustache Manual","titleInlineContent":[{"type":"text","text":"Mustache Manual"}],"type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Rendering-sections":{"title":"Rendering sections","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections","abstract":[],"url":"\/documentation\/hummingbird\/mustachefeatures#Rendering-sections","kind":"section"}}}