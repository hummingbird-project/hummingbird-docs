{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"role":"article","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","title":"Mustache Syntax"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Mustache is a “logic-less” templating engine. The core language has no flow control statements. Instead it has tags that can be replaced with a value, nothing, or a series of values. This article documents the standard mustache tags."}],"type":"paragraph"},{"text":"Context","anchor":"Context","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Mustache renders a template with a context stack. A context is a list of key\/value pairs. These can be represented by either a "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" or the reflection information that "},{"code":"Mirror","type":"codeVoice"},{"type":"text","text":" provides. For example, the following two objects render in the same way"}],"type":"paragraph"},{"syntax":"swift","code":["let object = [\"name\": \"John Smith\", \"age\": 68]"],"type":"codeListing"},{"syntax":"swift","code":["struct Person {","    let name: String","    let age: Int","}","let object = Person(name: \"John Smith\", age: 68)"],"type":"codeListing"},{"inlineContent":[{"text":"Initially the stack consists of the root context object to render. When the template enters a section tag, mustache pushes the associated value onto the context stack. When the template leaves the section, it pops that value back off the stack.","type":"text"}],"type":"paragraph"},{"text":"Tags","anchor":"Tags","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Surround all tags with a double curly bracket "},{"type":"codeVoice","code":"{{}}"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"When a tag has a reference to a key, mustache searches for the key from the context at the top of the context stack to return the associated value."},{"type":"text","text":" "},{"type":"text","text":"If the key can’t be found in the current context, then mustache recursively searches the next context down until either a key is found or it reaches the bottom of the stack."},{"type":"text","text":" "},{"type":"text","text":"If no key is found the output is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", which renders as an empty string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use dot notation to reference the child of an associated value of a key, similar to Swift."},{"type":"text","text":" "},{"type":"text","text":"For example, in the tag "},{"code":"{{main.sub}}","type":"codeVoice"},{"type":"text","text":", mustache searches the first context for the key "},{"code":"main","type":"codeVoice"},{"type":"text","text":". If found, is uses that value for context and searches "},{"code":"main","type":"codeVoice"},{"type":"text","text":" for the key "},{"code":"sub","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"To constrain mustache to search for values in the context at the top of the stack, prefix the variable name with the period (","type":"text"},{"code":".","type":"codeVoice"},{"text":"), for example: ","type":"text"},{"code":"{{.key}}","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"{{.}}"},{"type":"text","text":" to reference only the top of the stack, which can be useful if you present a template with a list."}],"type":"paragraph"},{"text":"Tag types","anchor":"Tag-types","level":3,"type":"heading"},{"items":[{"content":[{"inlineContent":[{"code":"{{key}}","type":"codeVoice"},{"text":": Render the value associated with ","type":"text"},{"code":"key","type":"codeVoice"},{"text":" as text. By default this is HTML escaped. Mustache renders a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value as an empty string.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{{name}}}"},{"type":"text","text":": Acts the same as "},{"type":"codeVoice","code":"{{name}}"},{"type":"text","text":", except the resulting text is not HTML escaped. You can also use "},{"type":"codeVoice","code":"{{&name}}"},{"type":"text","text":" to avoid HTML escaping."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{#section}}","type":"codeVoice"},{"text":": The ","type":"text"},{"code":"#","type":"codeVoice"},{"text":" character represents a section block that either renders text once or multiple times depending on the value of the key in the current context. A section begins with ","type":"text"},{"code":"{{#section}}","type":"codeVoice"},{"text":" and ends with ","type":"text"},{"code":"{{\/section}}","type":"codeVoice"},{"text":". If the key represents a Boolean value, it only renders if true. If the key represents an ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" it renders if the object is non-nil. If the key represents an ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" it renders the internals of the section multiple times, once for each element of the ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":". Otherwise it renders with the selected value pushed onto the top of the context stack. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections","isActive":true},{"text":" for more information.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{^section}}"},{"text":": An inverted section (","type":"text"},{"type":"codeVoice","code":"^"},{"text":") does the opposite of a section. If the key represents a Boolean value, it renders if the value is false. If the key represents an ","type":"text"},{"type":"codeVoice","code":"Optional"},{"text":" it renders if it is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". If the key represents a ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" it renders if the ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" is empty.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{! comment }}","type":"codeVoice"},{"type":"text","text":": "},{"code":"!","type":"codeVoice"},{"type":"text","text":" indicates a comment tag, which is ignored."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{>partial}}"},{"type":"text","text":": A partial tag ("},{"type":"codeVoice","code":">"},{"type":"text","text":") renders another mustache file, with the current context stack. In Swift Mustache, partial tags only work for templates that are a part of a library, and the tag represents the  name of the referenced template without the “.mustache” extension. See "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","isActive":true},{"type":"text","text":" for more information."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{{*>dynamic}}"},{"type":"text","text":": Is a partial that mustache loads dynamically."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{<parent}}"},{"type":"text","text":": A parent ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") is similar to a partial, but allows for the user to override sections of the included file. A parent tag is a section tag, and needs to end with a "},{"type":"codeVoice","code":"{{\/parent}}"},{"type":"text","text":" tag. See "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","type":"reference","isActive":true},{"type":"text","text":" for more information."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"{{$}}","type":"codeVoice"},{"type":"text","text":": The "},{"code":"$","type":"codeVoice"},{"type":"text","text":" represents a block that is a section of a parent template to override. If this is found inside a parent section, then it is the text that mustache replaces from the overriden block."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"{{=<% %>=}}","type":"codeVoice"},{"text":": The set delimiter (","type":"text"},{"code":"=","type":"codeVoice"},{"text":") tag allows you to change from using the double curly brackets as tag delimiters. In the example the delimiters have been changed to ","type":"text"},{"code":"<% %>","type":"codeVoice"},{"text":", but you can change them to whatever you like.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"You can find out more about the standard Mustache tags in the "},{"type":"reference","identifier":"https:\/\/mustache.github.io\/mustache.5.html","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"title":"Mustache","generated":true,"anchor":"Mustache","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures"]}],"abstract":[{"type":"text","text":"Overview of Mustache Syntax"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Partial-templates":{"url":"\/documentation\/hummingbird\/mustachefeatures#Partial-templates","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","title":"Partial templates","abstract":[],"kind":"section"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures":{"abstract":[{"type":"text","text":"An overview of the features of swift-mustache."}],"title":"Mustache Features","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures","role":"article","type":"topic","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/mustachefeatures"},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Hummingbird Documentation","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Rendering-sections":{"url":"\/documentation\/hummingbird\/mustachefeatures#Rendering-sections","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections","title":"Rendering sections","abstract":[],"kind":"section"},"https://mustache.github.io/mustache.5.html":{"title":"Mustache Manual","identifier":"https:\/\/mustache.github.io\/mustache.5.html","titleInlineContent":[{"type":"text","text":"Mustache Manual"}],"url":"https:\/\/mustache.github.io\/mustache.5.html","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Template-inheritance-and-parents":{"url":"\/documentation\/hummingbird\/mustachefeatures#Template-inheritance-and-parents","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","title":"Template inheritance and parents","abstract":[],"kind":"section"},"logo.png":{"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null}}}