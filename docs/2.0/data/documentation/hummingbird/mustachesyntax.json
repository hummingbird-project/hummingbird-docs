{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Mustache is a “logic-less” templating engine. The core language has no flow control statements. Instead it has tags that can be replaced with a value, nothing, or a series of values. This article documents the standard mustache tags.","type":"text"}]},{"type":"heading","level":3,"text":"Context","anchor":"Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache renders a template with a context stack. A context is a list of key\/value pairs. These can be represented by either a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" or the reflection information that "},{"type":"codeVoice","code":"Mirror"},{"type":"text","text":" provides. For example, the following two objects render in the same way"}]},{"type":"codeListing","code":["let object = [\"name\": \"John Smith\", \"age\": 68]"],"syntax":"swift"},{"type":"codeListing","code":["struct Person {","    let name: String","    let age: Int","}","let object = Person(name: \"John Smith\", age: 68)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initially the stack consists of the root context object to render. When the template enters a section tag, mustache pushes the associated value onto the context stack. When the template leaves the section, it pops that value back off the stack."}]},{"type":"heading","level":3,"text":"Tags","anchor":"Tags"},{"type":"paragraph","inlineContent":[{"text":"Surround all tags with a double curly bracket ","type":"text"},{"code":"{{}}","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"When a tag has a reference to a key, mustache searches for the key from the context at the top of the context stack to return the associated value.","type":"text"},{"text":" ","type":"text"},{"text":"If the key can’t be found in the current context, then mustache recursively searches the next context down until either a key is found or it reaches the bottom of the stack.","type":"text"},{"text":" ","type":"text"},{"text":"If no key is found the output is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", which renders as an empty string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use dot notation to reference the child of an associated value of a key, similar to Swift.","type":"text"},{"text":" ","type":"text"},{"text":"For example, in the tag ","type":"text"},{"code":"{{main.sub}}","type":"codeVoice"},{"text":", mustache searches the first context for the key ","type":"text"},{"code":"main","type":"codeVoice"},{"text":". If found, is uses that value for context and searches ","type":"text"},{"code":"main","type":"codeVoice"},{"text":" for the key ","type":"text"},{"code":"sub","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To constrain mustache to search for values in the context at the top of the stack, prefix the variable name with the period (","type":"text"},{"code":".","type":"codeVoice"},{"text":"), for example: ","type":"text"},{"code":"{{.key}}","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"{{.}}","type":"codeVoice"},{"type":"text","text":" to reference only the top of the stack, which can be useful if you present a template with a list."}]},{"type":"heading","level":3,"text":"Tag types","anchor":"Tag-types"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{key}}"},{"text":": Render the value associated with ","type":"text"},{"type":"codeVoice","code":"key"},{"text":" as text. By default this is HTML escaped. Mustache renders a ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" value as an empty string.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{{name}}}","type":"codeVoice"},{"text":": Acts the same as ","type":"text"},{"code":"{{name}}","type":"codeVoice"},{"text":", except the resulting text is not HTML escaped. You can also use ","type":"text"},{"code":"{{&name}}","type":"codeVoice"},{"text":" to avoid HTML escaping.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{#section}}"},{"type":"text","text":": The "},{"type":"codeVoice","code":"#"},{"type":"text","text":" character represents a section block that either renders text once or multiple times depending on the value of the key in the current context. A section begins with "},{"type":"codeVoice","code":"{{#section}}"},{"type":"text","text":" and ends with "},{"type":"codeVoice","code":"{{\/section}}"},{"type":"text","text":". If the key represents a Boolean value, it only renders if true. If the key represents an "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" it renders if the object is non-nil. If the key represents an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" it renders the internals of the section multiple times, once for each element of the "},{"type":"codeVoice","code":"Array"},{"type":"text","text":". Otherwise it renders with the selected value pushed onto the top of the context stack. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections"},{"type":"text","text":" for more information."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{^section}}","type":"codeVoice"},{"text":": An inverted section (","type":"text"},{"code":"^","type":"codeVoice"},{"text":") does the opposite of a section. If the key represents a Boolean value, it renders if the value is false. If the key represents an ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" it renders if it is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the key represents a ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" it renders if the ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" is empty.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{! comment }}"},{"type":"text","text":": "},{"type":"codeVoice","code":"!"},{"type":"text","text":" indicates a comment tag, which is ignored."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{>partial}}"},{"text":": A partial tag (","type":"text"},{"type":"codeVoice","code":">"},{"text":") renders another mustache file, with the current context stack. In Swift Mustache, partial tags only work for templates that are a part of a library, and the tag represents the  name of the referenced template without the “.mustache” extension. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","type":"reference"},{"text":" for more information.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{*>dynamic}}"},{"type":"text","text":": Is a partial that mustache loads dynamically."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"{{<parent}}","type":"codeVoice"},{"text":": A parent (","type":"text"},{"code":"<","type":"codeVoice"},{"text":") is similar to a partial, but allows for the user to override sections of the included file. A parent tag is a section tag, and needs to end with a ","type":"text"},{"code":"{{\/parent}}","type":"codeVoice"},{"text":" tag. See ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","type":"reference"},{"text":" for more information.","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"{{$}}","type":"codeVoice"},{"type":"text","text":": The "},{"code":"$","type":"codeVoice"},{"type":"text","text":" represents a block that is a section of a parent template to override. If this is found inside a parent section, then it is the text that mustache replaces from the overriden block."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"{{=<% %>=}}"},{"type":"text","text":": The set delimiter ("},{"type":"codeVoice","code":"="},{"type":"text","text":") tag allows you to change from using the double curly brackets as tag delimiters. In the example the delimiters have been changed to "},{"type":"codeVoice","code":"<% %>"},{"type":"text","text":", but you can change them to whatever you like."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find out more about the standard Mustache tags in the "},{"type":"reference","identifier":"https:\/\/mustache.github.io\/mustache.5.html","isActive":true},{"type":"text","text":"."}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheSyntax","interfaceLanguage":"swift"},"kind":"article","abstract":[{"text":"Overview of Mustache Syntax","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures"],"title":"Mustache","generated":true,"anchor":"Mustache"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"roleHeading":"Article","role":"article","title":"Mustache Syntax","images":[{"type":"icon","identifier":"logo.png"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Template-inheritance-and-parents":{"kind":"section","abstract":[],"url":"\/documentation\/hummingbird\/mustachefeatures#Template-inheritance-and-parents","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Template-inheritance-and-parents","title":"Template inheritance and parents"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Rendering-sections":{"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Rendering-sections","type":"topic","url":"\/documentation\/hummingbird\/mustachefeatures#Rendering-sections","title":"Rendering sections","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures":{"title":"Mustache Features","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","url":"\/documentation\/hummingbird\/mustachefeatures","abstract":[{"type":"text","text":"An overview of the features of swift-mustache."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures","kind":"article"},"logo.png":{"alt":null,"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MustacheFeatures#Partial-templates":{"kind":"section","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MustacheFeatures#Partial-templates","type":"topic","url":"\/documentation\/hummingbird\/mustachefeatures#Partial-templates","title":"Partial templates","abstract":[]},"https://mustache.github.io/mustache.5.html":{"identifier":"https:\/\/mustache.github.io\/mustache.5.html","titleInlineContent":[{"type":"text","text":"Mustache Manual"}],"type":"link","title":"Mustache Manual","url":"https:\/\/mustache.github.io\/mustache.5.html"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"url":"\/documentation\/index"}}}