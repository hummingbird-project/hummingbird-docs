{"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"metadata":{"role":"article","roleHeading":"Article","title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}]},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"],"title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","title":"Hummingbird Server","generated":true}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"To provide a mechanism to cleanly start and shutdown a Hummingbird application we have integrated with ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference","isActive":true},{"type":"text","text":". This provides lifecycle management for service startup, shutdown and shutdown triggering by signals such as SIGINT and SIGTERM."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Service Lifecycle","anchor":"Service-Lifecycle"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use Swift Service Lifecycle you have to conform the service you want managed to the protocol "},{"isActive":true,"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service"},{"text":". Internally this needs to call ","type":"text"},{"code":"withGracefulShutdownHandler","type":"codeVoice"},{"type":"text","text":" to handle graceful shutdown when we receive a shutdown signal."}]},{"code":["struct MyService: Service {","    func run() async throws {","        withGracefulShutdownHandler {","            \/\/ run service","        } onGracefulShutdown {","            \/\/ shutdown service","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Once you have this setup you can then include the service in a list of services added to a service group and have its lifecycle managed.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [MyService(), MyOtherService()],","        gracefulShutdownSignals: [.sigterm, .sigint]","        logger: logger","    )",")","try await serviceGroup.run()"]},{"type":"heading","text":"Hummingbird Integration","level":2,"anchor":"Hummingbird-Integration"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Service"},{"text":" and also provides a helper function that constructs the ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":" including the application and then runs it."}],"type":"paragraph"},{"code":["let app = Application(router: router)","try await app.runService()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"All of the types that Hummingbird introduces that require some form of lifecycle management conform to "},{"type":"codeVoice","code":"Service"},{"type":"text","text":". "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"type":"text","text":" holds an internal "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":" and any service you want managed can be added to the internal group using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: router)","app.addServices(postgresClient, sessionStorage)","try await app.runService()"],"type":"codeListing"},{"text":"Managing server startup","anchor":"Managing-server-startup","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In some situations you might want some services to start up before you startup your HTTP server, for instance when doing a database migration. With ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"text":" you can add processes to run before starting up the server, but while other services are running using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"type":"text","text":". You can call "},{"code":"beforeServerStarts","type":"codeVoice"},{"type":"text","text":" multiple times to add multiple processes to be run before we startup the server."}]},{"type":"codeListing","code":["var app = Application(router: router)","app.addServices(dbClient)","app.beforeServerStarts {","    try await dbClient.migrate()","}","try await app.runService()"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Read the Swift Service Lifecycle "},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","isActive":true},{"type":"text","text":" to find out more."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","type":"topic","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","role":"article","title":"Middleware","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","role":"article","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","kind":"symbol","title":"beforeServerStarts(perform:)","abstract":[{"text":"Add a process to run before we kick off the server service","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"kind":"text","text":"("},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)"},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","type":"topic","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","type":"topic","url":"\/documentation\/hummingbird\/routerbuilderguide","role":"article","title":"Result Builder Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","url":"\/documentation\/hummingbird\/testing","role":"article","title":"Testing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","type":"topic","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"title":"Application","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Application","kind":"identifier"}],"url":"\/documentation\/hummingbird\/application"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","role":"collection","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/index","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/addServices(_:)":{"abstract":[{"text":"Add service to be managed by application ServiceGroup","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/addServices(_:)","type":"topic","url":"\/documentation\/hummingbird\/application\/addservices(_:)","role":"symbol","title":"addServices(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addServices","kind":"identifier"},{"kind":"text","text":"("},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","kind":"typeIdentifier","text":"Service"},{"text":"...)","kind":"text"}],"kind":"symbol"},"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link","title":"Swift Service Lifecycle"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle/service":{"titleInlineContent":[{"type":"codeVoice","code":"Service"}],"url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle\/service","type":"link","title":"Service"},"https://swiftpackageindex.com/swift-server/swift-service-lifecycle/main/documentation/servicelifecycle":{"titleInlineContent":[{"text":"documentation","type":"text"}],"type":"link","url":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle","title":"documentation","identifier":"https:\/\/swiftpackageindex.com\/swift-server\/swift-service-lifecycle\/main\/documentation\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","type":"topic","title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","type":"topic","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"role":"article"}}}