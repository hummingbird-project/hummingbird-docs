{"kind":"article","abstract":[{"type":"text","text":"Managing database structure changes."}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"],"anchor":"Database-Integration","generated":true,"title":"Database Integration"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true},{"type":"text","text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations."}]},{"content":[{"inlineContent":[{"text":"If you are using Fluent then you should use the migration support that comes with Fluent.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each migration includs an "},{"code":"apply","type":"codeVoice"},{"type":"text","text":" method that applies the change and a "},{"code":"revert","type":"codeVoice"},{"type":"text","text":" method that reverts the change."}]},{"syntax":"swift","type":"codeListing","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data."}]},{"type":"heading","level":3,"text":"Adding migrations","anchor":"Adding-migrations"},{"type":"paragraph","inlineContent":[{"text":"You need to create a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"type":"codeVoice","code":"add"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"]},{"type":"heading","level":3,"text":"Applying migrations","anchor":"Applying-migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to true, the "},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" set to false."}]},{"type":"heading","level":3,"text":"Reverting migrations","anchor":"Reverting-migrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The user calls "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}]},{"type":"heading","level":3,"text":"Migration groups","anchor":"Migration-groups"},{"type":"paragraph","inlineContent":[{"text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the ","type":"text"},{"code":".default","type":"codeVoice"},{"text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}]},{"syntax":"swift","type":"codeListing","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}]},{"syntax":"swift","type":"codeListing","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist driver that come with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"},{"type":"text","text":" and the job queue driver from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}]}],"kind":"content"}],"metadata":{"role":"article","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","title":"Postgres Migrations"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"abstract":[{"text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens.","type":"text"}],"type":"topic","url":"\/tutorials\/mongokitten","title":"Store Data with MongoKitten","role":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","kind":"overview"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"abstract":[{"type":"text","text":"Working with Postgres databases."}],"title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"topic","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdpostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","title":"JobsPostgres","url":"\/documentation\/jobspostgres","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","type":"topic","url":"\/documentation\/postgresmigrations\/databasemigrations","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"Database migration support","type":"text"}],"title":"DatabaseMigrations"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"DatabaseMigration","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP"},{"kind":"text","text":")"}],"role":"symbol","title":"register(_:)","kind":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","title":"Hummingbird Documentation","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"abstract":[{"text":"Revert database migrations","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"groups","kind":"externalParam"},{"text":": [","kind":"text"},{"text":"DatabaseMigrationGroup","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","kind":"symbol","title":"revert(client:groups:logger:dryRun:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","abstract":[{"type":"text","text":"Postgres database migration service"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/postgresmigrations","title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"abstract":[{"text":"Protocol for a database migration","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigration"}],"type":"topic","kind":"symbol","title":"DatabaseMigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","url":"\/documentation\/postgresmigrations\/databasemigration","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}]},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","role":"overview","url":"\/tutorials\/fluent","title":"Store Data with Fluent","kind":"overview","type":"topic","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}]},"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","title":"beforeServerStarts(perform:)"}}}