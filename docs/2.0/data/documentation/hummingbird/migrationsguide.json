{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you are using Fluent then you should use the migration support that comes with Fluent.","type":"text"}]}],"style":"note"},{"inlineContent":[{"text":"Each migration includs an ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" method that applies the change and a ","type":"text"},{"code":"revert","type":"codeVoice"},{"text":" method that reverts the change.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"text":"Adding migrations","level":3,"type":"heading","anchor":"Adding-migrations"},{"inlineContent":[{"type":"text","text":"You need to create a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true},{"type":"text","text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling "},{"code":"add","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift"},{"text":"Applying migrations","level":3,"type":"heading","anchor":"Applying-migrations"},{"inlineContent":[{"type":"text","text":"As you need an active "},{"code":"PostgresClient","type":"codeVoice"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"code":"PostgresClient.run","type":"codeVoice"},{"type":"text","text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"syntax":"swift"},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to true, the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"text":"Reverting migrations","level":3,"type":"heading","anchor":"Reverting-migrations"},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The user calls ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","isActive":true,"type":"reference"},{"text":". This will revert all the migrations applied to the database.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true,"type":"reference"},{"text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Migration groups","level":3,"type":"heading","anchor":"Migration-groups"},{"inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}],"type":"paragraph"},{"type":"codeListing","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}],"type":"paragraph"},{"type":"codeListing","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}],"type":"paragraph"},{"inlineContent":[{"text":"The persist driver that come with ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"reference","isActive":true},{"text":" and the job queue driver from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","type":"reference","isActive":true},{"text":" both use groups to separate their migrations from any the user might add.","type":"text"}],"type":"paragraph"}]}],"metadata":{"role":"article","roleHeading":"Article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Postgres Migrations"},"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Managing database structure changes.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"]},{"generated":true,"title":"Database Integration","anchor":"Database-Integration","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","kind":"typeIdentifier","text":"DatabaseMigration"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","title":"register(_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeServerStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"title":"beforeServerStarts(perform:)","type":"topic","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"url":"\/documentation\/index","title":"Hummingbird Documentation","role":"collection"},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","kind":"overview","title":"Store Data with MongoKitten","url":"\/tutorials\/mongokitten","role":"overview"},"logo.png":{"type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"abstract":[{"text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","title":"Store Data with Fluent","kind":"overview","url":"\/tutorials\/fluent","role":"overview"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","kind":"symbol","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"url":"\/documentation\/jobspostgres","title":"JobsPostgres","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","kind":"symbol","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Postgres database migration service"}],"url":"\/documentation\/postgresmigrations","title":"PostgresMigrations","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"abstract":[{"type":"text","text":"Revert database migrations"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":", "},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"title":"revert(client:groups:logger:dryRun:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","title":"HummingbirdPostgres","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"text":"Database migration support","type":"text"}],"fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"type":"topic","title":"DatabaseMigrations","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Protocol for a database migration"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","url":"\/documentation\/postgresmigrations\/databasemigration","title":"DatabaseMigration","navigatorTitle":[{"text":"DatabaseMigration","kind":"identifier"}]}}}