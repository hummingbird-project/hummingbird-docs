{"sections":[],"abstract":[{"type":"text","text":"Managing database structure changes."}],"kind":"article","seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"]},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"],"anchor":"Database-Integration","title":"Database Integration","generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide"},"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations."}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using Fluent then you should use the migration support that comes with Fluent."}]}],"type":"aside"},{"inlineContent":[{"text":"Each migration includs an ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" method that applies the change and a ","type":"text"},{"type":"codeVoice","code":"revert"},{"type":"text","text":" method that reverts the change."}],"type":"paragraph"},{"syntax":"swift","code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Adding migrations","anchor":"Adding-migrations"},{"type":"paragraph","inlineContent":[{"text":"You need to create a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","isActive":true},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"code":"add","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift"},{"level":3,"type":"heading","text":"Applying migrations","anchor":"Applying-migrations"},{"inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"]},{"inlineContent":[{"type":"text","text":"You will notice in the code above the parameter "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"code":"dryRun","type":"codeVoice"},{"text":" set to true, the ","type":"text"},{"code":"apply","type":"codeVoice"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"code":"dryRun","type":"codeVoice"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Reverting-migrations","text":"Reverting migrations"},{"type":"paragraph","inlineContent":[{"text":"There are a number of situations where a migration maybe reverted.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The user calls ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},{"type":"text","text":". This will revert all the migrations applied to the database."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)"},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}]}]}]},{"text":"Migration groups","anchor":"Migration-groups","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To create a group you need to extend "},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"type":"text","text":" and add a new static variable for the migration group id."}],"type":"paragraph"},{"type":"codeListing","code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then every migration that belongs to that group must set its group member variable"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}]},{"inlineContent":[{"type":"text","text":"The persist driver that come with "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","isActive":true,"type":"reference"},{"type":"text","text":" and the job queue driver from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Database Migrations","images":[{"identifier":"logo.png","type":"icon"}]},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","role":"symbol","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"kind":"symbol","type":"topic","title":"beforeServerStarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)"},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"role":"overview","type":"topic","abstract":[{"text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens.","type":"text"}],"url":"\/tutorials\/mongokitten","title":"Store Data with MongoKitten","kind":"overview","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","kind":"symbol","abstract":[{"type":"text","text":"Register migration without it being applied"}],"title":"register(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"DatabaseMigration","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP"},{"kind":"text","text":")"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","kind":"symbol","abstract":[{"text":"Database migration support","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrations"}],"title":"DatabaseMigrations","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"url":"\/documentation\/jobspostgres","type":"topic","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","title":"JobsPostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/postgresmigrations","kind":"symbol","abstract":[{"text":"Postgres database migration service","type":"text"}],"title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"type":"topic","url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"revert","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"text":": ","kind":"text"},{"text":"PostgresClient","preciseIdentifier":"s:11PostgresNIO0A6ClientC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup","kind":"typeIdentifier"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"logger"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"text":", ","kind":"text"},{"text":"dryRun","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"abstract":[{"text":"Revert database migrations","type":"text"}],"title":"revert(client:groups:logger:dryRun:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"role":"overview","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}],"url":"\/tutorials\/fluent","type":"topic","kind":"overview","title":"Store Data with Fluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"role":"symbol","url":"\/documentation\/postgresmigrations\/databasemigration","title":"DatabaseMigration","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","abstract":[{"text":"Protocol for a database migration","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DatabaseMigration","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"kind":"symbol","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"title":"HummingbirdPostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection"}}}