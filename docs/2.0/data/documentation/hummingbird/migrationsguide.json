{"metadata":{"roleHeading":"Article","role":"article","title":"Database Migrations","images":[{"type":"icon","identifier":"logo.png"}]},"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"],"anchor":"Related-Documentation"},{"generated":true,"title":"Database Integration","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten"],"anchor":"Database-Integration"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Database migrations are a controlled set of incremental changes applied to a database. You can use a migration list to transition a database from one state to a new desired state. A migration can involve creating\/deleting tables, adding\/removing columns, changing types and constraints. The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","type":"reference","isActive":true},{"text":" library that comes with HummingbirdPostgres provides support for setting up your own database migrations.","type":"text"}],"type":"paragraph"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are using Fluent then you should use the migration support that comes with Fluent."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Each migration includs an ","type":"text"},{"type":"codeVoice","code":"apply"},{"text":" method that applies the change and a ","type":"text"},{"code":"revert","type":"codeVoice"},{"type":"text","text":" method that reverts the change."}]},{"code":["struct CreateMyTableMigration: DatabaseMigration {","    func apply(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"\"\"","            CREATE TABLE my_table (","                \"id\" text PRIMARY KEY,","                \"name\" text NOT NULL","            )","            \"\"\",","            logger: logger","        )","    }","","    func revert(connection: PostgresConnection, logger: Logger) async throws {","        try await connection.query(","            \"DROP TABLE my_table\",","            logger: logger","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"As an individual migration can be dependent on the results of a previous migration the order they are applied has to be the same everytime. Migrations allow for database changes to be repeatable, shared and testable without loss of data.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Adding migrations","anchor":"Adding-migrations","level":3},{"type":"paragraph","inlineContent":[{"text":"You need to create a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","type":"reference","isActive":true},{"text":" object to store your migrations in. Only create one of these, otherwise you could confuse your database about what migrations need applied. Adding a migration is as simple as calling ","type":"text"},{"type":"codeVoice","code":"add"},{"type":"text","text":"."}]},{"type":"codeListing","code":["import HummingbirdPostgres","","let migrations = DatabaseMigrations()","await migrations.add(CreateMyTableMigration())"],"syntax":"swift"},{"type":"heading","text":"Applying migrations","anchor":"Applying-migrations","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you need an active "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" to apply migrations you need to run the migrate once you have called "},{"type":"codeVoice","code":"PostgresClient.run"},{"text":". It is also preferable to have run your migrations before your server is active and accepting connections. The best way to do this is use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"reference"},{"text":".","type":"text"}]},{"syntax":"swift","code":["var app = Application(router: router)","\/\/ add postgres client as a service to ensure it is active","app.addServices(postgresClient)","app.beforeServerStarts {","    try await migrations.apply(client: postgresClient, logger: logger, dryRun: true)","}"],"type":"codeListing"},{"inlineContent":[{"text":"You will notice in the code above the parameter ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"type":"text","text":" is set to true. This is because applying migrations can be a destructive process and should be a supervised. If there is a change in the migration list, with "},{"type":"codeVoice","code":"dryRun"},{"text":" set to true, the ","type":"text"},{"type":"codeVoice","code":"apply"},{"type":"text","text":" function will throw an error and list the migrations it would apply or revert. At that point you can make a call on whether you want to apply those changes and run the same process again except with "},{"type":"codeVoice","code":"dryRun"},{"text":" set to false.","type":"text"}],"type":"paragraph"},{"text":"Reverting migrations","anchor":"Reverting-migrations","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"There are a number of situations where a migration maybe reverted."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The user calls "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","isActive":true,"type":"reference"},{"type":"text","text":". This will revert all the migrations applied to the database."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A user removes a migration from the list. The migration still needs to be registered with the migration system as it needs to know how to revert that migration. This is done with a call to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","isActive":true},{"type":"text","text":". When a migration is removed it is reverted and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A user changes the order of migrations. This is generally a user error, but if it is intentional then the first migration affected by the order change and all subsequent migrations will be reverted and then re-applied."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Migration groups","anchor":"Migration-groups","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A migration group is a group of migrations that can be applied to a database independent of all other migrations outside that group. By default all migrations are added to the "},{"code":".default","type":"codeVoice"},{"type":"text","text":" migration group. Each group is applied independently to your database. A group allows for a modular piece of code to add additional migrations without affecting the ordering of other migrations and causing deletion of data."}]},{"inlineContent":[{"text":"To create a group you need to extend ","type":"text"},{"type":"codeVoice","code":"\/PostgresMigrations\/DatabaseMigrationsGroup"},{"text":" and add a new static variable for the migration group id.","type":"text"}],"type":"paragraph"},{"code":["extension DatabaseMigrationGroup {","    public static var myGroup: Self { .init(\"my_group\") }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Then every migration that belongs to that group must set its group member variable","type":"text"}],"type":"paragraph"},{"code":["extension CreateMyTableMigration {","    var group: DatabaseMigrationGroup { .myGroup }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should only use groups if you can guarantee the migrations inside it will always be independent of migrations outside the group."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The persist driver that come with "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"reference"},{"text":" and the job queue driver from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","isActive":true,"type":"reference"},{"type":"text","text":" both use groups to separate their migrations from any the user might add."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Managing database structure changes."}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/revert(client:groups:logger:dryRun:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/revert(client:groups:logger:dryRun:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"revert"},{"text":"(","kind":"text"},{"text":"client","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"groups","kind":"externalParam"},{"kind":"text","text":": ["},{"text":"DatabaseMigrationGroup","kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"logger"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"}],"title":"revert(client:groups:logger:dryRun:)","type":"topic","kind":"symbol","abstract":[{"text":"Revert database migrations","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/revert(client:groups:logger:dryrun:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"url":"\/documentation\/hummingbirdpostgres","kind":"symbol","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"HummingbirdPostgres","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"abstract":[{"text":"Database migration support","type":"text"}],"title":"DatabaseMigrations","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrations"}],"url":"\/documentation\/postgresmigrations\/databasemigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigration":{"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DatabaseMigration"}],"title":"DatabaseMigration","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigration"}],"url":"\/documentation\/postgresmigrations\/databasemigration","abstract":[{"type":"text","text":"Protocol for a database migration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigration","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"kind":"symbol","url":"\/documentation\/jobspostgres","role":"collection","title":"JobsPostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"title":"beforeServerStarts(perform:)","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://com.opticalaberration.hummingbird/tutorials/MongoKitten":{"kind":"overview","title":"Store Data with MongoKitten","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with MongoKitten to create and share your kittens."}],"url":"\/tutorials\/mongokitten","identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/MongoKitten","role":"overview","type":"topic"},"doc://com.opticalaberration.hummingbird/tutorials/Fluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/tutorials\/Fluent","type":"topic","url":"\/tutorials\/fluent","role":"overview","title":"Store Data with Fluent","abstract":[{"type":"text","text":"A tutorial that shows you how to set up Hummingbird 2 with Fluent to create and access your Galaxies."}],"kind":"overview"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/register(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations17DatabaseMigrationP","text":"DatabaseMigration"},{"text":")","kind":"text"}],"kind":"symbol","title":"register(_:)","abstract":[{"text":"Register migration without it being applied","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/register(_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/register(_:)","role":"symbol","type":"topic"},"logo.png":{"alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","type":"image"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","abstract":[{"text":"Postgres database migration service","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","role":"collection","type":"topic","url":"\/documentation\/postgresmigrations","title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","kind":"article","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index"}}}