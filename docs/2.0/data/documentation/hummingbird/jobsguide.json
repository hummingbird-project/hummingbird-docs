{"topicSections":[{"title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"],"anchor":"Reference"}],"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule"],"anchor":"Related-Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"A Job consists of a payload and an execute method to run the job. Swift Jobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","isActive":true},{"type":"text","text":" that implement the job queue using a Redis database or Postgres database."}],"type":"paragraph"},{"level":3,"anchor":"Setting-up-a-Job-queue","text":"Setting up a Job queue","type":"heading"},{"inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory that will process four jobs concurrently."}],"type":"paragraph"},{"syntax":"swift","code":["let jobQueue = JobQueue(.memory, numWorkers: 4, logger: logger)"],"type":"codeListing"},{"level":3,"anchor":"Creating-a-Job","text":"Creating a Job","type":"heading"},{"inlineContent":[{"text":"Before you can start running jobs you need to define a job. A job definition requires an identifier for the job, the job parameters and the function that runs the job.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We use a struct conforming to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters"},{"text":" to define the job parameters and identifier.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct SendEmailJobParameters: JobParameters {","    \/\/\/ jobName is used to create the job identifier. It should be unique","    static let jobName = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}],"type":"paragraph"},{"syntax":"swift","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now your job is ready to create. Jobs can be queued up using the function ","type":"text"},{"code":"push","type":"codeVoice"},{"text":" on ","type":"text"},{"code":"JobQueue","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"],"type":"codeListing"},{"level":3,"anchor":"Processing-Jobs","text":"Processing Jobs","type":"heading"},{"inlineContent":[{"type":"text","text":"When you create a "},{"type":"codeVoice","code":"JobQueue"},{"type":"text","text":" the "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" parameter indicates how many jobs you want serviced concurrently by the job queue. If you want to activate these workers you need to add the job queue to your "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server, jobQueue],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Or it can be added to the array of services that "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" manages"}],"type":"paragraph"},{"syntax":"swift","code":["let app = Application(...)","app.addServices(jobQueue)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Job-Scheduler","text":"Job Scheduler","type":"heading"},{"inlineContent":[{"type":"text","text":"The Jobs framework comes with a scheduler "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" that allows you to schedule jobs to occur at regular times. Job schedules are defined using the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule","isActive":true},{"type":"text","text":" type."}],"type":"paragraph"},{"syntax":"swift","code":["var jobSchedule = JobSchedule()","jobSchedule.addJob(BirthdayRemindersJob(), schedule: .daily(hour: 9))","jobSchedule.addJob(CleanupStaleSessionDataJob(), schedule: .weekly(day: .sunday, hour: 4))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To get your "},{"type":"codeVoice","code":"JobSchedule"},{"type":"text","text":" to schedule jobs on a "},{"type":"codeVoice","code":"JobQueue"},{"type":"text","text":" you need to create the scheduler "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" and then add it to your "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" service list or "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["var app = Application(router: router)","app.addService(jobSchedule.scheduler(on: jobQueue, named: \"MyScheduler\"))"],"type":"codeListing"},{"level":3,"anchor":"Schedule-types","text":"Schedule types","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/Schedule"},{"type":"text","text":" can be setup in a number of ways. It includes functions to trigger once every minute, hour, day, month, week day and functions to trigger on multiple minutes, hours, etc."}],"type":"paragraph"},{"syntax":"swift","code":["jobSchedule.addJob(TestJobParameters(), schedule: .hourly(minute: 30))","jobSchedule.addJob(TestJobParameters(), schedule: .yearly(month: 4, date: 1, hour: 8))","jobSchedule.addJob(TestJobParameters(), schedule: .onMinutes([0,15,30,45]))","jobSchedule.addJob(TestJobParameters(), schedule: .onDays([.saturday, .sunday], hour: 12, minute: 45))"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If these aren’t flexible enough a "},{"type":"codeVoice","code":"Schedule"},{"type":"text","text":" can be setup using a five value crontab format. Most crontabs are supported but combinations setting both week day and date are not supported."}],"type":"paragraph"},{"syntax":"swift","code":["jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"0 12 * * *\")) \/\/ daily at 12 o'clock","jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"0 *\/4 * * sat,sun\")) \/\/ every four hours on Saturday and Sunday","jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"@daily\")) \/\/ crontab default, every day at midnight "],"type":"codeListing"},{"level":3,"anchor":"Schedule-accuracy","text":"Schedule accuracy","type":"heading"},{"inlineContent":[{"text":"You can setup how accurate you want your scheduler to adhere to the schedule regardless of whether the scheduler is running or not. Obviously if your scheduler is not running it cannot schedule jobs. But you can use the ","type":"text"},{"code":"accuracy","type":"codeVoice"},{"text":" parameter of a schedule to indicate what you want your scheduler to do once it comes back online after having been down.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Setting it to ","type":"text"},{"code":".all","type":"codeVoice"},{"text":" will schedule a job for every trigger point it missed eg if your scheduler was down for 6 hours and you had a hourly schedule it would push a job to the JobQueue for every one of those hours missed. Setting it to ","type":"text"},{"code":".latest","type":"codeVoice"},{"text":" will mean it only schedules a job for last trigger point if it was missed. If you don’t set the value then it will default to ","type":"text"},{"code":".latest","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["jobSchedule.addJob(TestJobParameters(), schedule: .hourly(minute: 30), accuracy: .all)"],"type":"codeListing"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"metadata":{"title":"Jobs","roleHeading":"API Collection","images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup"},"references":{"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"type":"topic","kind":"symbol","role":"symbol","title":"PostgresJobQueue","url":"\/documentation\/jobspostgres\/postgresjobqueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/Schedule":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/Schedule","kind":"symbol","role":"symbol","title":"Schedule","url":"\/documentation\/jobs\/schedule","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Schedule","kind":"identifier"}],"navigatorTitle":[{"text":"Schedule","kind":"identifier"}],"abstract":[{"text":"Generates a Date at regular intervals (hourly, daily, weekly etc)","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","title":"JobQueue","abstract":[{"type":"text","text":"Job queue"}],"kind":"symbol","url":"\/documentation\/jobs\/jobqueue","navigatorTitle":[{"text":"JobQueue","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobQueue","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"type":"topic","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","title":"JobsPostgres","url":"\/documentation\/jobspostgres","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobSchedule":{"navigatorTitle":[{"text":"JobSchedule","kind":"identifier"}],"url":"\/documentation\/jobs\/jobschedule","type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule","abstract":[{"type":"text","text":"An array of Jobs with schedules detailing when they should be run"}],"title":"JobSchedule","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobSchedule","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","url":"\/documentation\/jobsredis","type":"topic","kind":"symbol","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"title":"JobsRedis"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobParameters":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","title":"JobParameters","abstract":[{"text":"Defines job parameters and identifier","type":"text"}],"kind":"symbol","url":"\/documentation\/jobs\/jobparameters","navigatorTitle":[{"text":"JobParameters","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobParameters","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"abstract":[{"text":"Redis implementation of job queue driver","type":"text"}],"url":"\/documentation\/jobsredis\/redisjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","title":"RedisJobQueue","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","title":"Hummingbird Documentation","url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article"}}}