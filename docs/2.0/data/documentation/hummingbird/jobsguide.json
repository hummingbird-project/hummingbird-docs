{"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Article","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Jobs"},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule"],"title":"Related Documentation"}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"A Job consists of a payload and an execute method to run the job. Swift Jobs provides a framework for pushing jobs onto a queue and processing them at a later point. If the driver backing up the job queue uses persistent storage then a separate server can be used to process the jobs. The module comes with a driver that stores jobs in local memory and uses your current server to process the jobs, but there are also implementations in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","isActive":true,"type":"reference"},{"text":" that implement the job queue using a Redis database or Postgres database.","type":"text"}]},{"type":"heading","level":3,"anchor":"Setting-up-a-Job-queue","text":"Setting up a Job queue"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can start adding or processing jobs you need to setup a Jobs queue to push jobs onto. Below we create a job queue stored in local memory."}]},{"syntax":"swift","type":"codeListing","code":["let jobQueue = JobQueue(.memory, logger: logger)"]},{"type":"heading","level":3,"anchor":"Creating-a-Job","text":"Creating a Job"},{"type":"paragraph","inlineContent":[{"text":"Creating a job requires an identifier, the parameters for the job and the function that runs the job. We use a struct conforming to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","isActive":true,"type":"reference"},{"text":" to define the job parameters and identifier.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct SendEmailJobParameters: JobParameters {","    \/\/\/ jobName is used to create the job identifier. It should be unique","    static let jobName = \"SendEmail\"","    let to: String","    let subject: String","    let body: String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then we register the job with a job queue and also provide a closure that executes the job."}]},{"syntax":"swift","type":"codeListing","code":["jobQueue.registerJob(parameters: SendEmailJobParameters.self) { parameters, context in","    try await myEmailService.sendEmail(to: parameters.to, subject: parameters.subject, body: parameters.body)","}"]},{"type":"paragraph","inlineContent":[{"text":"Now your job is ready to create. Jobs can be queued up using the function ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/push(_:options:)"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"JobQueue"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let job = SendEmailJobParameters(","    to: \"joe@email.com\",","    subject: \"Testing Jobs\",","    message: \"...\"",")","jobQueue.push(job)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can create a job using a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobName"},{"type":"text","text":". This associates a type with a name, but that type can be used multiple times with different job names."}]},{"syntax":"swift","type":"codeListing","code":["let printStringJob = JobName<String>(\"Print String\")","jobQueue.registerJob(printStringJob) { parameters, context in","    print(parameters)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You then queue your job for execution using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/push(_:parameters:options:)","isActive":true,"type":"reference"}]},{"syntax":"swift","type":"codeListing","code":["jobQueue.push(printStringJob, parameters: \"Testing,testing,1,2,3\")"]},{"type":"heading","level":3,"anchor":"Processing-Jobs","text":"Processing Jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start processing jobs on your queue you need a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueueProcessor"},{"type":"text","text":". You can create the job processor for a job queue by calling "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/processor(options:)"},{"type":"text","text":". The options passed in when creating your "},{"type":"codeVoice","code":"JobQueueProcessor"},{"type":"text","text":" includes the parameter "},{"type":"codeVoice","code":"numWorkers"},{"type":"text","text":" which indicates how many jobs you want to run concurrently. If you want to activate the "},{"type":"codeVoice","code":"JobQueueProcessor"},{"type":"text","text":" you can call the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueueProcessor\/run()"},{"type":"text","text":" method but it is preferable to use "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},{"type":"text","text":" to manage the running of the processor to ensure clean shutdown when your application is shutdown."}]},{"syntax":"swift","type":"codeListing","code":["let jobProcessor = jobQueue.processor(options: .init(numWorkers: 8))","let serviceGroup = ServiceGroup(","    services: [server, jobProcessor],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"]},{"type":"paragraph","inlineContent":[{"text":"Or it can be added to the array of services that ","type":"text"},{"code":"Application","type":"codeVoice"},{"text":" manages","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let app = Application(...)","app.addServices(jobProcessor)"]},{"type":"paragraph","inlineContent":[{"text":"If you want to process jobs on a separate server you will need to use a job queue driver that saves to some external storage eg ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Job-Scheduler","text":"Job Scheduler"},{"type":"paragraph","inlineContent":[{"text":"The Jobs framework comes with a scheduler ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" that allows you to schedule jobs to occur at regular times. Job schedules are defined using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule","type":"reference"},{"text":" type.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var jobSchedule = JobSchedule()","jobSchedule.addJob(BirthdayRemindersJob(), schedule: .daily(hour: 9))","jobSchedule.addJob(CleanupStaleSessionDataJob(), schedule: .weekly(day: .sunday, hour: 4))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get your "},{"code":"JobSchedule","type":"codeVoice"},{"type":"text","text":" to schedule jobs on a "},{"code":"JobQueue","type":"codeVoice"},{"type":"text","text":" you need to create the scheduler "},{"code":"Service","type":"codeVoice"},{"type":"text","text":" and then add it to your "},{"code":"Application","type":"codeVoice"},{"type":"text","text":" service list or "},{"code":"ServiceGroup","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["var app = Application(router: router)","app.addService(jobSchedule.scheduler(on: jobQueue, named: \"MyScheduler\"))"]},{"type":"heading","level":3,"anchor":"Schedule-types","text":"Schedule types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/Schedule","type":"reference","isActive":true},{"type":"text","text":" can be setup in a number of ways. It includes functions to trigger once every minute, hour, day, month, week day and functions to trigger on multiple minutes, hours, etc."}]},{"syntax":"swift","type":"codeListing","code":["jobSchedule.addJob(TestJobParameters(), schedule: .hourly(minute: 30))","jobSchedule.addJob(TestJobParameters(), schedule: .yearly(month: 4, date: 1, hour: 8))","jobSchedule.addJob(TestJobParameters(), schedule: .onMinutes([0,15,30,45]))","jobSchedule.addJob(TestJobParameters(), schedule: .onDays([.saturday, .sunday], hour: 12, minute: 45))"]},{"type":"paragraph","inlineContent":[{"text":"If these arenâ€™t flexible enough a ","type":"text"},{"code":"Schedule","type":"codeVoice"},{"text":" can be setup using a five value crontab format. Most crontabs are supported but combinations setting both week day and date are not supported.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"0 12 * * *\")) \/\/ daily at 12 o'clock","jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"0 *\/4 * * sat,sun\")) \/\/ every four hours on Saturday and Sunday","jobSchedule.addJob(TestJobParameters(), schedule: .crontab(\"@daily\")) \/\/ crontab default, every day at midnight "]},{"type":"heading","level":3,"anchor":"Schedule-accuracy","text":"Schedule accuracy"},{"type":"paragraph","inlineContent":[{"text":"You can setup how accurate you want your scheduler to adhere to the schedule regardless of whether the scheduler is running or not. Obviously if your scheduler is not running it cannot schedule jobs. But you can use the ","type":"text"},{"code":"accuracy","type":"codeVoice"},{"text":" parameter of a schedule to indicate what you want your scheduler to do once it comes back online after having been down.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Setting it to ","type":"text"},{"type":"codeVoice","code":".all"},{"text":" will schedule a job for every trigger point it missed eg if your scheduler was down for 6 hours and you had a hourly schedule it would push a job to the JobQueue for every one of those hours missed. Setting it to ","type":"text"},{"type":"codeVoice","code":".latest"},{"text":" will mean it only schedules a job for last trigger point if it was missed. If you donâ€™t set the value then it will default to ","type":"text"},{"type":"codeVoice","code":".latest"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["jobSchedule.addJob(TestJobParameters(), schedule: .hourly(minute: 30), accuracy: .all)"]}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","type":"topic","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"kind":"article","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobSchedule":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobSchedule","kind":"identifier"}],"type":"topic","url":"\/documentation\/jobs\/jobschedule","title":"JobSchedule","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobSchedule","abstract":[{"type":"text","text":"An array of Jobs with schedules detailing when they should be run"}],"kind":"symbol","navigatorTitle":[{"text":"JobSchedule","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"title":"JobsRedis","kind":"symbol","type":"topic","url":"\/documentation\/jobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue/push(_:options:)":{"title":"push(_:options:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/push(_:options:)","role":"symbol","abstract":[{"text":"Push Job onto queue","type":"text"}],"url":"\/documentation\/jobs\/jobqueue\/push(_:options:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolPAAE4push_7options0C0_0B2IDQZqd___AF_0B7OptionsQZtYaKAA0B10ParametersRd__lF0I0L_qd__mfp","text":"Parameters","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolP0C0Qa","text":"Queue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:4Jobs14JobQueueDriverP0B7OptionsQa","text":"JobOptions","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolP0C0Qa","text":"Queue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:4Jobs14JobQueueDriverP0B2IDQa","text":"JobID","kind":"typeIdentifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs/Schedule":{"abstract":[{"type":"text","text":"Generates a Date at regular intervals (hourly, daily, weekly etc)"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/Schedule","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Schedule"}],"type":"topic","title":"Schedule","navigatorTitle":[{"kind":"identifier","text":"Schedule"}],"role":"symbol","url":"\/documentation\/jobs\/schedule"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobName":{"navigatorTitle":[{"kind":"identifier","text":"JobName"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobName","url":"\/documentation\/jobs\/jobname","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Identifier for a Job."}],"title":"JobName","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobName"}]},"https://github.com/swift-server/swift-service-lifecycle":{"titleInlineContent":[{"type":"text","text":"Swift Service Lifecycle"}],"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"Swift Service Lifecycle","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueueProcessor/run()":{"abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueueProcessor\/run()","role":"symbol","url":"\/documentation\/jobs\/jobqueueprocessor\/run()","title":"run()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueueProcessor":{"url":"\/documentation\/jobs\/jobqueueprocessor","navigatorTitle":[{"kind":"identifier","text":"JobQueueProcessor"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueueProcessor","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueueProcessor"}],"abstract":[{"type":"text","text":"Object handling a single job queue"}],"title":"JobQueueProcessor","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobParameters":{"abstract":[{"type":"text","text":"Defines job parameters and name"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JobParameters","kind":"identifier"}],"title":"JobParameters","kind":"symbol","navigatorTitle":[{"text":"JobParameters","kind":"identifier"}],"type":"topic","url":"\/documentation\/jobs\/jobparameters","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobParameters","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"abstract":[{"type":"text","text":"Postgres Job queue implementation"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"title":"PostgresJobQueue","kind":"symbol","navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"type":"topic","url":"\/documentation\/jobspostgres\/postgresjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue/push(_:parameters:options:)":{"title":"push(_:parameters:options:)","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/push(_:parameters:options:)","role":"symbol","abstract":[{"type":"text","text":"Push Job onto queue"}],"url":"\/documentation\/jobs\/jobqueue\/push(_:parameters:options:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parameters"},{"kind":"text","text":">("},{"preciseIdentifier":"s:4Jobs7JobNameV","kind":"typeIdentifier","text":"JobName"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolPAAE4push_10parameters7options0C0_0B2IDQZAA0B4NameVyqd__G_qd__AG_0B7OptionsQZtYaKSeRd__SERd__s8SendableRd__lF10ParametersL_qd__mfp","kind":"typeIdentifier","text":"Parameters"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"parameters"},{"kind":"text","text":": "},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolPAAE4push_10parameters7options0C0_0B2IDQZAA0B4NameVyqd__G_qd__AG_0B7OptionsQZtYaKSeRd__SERd__s8SendableRd__lF10ParametersL_qd__mfp","kind":"typeIdentifier","text":"Parameters"},{"kind":"text","text":", "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolP0C0Qa","kind":"typeIdentifier","text":"Queue"},{"kind":"text","text":"."},{"preciseIdentifier":"s:4Jobs14JobQueueDriverP0B7OptionsQa","kind":"typeIdentifier","text":"JobOptions"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:4Jobs16JobQueueProtocolP0C0Qa","kind":"typeIdentifier","text":"Queue"},{"kind":"text","text":"."},{"preciseIdentifier":"s:4Jobs14JobQueueDriverP0B2IDQa","kind":"typeIdentifier","text":"JobID"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","url":"\/documentation\/jobspostgres","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"type":"topic","title":"JobsPostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}],"title":"RedisJobQueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"type":"topic","url":"\/documentation\/jobsredis\/redisjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue":{"abstract":[{"type":"text","text":"Job queue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JobQueue"}],"title":"JobQueue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"JobQueue"}],"role":"symbol","url":"\/documentation\/jobs\/jobqueue"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/JobQueue/processor(options:)":{"abstract":[{"text":"Create JobQueue handler that will process jobs pushed to the queue","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/JobQueue\/processor(options:)","role":"symbol","title":"processor(options:)","url":"\/documentation\/jobs\/jobqueue\/processor(options:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"processor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:4Jobs24JobQueueProcessorOptionsV","text":"JobQueueProcessorOptions","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:16ServiceLifecycle0A0P","text":"Service","kind":"typeIdentifier"}],"type":"topic"},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"identifier":"logo.png","type":"image"}}}