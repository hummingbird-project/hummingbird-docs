{"sections":[],"variants":[{"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Test-Setup","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"title":"Test Setup","generated":true}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"]]},"abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","text":"TestClientProtocol"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"Hummingbird","symbolKind":"method","modules":[{"name":"Hummingbird"}],"externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF","title":"test(_:_:)"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"testingSetup","kind":"internalParam"},{"kind":"text","text":": "},{"text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"test"},{"kind":"text","text":": ("},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"testingSetup","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Indicates which type of testing framework we want"}]}]},{"content":[{"inlineContent":[{"text":"Test function","type":"text"}],"type":"paragraph"}],"name":"test"}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You use ","type":"text"},{"type":"codeVoice","code":"test"},{"type":"text","text":" and "},{"code":"execute","type":"codeVoice"},{"type":"text","text":" to test applications. You can either test using"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":".router"},{"text":" test framework which sends requests directly to the router for testing your code or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"type":"text","text":" or "},{"code":".ahc","type":"codeVoice"},{"type":"text","text":" frameworks which both run live servers to pass requests to, but provide"},{"text":" ","type":"text"},{"type":"text","text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The "},{"type":"codeVoice","code":".router"},{"text":" test","type":"text"},{"type":"text","text":" "},{"text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from request generation onwards."}]},{"type":"paragraph","inlineContent":[{"text":"The example below is using the ","type":"text"},{"code":".router","type":"codeVoice"},{"type":"text","text":" framework to test"}]},{"type":"codeListing","syntax":"swift","code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"title":"test(_:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","abstract":[{"text":"Test ","type":"text"},{"type":"codeVoice","code":"Application"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup"},{"text":", (","kind":"text"},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"kind":"symbol","abstract":[{"text":"HTTP Scheme to use with AsyncHTTPClient test framework","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","type":"topic","navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestHTTPScheme"}],"title":"TestHTTPScheme","url":"\/documentation\/hummingbirdtesting\/testhttpscheme"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"abstract":[{"type":"text","text":"Protocol for client used by HummingbirdTesting"}],"kind":"symbol","title":"TestClientProtocol","navigatorTitle":[{"kind":"identifier","text":"TestClientProtocol"}],"url":"\/documentation\/hummingbirdtesting\/testclientprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestClientProtocol","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"title":"HummingbirdTesting","url":"\/documentation\/hummingbirdtesting","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestingSetup"}],"navigatorTitle":[{"kind":"identifier","text":"TestingSetup"}],"url":"\/documentation\/hummingbirdtesting\/testingsetup","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","abstract":[{"type":"text","text":"Type of test framework"}],"kind":"symbol","title":"TestingSetup","role":"symbol"},"logo.png":{"identifier":"logo.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null}}}