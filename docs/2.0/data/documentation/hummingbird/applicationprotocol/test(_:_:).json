{"seeAlsoSections":[{"anchor":"Test-Setup","title":"Test Setup","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"generated":true}],"abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"},"metadata":{"title":"test(_:_:)","symbolKind":"method","extendedModule":"Hummingbird","externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF","modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"}],"role":"symbol"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"testingSetup"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"test","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}]}]},{"parameters":[{"name":"testingSetup","content":[{"type":"paragraph","inlineContent":[{"text":"Indicates which type of testing framework we want","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Test function","type":"text"}]}],"name":"test"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"test"},{"text":" and ","type":"text"},{"code":"execute","type":"codeVoice"},{"type":"text","text":" to test applications. You can either test using"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":".router"},{"text":" test framework which sends requests directly to the router for testing your code or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"type":"text","text":" or "},{"type":"codeVoice","code":".ahc"},{"text":" frameworks which both run live servers to pass requests to, but provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The "},{"code":".router","type":"codeVoice"},{"type":"text","text":" test"},{"text":" ","type":"text"},{"text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from request generation onwards."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is using the "},{"code":".router","type":"codeVoice"},{"type":"text","text":" framework to test"}]},{"syntax":"swift","code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"],"type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"]}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"url":"\/documentation\/hummingbirdtesting\/testhttpscheme","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","role":"symbol","kind":"symbol","title":"TestHTTPScheme","abstract":[{"type":"text","text":"HTTP Scheme to use with AsyncHTTPClient test framework"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestHTTPScheme"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","type":"topic","url":"\/documentation\/hummingbirdtesting\/testingsetup","role":"symbol","abstract":[{"type":"text","text":"Type of test framework"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestingSetup","kind":"identifier"}],"navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"title":"TestingSetup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"url":"\/documentation\/hummingbirdtesting\/testclientprotocol","abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestClientProtocol","kind":"identifier"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"TestClientProtocol","kind":"identifier"}],"title":"TestClientProtocol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"url":"\/documentation\/hummingbirdtesting","title":"HummingbirdTesting","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","role":"collection"},"logo.png":{"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"title":"test(_:_:)","type":"topic","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Test "},{"code":"Application","type":"codeVoice"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"}}}