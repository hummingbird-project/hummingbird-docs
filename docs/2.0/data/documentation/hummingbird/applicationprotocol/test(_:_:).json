{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","interfaceLanguage":"swift"},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"anchor":"Test-Setup","title":"Test Setup","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"testingSetup","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"TestingSetup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"test","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"testingSetup","content":[{"inlineContent":[{"text":"Indicates which type of testing framework we want","type":"text"}],"type":"paragraph"}]},{"name":"test","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test function"}]}]}]},{"kind":"mentions","mentions":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"]},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"test"},{"type":"text","text":" and "},{"type":"codeVoice","code":"execute"},{"type":"text","text":" to test applications. You can either test using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".router"},{"type":"text","text":" test framework which sends requests directly to the router for testing your code or"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"type":"text","text":" or "},{"type":"codeVoice","code":".ahc"},{"type":"text","text":" frameworks which both run live servers to pass requests to, but provide"},{"type":"text","text":" "},{"type":"text","text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The "},{"type":"codeVoice","code":".router"},{"type":"text","text":" test"},{"type":"text","text":" "},{"type":"text","text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run"},{"type":"text","text":" "},{"type":"text","text":"from request generation onwards."}]},{"type":"paragraph","inlineContent":[{"text":"The example below is using the ","type":"text"},{"code":".router","type":"codeVoice"},{"text":" framework to test","type":"text"}]},{"code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}],"sections":[],"metadata":{"modules":[{"name":"Hummingbird"}],"externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF","extendedModule":"Hummingbird","roleHeading":"Instance Method","role":"symbol","title":"test(_:_:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"text":", (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","url":"\/documentation\/hummingbirdtesting\/testhttpscheme","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"HTTP Scheme to use with AsyncHTTPClient test framework"}],"kind":"symbol","title":"TestHTTPScheme"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","title":"test(_:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","type":"topic","role":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","url":"\/documentation\/hummingbirdtesting\/testingsetup","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestingSetup","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Type of test framework","type":"text"}],"kind":"symbol","title":"TestingSetup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol":{"url":"\/documentation\/hummingbird\/applicationprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol","kind":"symbol","abstract":[{"text":"Application protocol bringing together all the components of Hummingbird","type":"text"}],"type":"topic","role":"symbol","title":"ApplicationProtocol","navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocol"}]},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"role":"symbol","type":"topic","title":"TestClientProtocol","abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"url":"\/documentation\/hummingbirdtesting\/testclientprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClientProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"TestClientProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird","kind":"symbol","title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"}}}