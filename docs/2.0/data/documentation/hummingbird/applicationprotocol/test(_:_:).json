{"kind":"symbol","metadata":{"extendedModule":"Hummingbird","symbolKind":"method","title":"test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value","kind":"typeIdentifier"}],"role":"symbol","modules":[{"name":"Hummingbird"}],"roleHeading":"Instance Method","externalID":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF"},"abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}],"variants":[{"paths":["\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"test","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"testingSetup"},{"text":": ","kind":"text"},{"text":"TestingSetup","kind":"typeIdentifier","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"test"},{"text":": (","kind":"text"},{"text":"any","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"name":"testingSetup","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Indicates which type of testing framework we want"}]}]},{"name":"test","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Test function"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"You use ","type":"text"},{"code":"test","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"execute"},{"type":"text","text":" to test applications. You can either test using"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":".router","type":"codeVoice"},{"text":" test framework which sends requests directly to the router for testing your code or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":".live"},{"text":" or ","type":"text"},{"code":".ahc","type":"codeVoice"},{"text":" frameworks which both run live servers to pass requests to, but provide","type":"text"},{"text":" ","type":"text"},{"text":"a single connection HTTP client or AsyncHTTPClient as a client respectively . The ","type":"text"},{"type":"codeVoice","code":".router"},{"type":"text","text":" test"},{"type":"text","text":" "},{"text":"framework is quicker and doesnâ€™t require setting up a full server but will only test code run","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from request generation onwards."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is using the "},{"code":".router","type":"codeVoice"},{"text":" framework to test","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let router = Router()","router.get(\"\/hello\") { _ in","    return \"hello\"","}","let app = Application(router: router)","app.test(.router) { client in","    \/\/ does my app return \"hello\" in the body for this route","    client.execute(uri: \"\/hello\", method: .GET) { response in","        XCTAssertEqual(String(buffer: response.body), \"hello\")","    }","}"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme"],"generated":true,"anchor":"Test-Setup","title":"Test Setup"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"]]},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"title":"TestingSetup","abstract":[{"type":"text","text":"Type of test framework"}],"kind":"symbol","url":"\/documentation\/hummingbirdtesting\/testingsetup","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestingSetup"}],"navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"title":"TestClientProtocol","kind":"symbol","url":"\/documentation\/hummingbirdtesting\/testclientprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TestClientProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestClientProtocol"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"title":"test(_:_:)","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"TestingSetup","preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"any","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"TestClientProtocol","preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","text":"Value","kind":"typeIdentifier"}],"url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","kind":"symbol","abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Test framework for Hummingbird.","type":"text"}],"title":"HummingbirdTesting","url":"\/documentation\/hummingbirdtesting","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"title":"TestHTTPScheme","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestHTTPScheme"}],"url":"\/documentation\/hummingbirdtesting\/testhttpscheme","navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"HTTP Scheme to use with AsyncHTTPClient test framework"}]},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png","alt":null}}}