{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests. It defines what decoder to use via the "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder","type":"reference"},{"type":"text","text":" parameter of your "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"type":"text","text":". By default this is set to decode JSON, using "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" that comes with Swift Foundation."}]},{"type":"paragraph","inlineContent":[{"text":"Requests are converted to Swift objects using the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","isActive":true,"type":"reference"},{"text":" method in the following manner.","type":"text"}]},{"code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" decode functions "},{"type":"codeVoice","code":"Request.decode(as:context:)"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"type":"codeVoice","code":"ByteBuffers"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}]},{"type":"heading","anchor":"Date-decoding","text":"Date decoding","level":3},{"type":"paragraph","inlineContent":[{"text":"As mentioned above the default is to use ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" for decoding ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":" bodies. This default is also set to use ISO 8601 dates in the form ","type":"text"},{"code":"YYYY-MM-DDThh:mm:ssZ","type":"codeVoice"},{"text":". If you are generating requests for a Hummingbird server in a Swift app using ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" you can output ISO 8601 dates by setting ","type":"text"},{"code":"JSONEncoder.dateEncodingStrategy","type":"codeVoice"},{"text":" to ","type":"text"},{"code":".iso8601","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","anchor":"Setting-up-a-custom-decoder","text":"Setting up a custom decoder","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" in a custom request context. Your request decoder needs to conform to the "},{"type":"codeVoice","code":"RequestDecoder"},{"type":"text","text":" protocol which has one requirement "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true},{"type":"text","text":". For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a decoder for URL encoded form data. Below you can see a custom request context setup to use "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","isActive":true},{"type":"text","text":" for request decoding. The router is then initialized with this context. Read "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true},{"type":"text","text":" to find out more about request contexts."}]},{"code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Decoding-based-on-Request-headers","text":"Decoding based on Request headers","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"type":"codeVoice","code":"RequestDecoder"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormDecoder"},{"type":"text","text":" based on the “content-type” header."}]},{"code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType] else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","role":"article","title":"Request Decoding"},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"]},{"anchor":"Hummingbird-Server","generated":true,"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"references":{"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder","type":"topic","abstract":[{"text":"Request decoder","type":"text"}],"kind":"symbol","role":"symbol","title":"requestDecoder","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestDecoder","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa"}],"defaultImplementations":1,"url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder"},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","kind":"article","role":"collection","title":"Hummingbird Documentation","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"type":"topic","kind":"article","role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","title":"Error Handling","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","title":"Middleware","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"url":"\/documentation\/hummingbird\/middlewareguide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"abstract":[{"type":"text","text":"The wrapper struct for decoding URL encoded form data to Codable classes"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"URLEncodedFormDecoder","url":"\/documentation\/hummingbird\/urlencodedformdecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"type":"topic","kind":"article","role":"collectionGroup","title":"Server protocol","url":"\/documentation\/hummingbird\/serverprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","kind":"article","role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"type":"topic","kind":"article","role":"article","title":"Response Encoding","url":"\/documentation\/hummingbird\/responseencoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","type":"topic","abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"kind":"symbol","role":"symbol","title":"RequestDecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"RequestDecoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestdecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","title":"Service Lifecycle","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","title":"Result Builder Router","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Building your router using a result builder."}],"url":"\/documentation\/hummingbird\/routerbuilderguide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T"}],"kind":"symbol","type":"topic","title":"decode(_:from:context:)","url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","abstract":[{"type":"text","text":"Decode Swift object from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic","kind":"article","role":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"type":"topic","kind":"article","role":"article","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request/decode(as:context:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","url":"\/documentation\/hummingbirdcore\/request\/decode(as:context:)","abstract":[{"text":"Decode request using decoder stored at ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder","type":"reference","isActive":true},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Type","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp","text":"Type","kind":"typeIdentifier"}],"title":"decode(as:context:)","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"title":"RequestContext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"url":"\/documentation\/hummingbird\/requestcontext","role":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","title":"Persistent data","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"url":"\/documentation\/hummingbird\/persistentdata","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","title":"Router","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/routerguide","role":"article"}}}