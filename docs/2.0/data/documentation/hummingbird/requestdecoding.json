{"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"]},{"generated":true,"anchor":"Hummingbird-Server","title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"metadata":{"title":"Request Decoding","roleHeading":"Article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article"},"kind":"article","sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Hummingbird uses ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" to decode requests. It defines what decoder to use via the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder"},{"text":" parameter of your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"text":". By default this is set to decode JSON, using ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" that comes with Swift Foundation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Requests are converted to Swift objects using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)"},{"type":"text","text":" method in the following manner."}]},{"type":"codeListing","code":["struct User: Decodable {","    let email: String","    let firstName: String","    let surname: String","}","router.post(\"user\") { request, context -> HTTPResponse.Status in","    \/\/ decode user from request","    let user = try await request.decode(as: User.self, context: context)","    \/\/ create user and if ok return `.ok` status","    try await createUser(user)","    return .ok","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the standard "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" decode functions "},{"code":"Request.decode(as:context:)","type":"codeVoice"},{"type":"text","text":" can throw an error if decoding fails. The decode function is also async as the request body is an asynchronous sequence of "},{"code":"ByteBuffers","type":"codeVoice"},{"type":"text","text":". We need to collate the request body into one buffer before we can decode it."}]},{"type":"heading","text":"Date decoding","level":3,"anchor":"Date-decoding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above the default is to use "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" for decoding "},{"type":"codeVoice","code":"Request"},{"type":"text","text":" bodies. This default is also set to use ISO 8601 dates in the form "},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"type":"text","text":". If you are generating requests for a Hummingbird server in a Swift app using "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" you can output ISO 8601 dates by setting "},{"type":"codeVoice","code":"JSONEncoder.dateEncodingStrategy"},{"type":"text","text":" to "},{"type":"codeVoice","code":".iso8601"},{"type":"text","text":"."}]},{"type":"heading","text":"Setting up a custom decoder","level":2,"anchor":"Setting-up-a-custom-decoder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" in a custom request context. Your request decoder needs to conform to the "},{"code":"RequestDecoder","type":"codeVoice"},{"type":"text","text":" protocol which has one requirement "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","isActive":true,"type":"reference"},{"type":"text","text":". For instance "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" also includes a decoder for URL encoded form data. Below you can see a custom request context setup to use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","isActive":true,"type":"reference"},{"type":"text","text":" for request decoding. The router is then initialized with this context. Read "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true,"type":"reference"},{"type":"text","text":" to find out more about request contexts."}]},{"type":"codeListing","code":["struct URLEncodedRequestContext: RequestContext {","    var requestDecoder: URLEncodedFormDecoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"syntax":"swift"},{"type":"heading","text":"Decoding based on Request headers","level":2,"anchor":"Decoding-based-on-Request-headers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the full request is supplied to the "},{"code":"RequestDecoder","type":"codeVoice"},{"type":"text","text":". You can make decoding decisions based on headers in the request. In the example below we are decoding using either the "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" or "},{"code":"URLEncodedFormDecoder","type":"codeVoice"},{"type":"text","text":" based on the “content-type” header."}]},{"type":"codeListing","code":["struct MyRequestDecoder: RequestDecoder {","    func decode<T>(_ type: T.Type, from request: Request, context: some RequestContext) async throws -> T where T : Decodable {","        guard let header = request.headers[.contentType] else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try await JSONDecoder().decode(type, from: request, context: context)","        case .applicationUrlEncoded:","            return try await URLEncodedFormDecoder().decode(type, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/requestDecoder":{"abstract":[{"type":"text","text":"Request decoder"}],"type":"topic","title":"requestDecoder","defaultImplementations":1,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder","url":"\/documentation\/hummingbird\/requestcontext\/requestdecoder","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestDecoder","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7DecoderQa"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder":{"abstract":[{"text":"protocol for decoder deserializing from a Request body","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestDecoder"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder","type":"topic","url":"\/documentation\/hummingbird\/requestdecoder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestDecoder"}],"title":"RequestDecoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle","title":"Service Lifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"url":"\/documentation\/hummingbird\/routerbuilderguide","title":"Result Builder Router","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","title":"Logging, Metrics and Tracing","kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request/decode(as:context:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request\/decode(as:context:)","title":"decode(as:context:)","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request\/decode(as:context:)","abstract":[{"type":"text","text":"Decode request using decoder stored at "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/requestDecoder"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Type","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Type","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"},{"text":".Type, ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Type","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV0A0E6decode2as7contextxxm_q_tYaKSeRzAD0C7ContextR_r0_lF4TypeL_xmfp"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router","kind":"article","url":"\/documentation\/hummingbird\/routerguide","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormDecoder":{"abstract":[{"text":"The wrapper struct for decoding URL encoded form data to Codable classes","type":"text"}],"navigatorTitle":[{"text":"URLEncodedFormDecoder","kind":"identifier"}],"type":"topic","title":"URLEncodedFormDecoder","url":"\/documentation\/hummingbird\/urlencodedformdecoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormDecoder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormDecoder","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","kind":"article","url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"title":"Server protocol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","title":"Persistent data","kind":"article","url":"\/documentation\/hummingbird\/persistentdata","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoder/decode(_:from:context:)":{"title":"decode(_:from:context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestDecoderP6decode_4from7contextqd__qd__m_0A4Core0B0Vqd_0_tYaKSeRd__AA0B7ContextRd_0_r0_lF1TL_qd__mfp","text":"T"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoder\/decode(_:from:context:)","required":true,"url":"\/documentation\/hummingbird\/requestdecoder\/decode(_:from:context:)","role":"symbol","abstract":[{"text":"Decode Swift object from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","url":"\/documentation\/hummingbird\/requestcontext","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article","title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"role":"collection","kind":"article","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"url":"\/documentation\/hummingbird\/testing","title":"Testing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","type":"topic","url":"\/documentation\/hummingbird\/responseencoding","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"kind":"article","title":"Response Encoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"navigatorTitle":[{"text":"Request","kind":"identifier"}],"type":"topic","title":"Request","url":"\/documentation\/hummingbirdcore\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"kind":"symbol","role":"symbol"},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png","alt":null}}}