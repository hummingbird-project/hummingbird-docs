{"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"metadata":{"title":"Request Contexts","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","role":"article"},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"],"title":"Related Documentation"},{"generated":true,"anchor":"Hummingbird-Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"title":"Hummingbird Server"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you create your "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"reference","isActive":true},{"type":"text","text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"reference","isActive":true},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}]},{"type":"codeListing","syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"]},{"type":"heading","text":"Creating a context type","anchor":"Creating-a-context-type","level":2},{"type":"paragraph","inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"text":". This requires an ","type":"text"},{"code":"init(source:)","type":"codeVoice"},{"text":" and a single member variable ","type":"text"},{"code":"coreContext","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","isActive":true},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" to process a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init"},{"type":"text","text":" takes one parameter of type "},{"type":"codeVoice","code":"Source"},{"type":"text","text":". "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is an associatedtype for the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" protocol and provides setup data for the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":". By default this is set to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource"},{"type":"text","text":" which provides access to the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that created the request."}]},{"type":"paragraph","inlineContent":[{"text":"If you are using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","isActive":true},{"text":" your RequestContext will need to conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","isActive":true},{"text":" and in that case the ","type":"text"},{"type":"codeVoice","code":"Source"},{"text":" is a ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","isActive":true},{"text":" which provide access to the ","type":"text"},{"type":"codeVoice","code":"Event"},{"text":" that triggered the lambda and the ","type":"text"},{"type":"codeVoice","code":"LambdaContext"},{"text":" from swift-aws-lambda-runtime.","type":"text"}]},{"type":"heading","text":"Encoding\/Decoding","anchor":"EncodingDecoding","level":2},{"type":"paragraph","inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" respectively. You can override this by setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" member variables in your ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". Below we are setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" to a decode\/encode JSON with a ","type":"text"},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"]},{"type":"heading","text":"Limiting memory usage","anchor":"Limiting-memory-usage","level":3},{"type":"paragraph","inlineContent":[{"text":"You can limit the amount of memory uploaded to your server when decoding requests by setting the value ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize"},{"text":" in your ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". If someone sends a request larger than the ","type":"text"},{"code":"maxUploadSize","type":"codeVoice"},{"text":" value defined the server will respond with a response with status code ","type":"text"},{"code":"(413) Content too large","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"maxUploadSize","type":"codeVoice"},{"text":" value defaults to 2MB. The request decoders provided with Hummingbird for JSON and URL Encoded Forms both use this limit.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","type":"reference"},{"type":"text","text":"."}]},{"type":"heading","text":"Passing data forward","anchor":"Passing-data-forward","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now anything run after ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":" can access the ","type":"text"},{"code":"additionalData","type":"codeVoice"},{"text":" set in ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","text":"Using RequestContextSource","anchor":"Using-RequestContextSource","level":2},{"type":"paragraph","inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true,"type":"reference"},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"]},{"type":"heading","text":"RequestContext transformation","anchor":"RequestContext-transformation","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" can be transformed for the routes in a route group. The "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" you are converting to needs to conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext"},{"type":"text","text":". This requires a parent context ie the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" you are converting from and a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)"},{"type":"text","text":" function to perform the conversion."}]},{"type":"codeListing","syntax":"swift","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Once you have defined how to perform the transform from your original ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" the conversion is added as follows","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let router = Router(context: MyRequestContext.self)","router.group(\"\/todos\", context: MyNewRequestContext.self)","    .put(use: createTodo)","    .get(use: listTodos)"]},{"type":"paragraph","inlineContent":[{"text":"Transforming the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" is a powerful way of enforcing compile-time guarantees that requests adhere to certain requirements. And by expressing these requirements as protocol conformances, you can compose these properties and flexibly express those requirements.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using a "},{"type":"codeVoice","code":"ChildRequestContext"},{"type":"text","text":" would be to unwrap an optional authentication identity. Every route that uses that child request context with the unwrapped identity now knows for sure you have an authenticated identity."}]},{"type":"codeListing","syntax":"swift","code":["struct MyAuthenticatedRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        self.identity = try context.requireIdentity()","        ...","    }","}"]},{"type":"heading","text":"Authentication Middleware","anchor":"Authentication-Middleware","level":2},{"type":"paragraph","inlineContent":[{"text":"The most obvious example of this is passing user authentication information forward. The authentication framework from ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"type":"text","text":" does provide "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext"},{"type":"text","text":": a default implementation of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":"."}]}],"kind":"content"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext":{"abstract":[{"type":"text","text":"A RequestContext that can be initialized from another RequestContext."}],"navigatorTitle":[{"text":"ChildRequestContext","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChildRequestContext","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/childrequestcontext","title":"ChildRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}],"role":"symbol","abstract":[{"text":"RequestContext source for contexts created by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"text":".","type":"text"}],"kind":"symbol","title":"ApplicationRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/routerguide","kind":"article","title":"Router","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth","type":"topic","role":"collection","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/errorhandling","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"type":"topic","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/requestdecoding","kind":"article","title":"Request Decoding","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","url":"\/documentation\/hummingbird\/testing","type":"topic","role":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"type":"topic","url":"\/documentation\/hummingbirdauth\/authrequestcontext","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"title":"AuthRequestContext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","kind":"article","title":"Hummingbird Documentation","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"role":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"kind":"symbol","title":"Application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","role":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Service Lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","kind":"article","title":"Logging, Metrics and Tracing","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthRequestContext"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}],"role":"symbol","abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}],"kind":"symbol","title":"BasicAuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"code":"Responder","type":"codeVoice"},{"text":" that will follow these rules.","type":"text"}],"navigatorTitle":[{"text":"Router","kind":"identifier"}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/router","title":"Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","url":"\/documentation\/hummingbird\/migratingtov2","type":"topic","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"url":"\/documentation\/hummingbird\/basicrequestcontext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","kind":"symbol","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}],"type":"topic","role":"symbol","title":"BasicRequestContext","navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/routerbuilderguide","kind":"article","title":"Result Builder Router","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/maxUploadSize":{"abstract":[{"text":"Maximum size of request body allowed when decoding requests. If a request body","type":"text"},{"text":" ","type":"text"},{"text":"that needs decoding is greater than this size then a Content Too Large (413)","type":"text"},{"text":" ","type":"text"},{"text":"response is returned. This only applies to decoding requests.","type":"text"}],"defaultImplementations":1,"required":true,"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"maxUploadSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/requestcontext\/maxuploadsize","title":"maxUploadSize","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","url":"\/documentation\/hummingbird\/responseencoding","type":"topic","role":"article","abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Response Encoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"article","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"url":"\/documentation\/hummingbird\/requestcontext","kind":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}],"navigatorTitle":[{"text":"CoreRequestContextStorage","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreRequestContextStorage","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbird\/corerequestcontextstorage","title":"CoreRequestContextStorage","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"url":"\/documentation\/hummingbird\/requestcontextsource","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","kind":"symbol","abstract":[{"text":"Protocol for source of request contexts","type":"text"}],"type":"topic","role":"symbol","title":"RequestContextSource","navigatorTitle":[{"text":"RequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","url":"\/documentation\/hummingbirdcore\/request","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Request","kind":"identifier"}],"role":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","title":"Request"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","title":"LambdaRequestContextSource","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext/init(context:)":{"role":"symbol","required":true,"type":"topic","title":"init(context:)","url":"\/documentation\/hummingbird\/childrequestcontext\/init(context:)","abstract":[{"type":"text","text":"Initialise RequestContext from source"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ParentContext","preciseIdentifier":"s:11Hummingbird19ChildRequestContextP06ParentD0Qa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/serverprotocol","kind":"article","title":"Server protocol","role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"type":"topic","role":"collection","title":"HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"title":"LambdaRequestContext","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}]}}}