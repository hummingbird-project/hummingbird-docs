{"kind":"article","metadata":{"role":"article","title":"Request Contexts","roleHeading":"Article","images":[{"identifier":"logo.png","type":"icon"}]},"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"code":"Logger","type":"codeVoice"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}]},{"syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"],"type":"codeListing"},{"anchor":"Creating-a-context-type","text":"Creating a context type","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"text":" and a single member variable ","type":"text"},{"code":"coreContext","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"reference"},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" to process a "},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init"},{"text":" takes one parameter of type ","type":"text"},{"type":"codeVoice","code":"Source"},{"type":"text","text":". "},{"code":"Source","type":"codeVoice"},{"type":"text","text":" is an associatedtype for the "},{"type":"codeVoice","code":"RequestContext"},{"text":" protocol and provides setup data for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":". By default this is set to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","type":"reference","isActive":true},{"type":"text","text":" which provides access to the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that created the request."}]},{"inlineContent":[{"text":"If you are using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},{"type":"text","text":" your RequestContext will need to conform to "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","isActive":true,"type":"reference"},{"type":"text","text":" and in that case the "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","isActive":true,"type":"reference"},{"type":"text","text":" which provide access to the "},{"type":"codeVoice","code":"Event"},{"text":" that triggered the lambda and the ","type":"text"},{"type":"codeVoice","code":"LambdaContext"},{"type":"text","text":" from swift-aws-lambda-runtime."}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"EncodingDecoding","text":"Encoding\/Decoding"},{"type":"paragraph","inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" and ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"type":"text","text":" respectively. You can override this by setting the "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" member variables in your "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":". Below we are setting the "},{"type":"codeVoice","code":"requestDecoder"},{"type":"text","text":" and "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" to a decode\/encode JSON with a "},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"text":"Passing data forward","level":2,"anchor":"Passing-data-forward","type":"heading"},{"inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Now anything run after ","type":"text"},{"code":"MyMiddleware","type":"codeVoice"},{"text":" can access the ","type":"text"},{"type":"codeVoice","code":"additionalData"},{"text":" set in ","type":"text"},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}]},{"anchor":"Using-RequestContextSource","text":"Using RequestContextSource","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"]},{"level":2,"type":"heading","anchor":"Authentication-Middleware","text":"Authentication Middleware"},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true,"type":"reference"},{"type":"text","text":" does provide "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext"},{"text":": a default implementation of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":"."}]}]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"]},{"title":"Hummingbird Server","anchor":"Hummingbird-Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}],"title":"AuthRequestContext","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"role":"article","title":"Response Encoding","url":"\/documentation\/hummingbird\/responseencoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"role":"article","title":"Router","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","title":"Result Builder Router"},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"type":"text","text":"Adding support for TLS and HTTP\/2 upgrades."}],"role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"title":"TLS and HTTP\/2","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","url":"\/documentation\/index","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/migratingtov2","title":"Migrating to Hummingbird v2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/testing","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"kind":"symbol","url":"\/documentation\/hummingbird\/basicrequestcontext","role":"symbol","type":"topic","title":"BasicRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"title":"CoreRequestContextStorage","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreRequestContextStorage","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}],"url":"\/documentation\/hummingbird\/corerequestcontextstorage"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"title":"LambdaRequestContext","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"role":"symbol","abstract":[],"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LambdaRequestContextSource","kind":"identifier"}],"kind":"symbol","title":"LambdaRequestContextSource","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"title":"RequestContext","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"article","title":"Persistent data","url":"\/documentation\/hummingbird\/persistentdata"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthRequestContext"}],"abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","title":"BasicAuthRequestContext","navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"type":"topic","title":"ApplicationRequestContextSource","abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"kind":"symbol","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","navigatorTitle":[{"text":"ApplicationRequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","abstract":[{"type":"text","text":"Protocol for source of request contexts"}],"url":"\/documentation\/hummingbird\/requestcontextsource","title":"RequestContextSource","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RequestContextSource"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"role":"article","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"title":"Router","kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Router","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbird\/router","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Router"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","kind":"symbol","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","role":"article","url":"\/documentation\/hummingbird\/requestdecoding","title":"Request Decoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","title":"Application","type":"topic","url":"\/documentation\/hummingbird\/application","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Application"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}]}}}