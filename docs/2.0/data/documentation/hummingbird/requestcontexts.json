{"metadata":{"roleHeading":"Article","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"role":"article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":", request decoder, response encoder and the resolved endpoint path.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"reference"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","isActive":true},{"type":"text","text":" the default implementation of a request context provided by Hummingbird."}],"type":"paragraph"},{"code":["let router = Router(context: MyRequestContext.self)"],"syntax":"swift","type":"codeListing"},{"text":"Creating a context type","anchor":"Creating-a-context-type","type":"heading","level":2},{"inlineContent":[{"text":"As mentioned above your context type must conform to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires an "},{"code":"init(source:)","type":"codeVoice"},{"type":"text","text":" and a single member variable "},{"code":"coreContext","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"reference","isActive":true},{"text":" holds the base set of information needed by the Hummingbird ","type":"text"},{"type":"codeVoice","code":"Router"},{"text":" to process a ","type":"text"},{"type":"codeVoice","code":"Request"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" takes one parameter of type ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":". ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":" is an associatedtype for the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" protocol and provides setup data for the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". By default this is set to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","isActive":true},{"text":" which provides access to the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that created the request.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","isActive":true},{"type":"text","text":" your RequestContext will need to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","isActive":true},{"type":"text","text":" and in that case the "},{"type":"codeVoice","code":"Source"},{"type":"text","text":" is a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","isActive":true},{"type":"text","text":" which provide access to the "},{"type":"codeVoice","code":"Event"},{"type":"text","text":" that triggered the lambda and the "},{"type":"codeVoice","code":"LambdaContext"},{"type":"text","text":" from swift-aws-lambda-runtime."}],"type":"paragraph"},{"text":"Encoding\/Decoding","anchor":"EncodingDecoding","type":"heading","level":2},{"inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"code":"JSONDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" respectively. You can override this by setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" member variables in your ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". Below we are setting the ","type":"text"},{"code":"requestDecoder","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" to a decode\/encode JSON with a ","type":"text"},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}],"type":"paragraph"},{"code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Limiting memory usage","anchor":"Limiting-memory-usage","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You can limit the amount of memory uploaded to your server when decoding requests by setting the value "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize","isActive":true,"type":"reference"},{"type":"text","text":" in your "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":". If someone sends a request larger than the "},{"type":"codeVoice","code":"maxUploadSize"},{"type":"text","text":" value defined the server will respond with a response with status code "},{"type":"codeVoice","code":"(413) Content too large"},{"type":"text","text":". The "},{"type":"codeVoice","code":"maxUploadSize"},{"type":"text","text":" value defaults to 2MB. The request decoders provided with Hummingbird for JSON and URL Encoded Forms both use this limit."}],"type":"paragraph"},{"inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Passing data forward","anchor":"Passing-data-forward","type":"heading","level":2},{"inlineContent":[{"text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler.","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now anything run after "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":" can access the "},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Using RequestContextSource","anchor":"Using-RequestContextSource","type":"heading","level":2},{"inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true,"type":"reference"},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}],"type":"paragraph"},{"code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"syntax":"swift","type":"codeListing"},{"text":"RequestContext transformation","anchor":"RequestContext-transformation","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" can be transformed for the routes in a route group. The "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" you are converting to needs to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext","isActive":true},{"type":"text","text":". This requires a parent context ie the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" you are converting from and a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","isActive":true},{"type":"text","text":" function to perform the conversion."}],"type":"paragraph"},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" the conversion is added as follows"}],"type":"paragraph"},{"code":["let router = Router(context: MyRequestContext.self)","router.group(\"\/todos\", context: MyNewRequestContext.self)","    .put(use: createTodo)","    .get(use: listTodos)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Transforming the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" is a powerful way of enforcing compile-time guarantees that requests adhere to certain requirements. And by expressing these requirements as protocol conformances, you can compose these properties and flexibly express those requirements.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An example of using a ","type":"text"},{"code":"ChildRequestContext","type":"codeVoice"},{"text":" would be to unwrap an optional authentication identity. Every route that uses that child request context with the unwrapped identity now knows for sure you have an authenticated identity.","type":"text"}],"type":"paragraph"},{"code":["struct MyAuthenticatedRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        self.identity = try context.requireIdentity()","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Authentication Middleware","anchor":"Authentication-Middleware","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference"},{"text":" does provide ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"reference"},{"text":": a default implementation of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"sections":[],"kind":"article","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","kind":"symbol","title":"RequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"title":"Result Builder Router","url":"\/documentation\/hummingbird\/routerbuilderguide","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","type":"topic","role":"article","url":"\/documentation\/hummingbird\/middlewareguide","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"title":"LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext/init(context:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","type":"topic","title":"init(context:)","role":"symbol","url":"\/documentation\/hummingbird\/childrequestcontext\/init(context:)","required":true,"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ParentContext","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ChildRequestContextP06ParentD0Qa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Initialise RequestContext from source"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext":{"title":"ChildRequestContext","url":"\/documentation\/hummingbird\/childrequestcontext","navigatorTitle":[{"text":"ChildRequestContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChildRequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A RequestContext that can be initialized from another RequestContext."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","title":"Service Lifecycle","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"title":"ApplicationRequestContextSource","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"abstract":[{"text":"RequestContext source for contexts created by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"text":".","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"topic","title":"BasicRequestContext","role":"symbol","navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/basicrequestcontext","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","kind":"article","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","title":"Persistent data","role":"article","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"title":"LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","abstract":[],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","title":"Router","role":"article","url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","type":"topic","title":"Response Encoding","role":"article","url":"\/documentation\/hummingbird\/responseencoding","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"title":"AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdauth","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","title":"Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"code":"Responder","type":"codeVoice"},{"type":"text","text":" that will follow these rules."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"text":"Router","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"url":"\/documentation\/hummingbird\/serverprotocol","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","title":"Server protocol","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","title":"CoreRequestContextStorage","type":"topic","role":"symbol","navigatorTitle":[{"text":"CoreRequestContextStorage","kind":"identifier"}],"url":"\/documentation\/hummingbird\/corerequestcontextstorage","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CoreRequestContextStorage","kind":"identifier"}],"abstract":[{"text":"Request context values required by Hummingbird itself.","type":"text"}]},"logo.png":{"alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","type":"topic","role":"collection","url":"\/documentation\/hummingbirdlambda","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/maxUploadSize":{"title":"maxUploadSize","role":"symbol","defaultImplementations":1,"url":"\/documentation\/hummingbird\/requestcontext\/maxuploadsize","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"maxUploadSize","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize","abstract":[{"type":"text","text":"Maximum size of request body allowed when decoding requests. If a request body"},{"type":"text","text":" "},{"type":"text","text":"that needs decoding is greater than this size then a Content Too Large (413)"},{"type":"text","text":" "},{"type":"text","text":"response is returned. This only applies to decoding requests."}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","title":"Testing","role":"article","url":"\/documentation\/hummingbird\/testing","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"topic","title":"Request Decoding","role":"article","url":"\/documentation\/hummingbird\/requestdecoding","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"title":"Application","url":"\/documentation\/hummingbird\/application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","title":"BasicAuthRequestContext","type":"topic","role":"symbol","navigatorTitle":[{"text":"BasicAuthRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAuthRequestContext","kind":"identifier"}],"abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","type":"topic","title":"RequestContextSource","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContextSource"}],"url":"\/documentation\/hummingbird\/requestcontextsource","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContextSource"}],"abstract":[{"type":"text","text":"Protocol for source of request contexts"}]}}}