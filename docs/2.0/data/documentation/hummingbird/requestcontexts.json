{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}]},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"reference"},{"text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"reference"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"]},{"type":"heading","level":2,"anchor":"Creating-a-context-type","text":"Creating a context type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"type":"text","text":" and a single member variable "},{"type":"codeVoice","code":"coreContext"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"reference"},{"text":" holds the base set of information needed by the Hummingbird ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" to process a ","type":"text"},{"code":"Request","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" takes one parameter of type ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":". ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":" is an associatedtype for the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" protocol and provides setup data for the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":". By default this is set to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","type":"reference"},{"text":" which provides access to the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that created the request.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"reference"},{"text":" your RequestContext will need to conform to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","type":"reference"},{"text":" and in that case the ","type":"text"},{"type":"codeVoice","code":"Source"},{"text":" is a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","type":"reference"},{"text":" which provide access to the ","type":"text"},{"type":"codeVoice","code":"Event"},{"text":" that triggered the lambda and the ","type":"text"},{"type":"codeVoice","code":"LambdaContext"},{"text":" from swift-aws-lambda-runtime.","type":"text"}]},{"type":"heading","level":2,"anchor":"EncodingDecoding","text":"Encoding\/Decoding"},{"type":"paragraph","inlineContent":[{"text":"By default request decoding and response encoding uses ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"text":" respectively. You can override this by setting the ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" member variables in your ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":". Below we are setting the ","type":"text"},{"type":"codeVoice","code":"requestDecoder"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" to a decode\/encode JSON with a ","type":"text"},{"type":"codeVoice","code":"dateDecodingStratrgy"},{"text":" of seconds since 1970. The default in Hummingbird is ISO8601.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"]},{"type":"heading","level":3,"anchor":"Limiting-memory-usage","text":"Limiting memory usage"},{"type":"paragraph","inlineContent":[{"text":"You can limit the amount of memory uploaded to your server when decoding requests by setting the value ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize","isActive":true},{"text":" in your ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":". If someone sends a request larger than the ","type":"text"},{"type":"codeVoice","code":"maxUploadSize"},{"text":" value defined the server will respond with a response with status code ","type":"text"},{"type":"codeVoice","code":"(413) Content too large"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"maxUploadSize"},{"text":" value defaults to 2MB. The request decoders provided with Hummingbird for JSON and URL Encoded Forms both use this limit.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can find out more about request decoding and response encoding in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Passing-data-forward","text":"Passing data forward"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now anything run after "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":" can access the "},{"type":"codeVoice","code":"additionalData"},{"type":"text","text":" set in "},{"type":"codeVoice","code":"MyMiddleware"},{"type":"text","text":"."}]},{"type":"heading","level":2,"anchor":"Using-RequestContextSource","text":"Using RequestContextSource"},{"type":"paragraph","inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true,"type":"reference"},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"]},{"type":"heading","level":3,"anchor":"RequestContext-transformation","text":"RequestContext transformation"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" can be transformed for the routes in a route group. The ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" you are converting to needs to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext","type":"reference","isActive":true},{"text":". This requires a parent context ie the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" you are converting from and a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","type":"reference","isActive":true},{"text":" function to perform the conversion.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Once you have defined how to perform the transform from your original ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" the conversion is added as follows","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let router = Router(context: MyRequestContext.self)","router.group(\"\/todos\", context: MyNewRequestContext.self)","    .put(use: createTodo)","    .get(use: listTodos)"]},{"type":"paragraph","inlineContent":[{"text":"Transforming the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" is a powerful way of enforcing compile-time guarantees that requests adhere to certain requirements. And by expressing these requirements as protocol conformances, you can compose these properties and flexibly express those requirements.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"An example of using a ","type":"text"},{"code":"ChildRequestContext","type":"codeVoice"},{"text":" would be to unwrap an optional authentication identity. Every route that uses that child request context with the unwrapped identity now knows for sure you have an authenticated identity.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct MyAuthenticatedRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        self.identity = try context.requireIdentity()","        ...","    }","}"]},{"type":"heading","level":2,"anchor":"Authentication-Middleware","text":"Authentication Middleware"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth"},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" does provide "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","isActive":true},{"type":"text","text":": a default implementation of "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":"."}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"metadata":{"role":"article","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Request Contexts"},"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"title":"HummingbirdLambda","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","url":"\/documentation\/hummingbirdlambda","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}],"navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CoreRequestContextStorage"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","url":"\/documentation\/hummingbird\/corerequestcontextstorage","type":"topic","kind":"symbol","title":"CoreRequestContextStorage","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide","role":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","title":"Router"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAuthRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"BasicAuthRequestContext","kind":"identifier"}],"title":"BasicAuthRequestContext","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"title":"Service Lifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext/init(context:)":{"title":"init(context:)","type":"topic","url":"\/documentation\/hummingbird\/childrequestcontext\/init(context:)","role":"symbol","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird19ChildRequestContextP06ParentD0Qa","text":"ParentContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","abstract":[{"type":"text","text":"Initialise RequestContext from source"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","type":"topic","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","title":"LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"role":"symbol","title":"AuthRequestContext","kind":"symbol","url":"\/documentation\/hummingbirdauth\/authrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"article","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","role":"article","type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"title":"Testing","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"article","kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"Logging, Metrics and Tracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"title":"LambdaRequestContextSource","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChildRequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"ChildRequestContext","kind":"identifier"}],"abstract":[{"text":"A RequestContext that can be initialized from another RequestContext.","type":"text"}],"title":"ChildRequestContext","kind":"symbol","url":"\/documentation\/hummingbird\/childrequestcontext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/responseencoding","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"title":"Response Encoding","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","role":"article","type":"topic","title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"BasicRequestContext","type":"topic","url":"\/documentation\/hummingbird\/basicrequestcontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","url":"\/documentation\/hummingbirdauth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"navigatorTitle":[{"kind":"identifier","text":"ApplicationRequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRequestContextSource"}],"title":"ApplicationRequestContextSource","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application"},{"type":"text","text":"."}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Decoding","url":"\/documentation\/hummingbird\/requestdecoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","type":"topic","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"kind":"symbol","role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","navigatorTitle":[{"kind":"identifier","text":"Application"}],"type":"topic","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"url":"\/documentation\/hummingbird\/application"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/maxUploadSize":{"role":"symbol","abstract":[{"type":"text","text":"Maximum size of request body allowed when decoding requests. If a request body"},{"type":"text","text":" "},{"type":"text","text":"that needs decoding is greater than this size then a Content Too Large (413)"},{"type":"text","text":" "},{"type":"text","text":"response is returned. This only applies to decoding requests."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/maxUploadSize","type":"topic","kind":"symbol","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"maxUploadSize","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"title":"maxUploadSize","url":"\/documentation\/hummingbird\/requestcontext\/maxuploadsize","defaultImplementations":1},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"navigatorTitle":[{"text":"RequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContextSource","kind":"identifier"}],"title":"RequestContextSource","url":"\/documentation\/hummingbird\/requestcontextsource","type":"topic","abstract":[{"text":"Protocol for source of request contexts","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","type":"topic","url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"kind":"identifier","text":"Router"}],"abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"text":" that will follow these rules.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"title":"Result Builder Router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"title":"Server protocol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","role":"article","type":"topic","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}]}}}