{"abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"metadata":{"role":"article","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","interfaceLanguage":"swift"},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"]},{"anchor":"Hummingbird-Server","title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"All request handlers and middleware handlers have two function parameters: the request and a context. The context provides contextual data for processing your request. The context parameter is a generic value which must conform to the protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"type":"text","text":". This requires a minimal set of values needed by Hummingbird to process your request. This includes a "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":", request decoder, response encoder and the resolved endpoint path."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you create your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"type":"text","text":" you provide the request context type you want to use. If you donâ€™t provide a context it will default to using "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","isActive":true,"type":"reference"},{"text":" the default implementation of a request context provided by Hummingbird.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let router = Router(context: MyRequestContext.self)"],"type":"codeListing"},{"anchor":"Creating-a-context-type","level":2,"text":"Creating a context type","type":"heading"},{"inlineContent":[{"type":"text","text":"As mentioned above your context type must conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"type":"text","text":". This requires an "},{"type":"codeVoice","code":"init(source:)"},{"type":"text","text":" and a single member variable "},{"type":"codeVoice","code":"coreContext"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","","    init(source: Source) {","        self.coreContext = .init(source: source)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage"},{"type":"text","text":" holds the base set of information needed by the Hummingbird "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" to process a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"init"},{"text":" takes one parameter of type ","type":"text"},{"type":"codeVoice","code":"Source"},{"text":". ","type":"text"},{"type":"codeVoice","code":"Source"},{"text":" is an associatedtype for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" protocol and provides setup data for the ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":". By default this is set to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","type":"reference"},{"text":" which provides access to the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that created the request.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you are using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","isActive":true,"type":"reference"},{"text":" your RequestContext will need to conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","isActive":true,"type":"reference"},{"text":" and in that case the ","type":"text"},{"code":"Source","type":"codeVoice"},{"text":" is a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","isActive":true,"type":"reference"},{"text":" which provide access to the ","type":"text"},{"code":"Event","type":"codeVoice"},{"text":" that triggered the lambda and the ","type":"text"},{"code":"LambdaContext","type":"codeVoice"},{"text":" from swift-aws-lambda-runtime.","type":"text"}],"type":"paragraph"},{"anchor":"EncodingDecoding","level":2,"text":"Encoding\/Decoding","type":"heading"},{"inlineContent":[{"type":"text","text":"By default request decoding and response encoding uses "},{"code":"JSONDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"JSONEncoder","type":"codeVoice"},{"type":"text","text":" respectively. You can override this by setting the "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" member variables in your "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":". Below we are setting the "},{"code":"requestDecoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" to a decode\/encode JSON with a "},{"code":"dateDecodingStratrgy","type":"codeVoice"},{"type":"text","text":" of seconds since 1970. The default in Hummingbird is ISO8601."}],"type":"paragraph"},{"syntax":"swift","code":["struct MyRequestContext: RequestContext {","    \/\/\/ Set request decoder to be JSONDecoder with alternate dataDecodingStrategy","    var requestDecoder: MyDecoder {","        var decoder = JSONDecoder()","        decoder.dateEncodingStrategy = .secondsSince1970","        return decoder","    }","    \/\/\/ Set response encoder to be JSONEncode with alternate dataDecodingStrategy","    var responseEncoder: MyEncoder {","        var encoder = JSONEncoder()","        encoder.dateEncodingStrategy = .secondsSince1970","        return encoder","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can find out more about request decoding and response encoding in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Passing-data-forward","level":2,"text":"Passing data forward","type":"heading"},{"inlineContent":[{"type":"text","text":"The other reason for using a custom context is to pass data you have extracted in a middleware to subsequent middleware or the route handler."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Example request context with an additional field","struct MyRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    var additionalData: String?","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.additionalData = nil","    }","}","","\/\/\/ Middleware that sets the additional field in ","struct MyMiddleware: MiddlewareProtocol {","    func handle(","        _ request: Request, ","        context: MyRequestContext, ","        next: (Request, MyRequestContext) async throws -> Response","    ) async throws -> Response {","        var context = context","        context.additionalData = getData(request)","        return try await next(request, context)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now anything run after "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":" can access the "},{"code":"additionalData","type":"codeVoice"},{"type":"text","text":" set in "},{"code":"MyMiddleware","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Using-RequestContextSource","level":2,"text":"Using RequestContextSource","type":"heading"},{"inlineContent":[{"text":"You can also use the RequestContext to store information from the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","isActive":true,"type":"reference"},{"text":". If you are running a Hummingbird server then this contains the Swift NIO ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that generated the request. Below is an example of extracting the remote IP from the Channel and passing it to an endpoint.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ RequestContext that includes a copy of the Channel that created it","struct AppRequestContext: RequestContext {","    var coreContext: CoreRequestContextStorage","    let channel: Channel","","    init(source: Source) {","        self.coreContext = .init(source: source)","        self.channel = source.channel","    }","","    \/\/\/ Extract Remote IP from Channel","    var remoteAddress: SocketAddress? { self.channel.remoteAddress }","}","","let router = Router(context: AppRequestContext.self)","router.get(\"ip\") { _, context in","    guard let ip = context.remoteAddress else { throw HTTPError(.badRequest) }","    return \"Your IP is \\(ip)\"","}"],"type":"codeListing"},{"anchor":"Authentication-Middleware","level":2,"text":"Authentication Middleware","type":"heading"},{"inlineContent":[{"type":"text","text":"The most obvious example of this is passing user authentication information forward. The authentication framework from "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","isActive":true},{"type":"text","text":" makes use of this. If you want to use the authentication and sessions middleware your context will also need to conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["public struct MyRequestContext: AuthRequestContext {","    public var coreContext: CoreRequestContextStorage","    \/\/ required by AuthRequestContext","    public var identity: User?","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.identity = nil","    }","}"],"type":"codeListing"},{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"reference"},{"text":" does provide ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"reference"},{"text":": a default implementation of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CoreRequestContextStorage":{"navigatorTitle":[{"kind":"identifier","text":"CoreRequestContextStorage"}],"kind":"symbol","title":"CoreRequestContextStorage","url":"\/documentation\/hummingbird\/corerequestcontextstorage","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CoreRequestContextStorage"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CoreRequestContextStorage","type":"topic","abstract":[{"type":"text","text":"Request context values required by Hummingbird itself."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/router","navigatorTitle":[{"text":"Router","kind":"identifier"}],"title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"kind":"article","title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"article","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"kind":"symbol","title":"AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"topic","abstract":[{"text":"Protocol that all request contexts should conform to if they want to support","type":"text"},{"text":" ","type":"text"},{"text":"authentication middleware","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"kind":"article","title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","role":"article","url":"\/documentation\/hummingbird\/errorhandling","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContextSource":{"navigatorTitle":[{"kind":"identifier","text":"RequestContextSource"}],"kind":"symbol","title":"RequestContextSource","url":"\/documentation\/hummingbird\/requestcontextsource","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContextSource"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContextSource","type":"topic","abstract":[{"type":"text","text":"Protocol for source of request contexts"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationRequestContextSource":{"abstract":[{"type":"text","text":"RequestContext source for contexts created by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true},{"type":"text","text":"."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ApplicationRequestContextSource","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ApplicationRequestContextSource","kind":"identifier"}],"title":"ApplicationRequestContextSource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationRequestContextSource","role":"symbol","url":"\/documentation\/hummingbird\/applicationrequestcontextsource","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Result Builder Router","url":"\/documentation\/hummingbird\/routerbuilderguide","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","type":"topic","abstract":[{"text":"Building your router using a result builder.","type":"text"}]},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"url":"\/documentation\/hummingbirdauth","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","title":"Service Lifecycle","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"title":"Server protocol","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"type":"topic","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/BasicAuthRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"BasicAuthRequestContext"}],"kind":"symbol","title":"BasicAuthRequestContext","url":"\/documentation\/hummingbirdauth\/basicauthrequestcontext","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/BasicAuthRequestContext","type":"topic","abstract":[{"text":"Implementation of a basic request context that supports authenticators","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"kind":"article","title":"Response Encoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","role":"article","url":"\/documentation\/hummingbird\/responseencoding","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"navigatorTitle":[{"text":"BasicRequestContext","kind":"identifier"}],"kind":"symbol","title":"BasicRequestContext","url":"\/documentation\/hummingbird\/basicrequestcontext","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"topic","abstract":[{"text":"Implementation of a basic request context that supports everything the Hummingbird library needs","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","title":"Logging, Metrics and Tracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Testing","url":"\/documentation\/hummingbird\/testing","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","title":"LambdaRequestContextSource","role":"symbol","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"kind":"symbol","title":"LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","type":"topic","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","url":"\/documentation\/hummingbird\/application","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"kind":"symbol","type":"topic","title":"Application","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"navigatorTitle":[{"kind":"identifier","text":"Application"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","title":"Request Decoding","role":"article","type":"topic","url":"\/documentation\/hummingbird\/requestdecoding","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Router","url":"\/documentation\/hummingbird\/routerguide","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","url":"\/documentation\/hummingbirdlambda","role":"collection","title":"HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"title":"RequestContext","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}],"navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","url":"\/documentation\/hummingbird\/requestcontext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","role":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Middleware","url":"\/documentation\/hummingbird\/middlewareguide","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]}}}