{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"],"anchor":"Related-Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"title":"Hummingbird Server","anchor":"Hummingbird-Server"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"text":" to encode responses. If your router handler returns a type conforming to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","type":"reference","isActive":true},{"type":"text","text":" this will get converted to a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"type":"text","text":" using the encoder "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece"},{"text":" parameter of your ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"text":". By default this is set to create a JSON Response using ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" that comes with Swift Foundation."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct User: ResponseEncodable {","    let email: String","    let name: String","}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"inlineContent":[{"type":"text","text":"With the above code and the default JSON encoder you will get a response with header "},{"type":"codeVoice","code":"content-type"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"application\/json; charset=utf-8"},{"type":"text","text":" and body"}],"type":"paragraph"},{"type":"codeListing","syntax":"jsonb","code":["{\"email\":\"js@email.com\",\"name\":\"John Smith\"}"]},{"text":"Date encoding","type":"heading","level":3,"anchor":"Date-encoding"},{"type":"paragraph","inlineContent":[{"text":"As mentioned above the default is to use ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" for encoding "},{"type":"codeVoice","code":"Response"},{"text":" bodies. This default is also set to use ISO 8601 dates in the form ","type":"text"},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"text":". If you are decoding responses from a Hummingbird server in a Swift app using ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" you can parse dates using ISO 8601 by setting "},{"code":"JSONDecoder.dateDecodingStrategy","type":"codeVoice"},{"type":"text","text":" to "},{"code":".iso8601","type":"codeVoice"},{"text":".","type":"text"}]},{"level":2,"type":"heading","anchor":"Setting-up-a-custom-encoder","text":"Setting up a custom encoder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own "},{"code":"responseEncoder","type":"codeVoice"},{"type":"text","text":" in a custom request context. Your response encoder needs to conform to the "},{"type":"codeVoice","code":"ResponseEncoder"},{"text":" protocol which has one requirement ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true},{"text":". For instance ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference","isActive":true},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},{"text":" to find out more about request contexts.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct URLEncodedRequestContext: RequestContext {","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"]},{"level":2,"text":"Encoding based on Request headers","anchor":"Encoding-based-on-Request-headers","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the original request is supplied to the "},{"code":"ResponseEncoder","type":"codeVoice"},{"type":"text","text":". You can make encoding decisions based on headers in the request. In the example below we are encoding using either the "},{"type":"codeVoice","code":"JSONEncoder"},{"text":" or ","type":"text"},{"code":"URLEncodedFormEncoder","type":"codeVoice"},{"text":" based on the “accept” header from the request.","type":"text"}]},{"code":["struct MyResponsEncoder: ResponseEncoder {","    func encode(_ value: some Encodable, from request: Request, context: some RequestContext) throws -> Response {","        guard let header = request.headers[values: .accept].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONEncoder().encode(value, from: request, context: context)","        case .applicationUrlEncoded:","            return try URLEncodedFormEncoder().encode(value, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"}]}],"kind":"article","metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","title":"Response Encoding","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"topic","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"title":"URLEncodedFormEncoder","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"url":"\/documentation\/hummingbird\/urlencodedformencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier","text":"Request"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Response","preciseIdentifier":"s:15HummingbirdCore8ResponseV","kind":"typeIdentifier"}],"kind":"symbol","title":"encode(_:from:context:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"abstract":[{"text":"Encode value returned by handler to request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","url":"\/documentation\/index","title":"Hummingbird Documentation","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}]},"logo.png":{"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","title":"Request","url":"\/documentation\/hummingbirdcore\/request","abstract":[{"text":"Holds all the values required to process a request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder-3mece":{"title":"responseEncoder","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"responseEncoder","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa","text":"Encoder"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder-3mece","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder-3mece","required":true,"abstract":[{"text":"Response encoder","type":"text"}],"defaultImplementations":1},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","title":"Error Handling","kind":"article","role":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","title":"Migrating to Hummingbird v2","kind":"article","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"navigatorTitle":[{"text":"ResponseEncodable","kind":"identifier"}],"abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"type":"codeVoice","code":"Application.encoder"},{"type":"text","text":"."}],"title":"ResponseEncodable","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncodable"}],"url":"\/documentation\/hummingbird\/responseencodable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","title":"Request Contexts","kind":"article","role":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","title":"Middleware","kind":"article","role":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","kind":"symbol","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Response","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Response"}],"type":"topic","url":"\/documentation\/hummingbirdcore\/response","title":"Response"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"url":"\/documentation\/hummingbird\/requestcontext","type":"topic","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"title":"Router","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/routerguide","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","title":"Server protocol","images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","type":"topic","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"abstract":[{"text":"protocol for encoders generating a Response","type":"text"}],"title":"ResponseEncoder","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResponseEncoder"}],"url":"\/documentation\/hummingbird\/responseencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"title":"Testing","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"title":"Request Decoding","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/requestdecoding","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"title":"Result Builder Router","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/routerbuilderguide","type":"topic","role":"article"}}}