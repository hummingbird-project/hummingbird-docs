{"kind":"article","metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Response Encoding","role":"article"},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"]},{"anchor":"Hummingbird-Server","title":"Hummingbird Server","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" to encode responses. If your router handler returns a type conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},{"type":"text","text":" this will get converted to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"type":"text","text":" using the encoder "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder"},{"type":"text","text":" parameter of your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". By default this is set to create a JSON Response using "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" that comes with Swift Foundation."}],"type":"paragraph"},{"code":["struct User: ResponseEncodable {","    let email: String","    let name: String","}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"With the above code and the default JSON encoder you will get a response with header ","type":"text"},{"type":"codeVoice","code":"content-type"},{"text":" set to ","type":"text"},{"type":"codeVoice","code":"application\/json; charset=utf-8"},{"text":" and body","type":"text"}],"type":"paragraph"},{"code":["{\"email\":\"js@email.com\",\"name\":\"John Smith\"}"],"type":"codeListing","syntax":"jsonb"},{"text":"Date encoding","level":3,"type":"heading","anchor":"Date-encoding"},{"inlineContent":[{"type":"text","text":"As mentioned above the default is to use "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" for encoding "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" bodies. This default is also set to use ISO 8601 dates in the form "},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"type":"text","text":". If you are decoding responses from a Hummingbird server in a Swift app using "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" you can parse dates using ISO 8601 by setting "},{"type":"codeVoice","code":"JSONDecoder.dateDecodingStrategy"},{"type":"text","text":" to "},{"type":"codeVoice","code":".iso8601"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Setting up a custom encoder","level":2,"type":"heading","anchor":"Setting-up-a-custom-encoder"},{"inlineContent":[{"text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" in a custom request context. Your response encoder needs to conform to the ","type":"text"},{"type":"codeVoice","code":"ResponseEncoder"},{"text":" protocol which has one requirement ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","type":"reference"},{"text":". For instance ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" also includes a encoder for URL encoded form data. Below you can see a custom request context setup to use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"reference"},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"reference"},{"text":" to find out more about request contexts.","type":"text"}],"type":"paragraph"},{"code":["struct URLEncodedRequestContext: RequestContext {","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing","syntax":"swift"},{"text":"Encoding based on Request headers","level":2,"type":"heading","anchor":"Encoding-based-on-Request-headers"},{"inlineContent":[{"text":"Because the original request is supplied to the ","type":"text"},{"code":"ResponseEncoder","type":"codeVoice"},{"text":". You can make encoding decisions based on headers in the request. In the example below we are encoding using either the ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"URLEncodedFormEncoder","type":"codeVoice"},{"text":" based on the “accept” header from the request.","type":"text"}],"type":"paragraph"},{"code":["struct MyResponsEncoder: ResponseEncoder {","    func encode(_ value: some Encodable, from request: Request, context: some RequestContext) throws -> Response {","        guard let header = request.headers[values: .accept].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONEncoder().encode(value, from: request, context: context)","        case .applicationUrlEncoded:","            return try URLEncodedFormEncoder().encode(value, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"type":"topic","kind":"article","role":"article","title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"type":"topic","title":"Result Builder Router","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Building your router using a result builder."}],"url":"\/documentation\/hummingbird\/routerbuilderguide","role":"article"},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","title":"Error Handling","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"title":"Response","navigatorTitle":[{"kind":"identifier","text":"Response"}],"url":"\/documentation\/hummingbirdcore\/response","role":"symbol","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"title":"RequestContext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"url":"\/documentation\/hummingbird\/requestcontext","role":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncodable","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ResponseEncodable","kind":"identifier"}],"title":"ResponseEncodable","url":"\/documentation\/hummingbird\/responseencodable","abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"code":"Application.encoder","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"role":"symbol","title":"URLEncodedFormEncoder","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/urlencodedformencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"type":"topic","kind":"article","role":"collectionGroup","title":"Server protocol","url":"\/documentation\/hummingbird\/serverprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:SE","text":"Encodable"},{"kind":"text","text":", "},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore8ResponseV","text":"Response"}],"role":"symbol","type":"topic","title":"encode(_:from:context:)","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","required":true,"kind":"symbol","abstract":[{"type":"text","text":"Encode value returned by handler to ``HummingbirdCore\/Response`"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","title":"Persistent data","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"url":"\/documentation\/hummingbird\/persistentdata","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","title":"Middleware","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"url":"\/documentation\/hummingbird\/middlewareguide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","title":"Router","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/routerguide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder","type":"topic","abstract":[{"text":"Response encoder","type":"text"}],"kind":"symbol","role":"symbol","title":"responseEncoder","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"responseEncoder","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Encoder","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa"}],"defaultImplementations":1,"url":"\/documentation\/hummingbird\/requestcontext\/responseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"type":"topic","kind":"article","role":"article","title":"Testing","url":"\/documentation\/hummingbird\/testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","kind":"article","role":"collection","title":"Hummingbird Documentation","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncoder"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponseEncoder"}],"title":"ResponseEncoder","url":"\/documentation\/hummingbird\/responseencoder","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic","kind":"article","role":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"type":"topic","title":"Service Lifecycle","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"type":"topic","kind":"article","role":"article","title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"type":"topic","title":"Request Decoding","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"url":"\/documentation\/hummingbird\/requestdecoding","role":"article"}}}