{"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"],"anchor":"Related-Documentation"},{"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","interfaceLanguage":"swift"},"sections":[],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to encode responses. If your router handler returns a type conforming to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},{"text":" this will get converted to a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"text":" using the encoder ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder"},{"text":" parameter of your ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"text":". By default this is set to create a JSON Response using ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" that comes with Swift Foundation.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct User: ResponseEncodable {","    let email: String","    let name: String","}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"With the above code and the default JSON encoder you will get a response with header "},{"code":"content-type","type":"codeVoice"},{"type":"text","text":" set to "},{"code":"application\/json; charset=utf-8","type":"codeVoice"},{"type":"text","text":" and body"}],"type":"paragraph"},{"syntax":"jsonb","code":["{\"email\":\"js@email.com\",\"name\":\"John Smith\"}"],"type":"codeListing"},{"level":3,"anchor":"Date-encoding","text":"Date encoding","type":"heading"},{"inlineContent":[{"type":"text","text":"As mentioned above the default is to use "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" for encoding "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" bodies. This default is also set to use ISO 8601 dates in the form "},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"type":"text","text":". If you are decoding responses from a Hummingbird server in a Swift app using "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" you can parse dates using ISO 8601 by setting "},{"type":"codeVoice","code":"JSONDecoder.dateDecodingStrategy"},{"type":"text","text":" to "},{"type":"codeVoice","code":".iso8601"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Setting-up-a-custom-encoder","text":"Setting up a custom encoder","type":"heading"},{"inlineContent":[{"type":"text","text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own "},{"type":"codeVoice","code":"responseEncoder"},{"type":"text","text":" in a custom request context. Your response encoder needs to conform to the "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":" protocol which has one requirement "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true,"type":"reference"},{"type":"text","text":". For instance "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" also includes a encoder for URL encoded form data. Below you can see a custom request context setup to use "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","isActive":true,"type":"reference"},{"type":"text","text":" for response encoding. The router is then initialized with this context. Read "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true,"type":"reference"},{"type":"text","text":" to find out more about request contexts."}],"type":"paragraph"},{"syntax":"swift","code":["struct URLEncodedRequestContext: RequestContext {","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"type":"codeListing"},{"level":2,"anchor":"Encoding-based-on-Request-headers","text":"Encoding based on Request headers","type":"heading"},{"inlineContent":[{"text":"Because the original request is supplied to the ","type":"text"},{"code":"ResponseEncoder","type":"codeVoice"},{"text":". You can make encoding decisions based on headers in the request. In the example below we are encoding using either the ","type":"text"},{"code":"JSONEncoder","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"URLEncodedFormEncoder","type":"codeVoice"},{"text":" based on the “accept” header from the request.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MyResponsEncoder: ResponseEncoder {","    func encode(_ value: some Encodable, from request: Request, context: some RequestContext) throws -> Response {","        guard let header = request.headers[values: .accept].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONEncoder().encode(value, from: request, context: context)","        case .applicationUrlEncoded:","            return try URLEncodedFormEncoder().encode(value, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"type":"codeListing"}]}],"metadata":{"role":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"Response Encoding","roleHeading":"Article"},"abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","type":"topic","title":"Router","role":"article","url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","title":"Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"topic","title":"Request Decoding","role":"article","url":"\/documentation\/hummingbird\/requestdecoding","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"title":"URLEncodedFormEncoder","url":"\/documentation\/hummingbird\/urlencodedformencoder","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"abstract":[{"type":"text","text":"The wrapper struct for encoding Codable classes to URL encoded form data"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"type":"text","text":", and is therefore instantiated alongside the request."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","kind":"symbol","title":"RequestContext","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"kind":"symbol","title":"Response","url":"\/documentation\/hummingbirdcore\/response","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","title":"Middleware","type":"topic","role":"article","url":"\/documentation\/hummingbird\/middlewareguide","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","url":"\/documentation\/hummingbird\/errorhandling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","title":"Service Lifecycle","role":"article","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"title":"encode(_:from:context:)","role":"symbol","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","kind":"typeIdentifier","text":"RequestContext"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdCore8ResponseV","kind":"typeIdentifier","text":"Response"}],"type":"topic","abstract":[{"text":"Encode value returned by handler to ``HummingbirdCore\/Response`","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","kind":"symbol","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"url":"\/documentation\/hummingbird\/serverprotocol","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","title":"Server protocol","images":[{"identifier":"logo.png","type":"icon"}]},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","kind":"article","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","title":"Persistent data","role":"article","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"title":"Result Builder Router","url":"\/documentation\/hummingbird\/routerbuilderguide","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"type":"text","text":"Building your router using a result builder."}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","type":"topic","title":"ResponseEncoder","role":"symbol","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/responseencoder","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}],"abstract":[{"type":"text","text":"protocol for encoders generating a Response"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","type":"topic","title":"ResponseEncodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResponseEncodable"}],"url":"\/documentation\/hummingbird\/responseencodable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncodable"}],"abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"code":"Application.encoder","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","title":"Testing","role":"article","url":"\/documentation\/hummingbird\/testing","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder":{"defaultImplementations":1,"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder","title":"responseEncoder","type":"topic","abstract":[{"text":"Response encoder","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa"}],"required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"title":"Request Contexts","url":"\/documentation\/hummingbird\/requestcontexts","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","role":"article"}}}