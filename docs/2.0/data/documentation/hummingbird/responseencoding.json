{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to encode responses. If your router handler returns a type conforming to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},{"type":"text","text":" this will get converted to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"type":"text","text":" using the encoder "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder"},{"type":"text","text":" parameter of your "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". By default this is set to create a JSON Response using "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" that comes with Swift Foundation."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct User: ResponseEncodable {","    let email: String","    let name: String","}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"]},{"inlineContent":[{"type":"text","text":"With the above code and the default JSON encoder you will get a response with header "},{"code":"content-type","type":"codeVoice"},{"text":" set to ","type":"text"},{"code":"application\/json; charset=utf-8","type":"codeVoice"},{"text":" and body","type":"text"}],"type":"paragraph"},{"syntax":"jsonb","type":"codeListing","code":["{\"email\":\"js@email.com\",\"name\":\"John Smith\"}"]},{"text":"Date encoding","level":3,"type":"heading","anchor":"Date-encoding"},{"inlineContent":[{"text":"As mentioned above the default is to use ","type":"text"},{"type":"codeVoice","code":"JSONEncoder"},{"text":" for encoding ","type":"text"},{"type":"codeVoice","code":"Response"},{"text":" bodies. This default is also set to use ISO 8601 dates in the form ","type":"text"},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"text":". If you are decoding responses from a Hummingbird server in a Swift app using ","type":"text"},{"type":"codeVoice","code":"JSONDecoder"},{"text":" you can parse dates using ISO 8601 by setting ","type":"text"},{"type":"codeVoice","code":"JSONDecoder.dateDecodingStrategy"},{"text":" to ","type":"text"},{"type":"codeVoice","code":".iso8601"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Setting up a custom encoder","level":2,"type":"heading","anchor":"Setting-up-a-custom-encoder"},{"inlineContent":[{"text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own ","type":"text"},{"code":"responseEncoder","type":"codeVoice"},{"text":" in a custom request context. Your response encoder needs to conform to the ","type":"text"},{"code":"ResponseEncoder","type":"codeVoice"},{"text":" protocol which has one requirement ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)"},{"text":". For instance ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" also includes a encoder for URL encoded form data. Below you can see a custom request context setup to use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder"},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},{"text":" to find out more about request contexts.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct URLEncodedRequestContext: RequestContext {","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"]},{"text":"Encoding based on Request headers","level":2,"type":"heading","anchor":"Encoding-based-on-Request-headers"},{"inlineContent":[{"type":"text","text":"Because the original request is supplied to the "},{"type":"codeVoice","code":"ResponseEncoder"},{"type":"text","text":". You can make encoding decisions based on headers in the request. In the example below we are encoding using either the "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"URLEncodedFormEncoder"},{"type":"text","text":" based on the “accept” header from the request."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyResponsEncoder: ResponseEncoder {","    func encode(_ value: some Encodable, from request: Request, context: some RequestContext) throws -> Response {","        guard let header = request.headers[values: .accept].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONEncoder().encode(value, from: request, context: context)","        case .applicationUrlEncoded:","            return try URLEncodedFormEncoder().encode(value, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"]}]}],"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","roleHeading":"Article","title":"Response Encoding"},"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"]},{"title":"Hummingbird Server","generated":true,"anchor":"Hummingbird-Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/requestdecoding","title":"Request Decoding","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder","kind":"symbol","required":true,"abstract":[{"type":"text","text":"Response encoder"}],"role":"symbol","defaultImplementations":1,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa","text":"Encoder"}],"title":"responseEncoder","type":"topic","url":"\/documentation\/hummingbird\/requestcontext\/responseencoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"url":"\/documentation\/hummingbird\/routerbuilderguide","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Building your router using a result builder."}],"role":"article","title":"Result Builder Router","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/routerguide","title":"Router","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"role":"article","title":"Error Handling","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"title":"URLEncodedFormEncoder","url":"\/documentation\/hummingbird\/urlencodedformencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"topic","abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"url":"\/documentation\/hummingbirdcore\/response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"navigatorTitle":[{"kind":"identifier","text":"Response"}],"kind":"symbol","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"type":"topic","title":"Response","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","kind":"article","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"title":"Hummingbird Documentation","role":"collection"},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"role":"symbol","required":true,"type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","title":"encode(_:from:context:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RequestContext","preciseIdentifier":"s:11Hummingbird14RequestContextP"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Response","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore8ResponseV"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","abstract":[{"text":"Encode value returned by handler to ``HummingbirdCore\/Response`","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article","title":"Migrating to Hummingbird v2","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/requestcontexts","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"role":"article","title":"Persistent data","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","title":"Request","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"navigatorTitle":[{"text":"Request","kind":"identifier"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/middlewareguide","title":"Middleware","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"title":"Server protocol","url":"\/documentation\/hummingbird\/serverprotocol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","type":"topic","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"kind":"article","role":"collectionGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article","title":"Testing","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","title":"RequestContext","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"url":"\/documentation\/hummingbird\/responseencoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"title":"ResponseEncoder","navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","title":"Logging, Metrics and Tracing","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"title":"ResponseEncodable","url":"\/documentation\/hummingbird\/responseencodable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","abstract":[{"type":"text","text":"Protocol for encodable object that can generate a response. The router will encode"},{"type":"text","text":" "},{"type":"text","text":"the response using the encoder stored in "},{"code":"Application.encoder","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseEncodable"}],"navigatorTitle":[{"kind":"identifier","text":"ResponseEncodable"}]}}}