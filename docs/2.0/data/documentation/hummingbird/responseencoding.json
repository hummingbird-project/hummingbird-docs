{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"generated":true,"anchor":"Hummingbird-Server","title":"Hummingbird Server"}],"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Hummingbird uses "},{"type":"codeVoice","code":"Codable"},{"text":" to encode responses. If your router handler returns a type conforming to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},{"text":" this will get converted to a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"text":" using the encoder ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder"},{"text":" parameter of your ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":". By default this is set to create a JSON Response using "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" that comes with Swift Foundation."}],"type":"paragraph"},{"code":["struct User: ResponseEncodable {","    let email: String","    let name: String","}","","router.get(\"user\") { request, _ -> User in","    let user = User(email: \"js@email.com\", name: \"John Smith\")","    return user","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"With the above code and the default JSON encoder you will get a response with header ","type":"text"},{"type":"codeVoice","code":"content-type"},{"type":"text","text":" set to "},{"type":"codeVoice","code":"application\/json; charset=utf-8"},{"type":"text","text":" and body"}],"type":"paragraph"},{"code":["{\"email\":\"js@email.com\",\"name\":\"John Smith\"}"],"syntax":"jsonb","type":"codeListing"},{"level":3,"anchor":"Date-encoding","text":"Date encoding","type":"heading"},{"inlineContent":[{"type":"text","text":"As mentioned above the default is to use "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" for encoding "},{"type":"codeVoice","code":"Response"},{"type":"text","text":" bodies. This default is also set to use ISO 8601 dates in the form "},{"type":"codeVoice","code":"YYYY-MM-DDThh:mm:ssZ"},{"type":"text","text":". If you are decoding responses from a Hummingbird server in a Swift app using "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":" you can parse dates using ISO 8601 by setting "},{"type":"codeVoice","code":"JSONDecoder.dateDecodingStrategy"},{"type":"text","text":" to "},{"type":"codeVoice","code":".iso8601"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Setting-up-a-custom-encoder","text":"Setting up a custom encoder","type":"heading"},{"inlineContent":[{"text":"If you want to use a different format, a different JSON encoder or want to support multiple formats, you need to setup you own ","type":"text"},{"type":"codeVoice","code":"responseEncoder"},{"text":" in a custom request context. Your response encoder needs to conform to the ","type":"text"},{"type":"codeVoice","code":"ResponseEncoder"},{"text":" protocol which has one requirement ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","isActive":true},{"text":". For instance ","type":"text"},{"type":"codeVoice","code":"Hummingbird"},{"text":" also includes a encoder for URL encoded form data. Below you can see a custom request context setup to use ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","isActive":true},{"text":" for response encoding. The router is then initialized with this context. Read ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","isActive":true},{"text":" to find out more about request contexts.","type":"text"}],"type":"paragraph"},{"code":["struct URLEncodedRequestContext: RequestContext {","    var responseEncoder: URLEncodedFormEncoder { .init() }","    ...","}","let router = Router(context: URLEncodedRequestContext.self)"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"Encoding-based-on-Request-headers","text":"Encoding based on Request headers","type":"heading"},{"inlineContent":[{"type":"text","text":"Because the original request is supplied to the "},{"code":"ResponseEncoder","type":"codeVoice"},{"type":"text","text":". You can make encoding decisions based on headers in the request. In the example below we are encoding using either the "},{"code":"JSONEncoder","type":"codeVoice"},{"type":"text","text":" or "},{"code":"URLEncodedFormEncoder","type":"codeVoice"},{"type":"text","text":" based on the “accept” header from the request."}],"type":"paragraph"},{"code":["struct MyResponsEncoder: ResponseEncoder {","    func encode(_ value: some Encodable, from request: Request, context: some RequestContext) throws -> Response {","        guard let header = request.headers[values: .accept].first else { throw HTTPError(.badRequest) }","        guard let mediaType = MediaType(from: header) else { throw HTTPError(.badRequest) }","        switch mediaType {","        case .applicationJson:","            return try JSONEncoder().encode(value, from: request, context: context)","        case .applicationUrlEncoded:","            return try URLEncodedFormEncoder().encode(value, from: request, context: context)","        default:","            throw HTTPError(.badRequest)","        }","    }","}"],"syntax":"swift","type":"codeListing"}]}],"metadata":{"roleHeading":"Article","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","title":"Response Encoding"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","title":"RequestContext","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/responseencodable","role":"symbol","abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"text":"the response using the encoder stored in ","type":"text"},{"code":"Application.encoder","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncodable","kind":"identifier"}],"navigatorTitle":[{"text":"ResponseEncodable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","title":"ResponseEncodable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder/encode(_:from:context:)":{"type":"topic","title":"encode(_:from:context:)","url":"\/documentation\/hummingbird\/responseencoder\/encode(_:from:context:)","role":"symbol","kind":"symbol","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird14RequestContextP","text":"RequestContext","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:15HummingbirdCore8ResponseV","kind":"typeIdentifier","text":"Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder\/encode(_:from:context:)","abstract":[{"type":"text","text":"Encode value returned by handler to ``HummingbirdCore\/Response`"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"title":"Persistent data","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"kind":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2","role":"article","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","url":"\/documentation\/hummingbird\/serverprotocol","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}],"title":"Server protocol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","type":"topic","url":"\/documentation\/index","role":"collection","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"url":"\/documentation\/hummingbirdcore\/response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"title":"Response","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Response"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"title":"Request","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","title":"Service Lifecycle","role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/URLEncodedFormEncoder":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URLEncodedFormEncoder","kind":"identifier"}],"url":"\/documentation\/hummingbird\/urlencodedformencoder","navigatorTitle":[{"text":"URLEncodedFormEncoder","kind":"identifier"}],"abstract":[{"text":"The wrapper struct for encoding Codable classes to URL encoded form data","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/URLEncodedFormEncoder","type":"topic","title":"URLEncodedFormEncoder","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"How to build errors for the server to return."}],"title":"Error Handling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","type":"topic","title":"Middleware","role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","title":"Request Contexts","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"url":"\/documentation\/hummingbird\/requestcontexts","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext/responseEncoder":{"url":"\/documentation\/hummingbird\/requestcontext\/responseencoder","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"responseEncoder"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird14RequestContextP7EncoderQa","kind":"typeIdentifier","text":"Encoder"}],"abstract":[{"text":"Response encoder","type":"text"}],"title":"responseEncoder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext\/responseEncoder","type":"topic","required":true,"role":"symbol","defaultImplementations":1,"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoder":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbird\/responseencoder","role":"symbol","abstract":[{"type":"text","text":"protocol for encoders generating a Response"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseEncoder","kind":"identifier"}],"navigatorTitle":[{"text":"ResponseEncoder","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoder","title":"ResponseEncoder"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/routerbuilderguide","type":"topic","title":"Result Builder Router","role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"text":"Building your router using a result builder.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"url":"\/documentation\/hummingbird\/testing","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/routerguide","type":"topic","title":"Router","role":"article","kind":"article","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"article","kind":"article","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"url":"\/documentation\/hummingbird\/requestdecoding","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","type":"topic","title":"Request Decoding","kind":"article","role":"article"}}}