{"kind":"article","sections":[],"abstract":[{"type":"text","text":"Example demonstrating how to setup one time passwords, using sessions."}],"seeAlsoSections":[{"anchor":"Examples","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample"],"generated":true,"title":"Examples"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The source code for this example can be found ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example starts with a standard username\/password login. There is a link to a signup screen where you can enter your name, email and password. When you return to the login screen you can use your email and password to access the main page. On the main page is a button to add an OTP token to your account. This links to a page consisting of a QR code generated from the OTP secret and a text input for you to verify your OTP password generation is correct. Use Apple Passwords or Google Authenticator to scan the QR code. Once verified you are allowed to press the button that adds the OTP secret to your account. From this point on when you login you will also be requested for your one time password."}]},{"anchor":"Database","type":"heading","text":"Database","level":2},{"type":"paragraph","inlineContent":[{"code":"PostgresNIO","type":"codeVoice"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true},{"type":"text","text":" are used in this example to access and store your persistent data. The example creates two tables and an index."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Table ","type":"text"},{"type":"codeVoice","code":"users"},{"text":" with columns ","type":"text"},{"type":"codeVoice","code":"id"},{"text":", ","type":"text"},{"type":"codeVoice","code":"name"},{"text":", ","type":"text"},{"type":"codeVoice","code":"email"},{"text":", ","type":"text"},{"type":"codeVoice","code":"passwordHash"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Table "},{"type":"codeVoice","code":"totp"},{"type":"text","text":" with columns "},{"type":"codeVoice","code":"user_id"},{"type":"text","text":" and "},{"type":"codeVoice","code":"secret"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Index for "},{"type":"codeVoice","code":"email"},{"type":"text","text":" in table "},{"type":"codeVoice","code":"users"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find the migrations for these in the "},{"type":"reference","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Migrations","isActive":true},{"type":"text","text":". These are added to the migration list in the "},{"type":"codeVoice","code":"buildApplication"},{"type":"text","text":" function. We need to apply these migrations before the server starts but after the PostgresClient connection manager background process has started. This can be done by calling the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/apply(client:groups:options:logger:dryRun:)","isActive":true},{"type":"text","text":" function inside a closure sent to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"On top of the two tables created, the example uses the postgres driver ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","type":"reference","isActive":true},{"text":" for the persist framework to store session keys. You will find out more about the persist framework at ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"reference","isActive":true},{"text":" and there is a guide to the migration support in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There is a docker-compose file available to run a local Postgres database. You can run the Postgres database using","type":"text"}]},{"type":"codeListing","syntax":null,"code":["docker compose up"]},{"anchor":"Walkthrough","type":"heading","text":"Walkthrough","level":2},{"anchor":"Controllers","type":"heading","text":"Controllers","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example has three controllers"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/UserController.swift","type":"reference"},{"type":"text","text":": API for completing user creation\/login\/logout"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/WebController.swift","isActive":true,"type":"reference"},{"text":": The app uses ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","isActive":true,"type":"reference"},{"text":" to serve most web pages but this controller is used to create the dynamic main web page.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/TOTPController.swift","isActive":true,"type":"reference"},{"text":": API for starting, verifying and completing TOTP creation.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Authentication","type":"heading","text":"Authentication","level":3},{"type":"paragraph","inlineContent":[{"text":"For authentication purposes the example uses ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator"},{"text":" to provide a standard username\/password login and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator"},{"text":" for authenticating based off a session id. Both of these require a repository type that defines how to access a user based off either a username or session identifier. We create a protocol ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Repositories\/UserRepository.swift"},{"text":" for the repository and conform it to the relevant protocols to be used with the basic and session authenticator middleware. And then we implement a concrete version of this protocol that uses ","type":"text"},{"type":"codeVoice","code":"PostgresNIO"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To use the ","type":"text"},{"code":"SessionAuthenticator","type":"codeVoice"},{"text":" we need to add the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","type":"reference"},{"text":". This extracts session id from the request and responds with ","type":"text"},{"code":"set-cookie","type":"codeVoice"},{"text":" headers if the session needs updated. The session middleware converts the session id into an associated session type. In the case of this example the session type consists of two possible authentication states, either ","type":"text"},{"code":"authenticated","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"challenge","type":"codeVoice"},{"text":". The only challenge available is the TOTP. A user is only considered to be authenticated is the session state is ","type":"text"},{"code":"authenticated","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To convert the session state from ","type":"text"},{"code":"challenge","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"authenticated","type":"codeVoice"},{"text":" we have included a ","type":"text"},{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Middleware\/TOTPMiddleware.swift","type":"reference","isActive":true},{"text":". This will extract the TOTP token from the request headers and then compare it to the TOTP tokens generated by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdOTP\/TOTP","type":"reference","isActive":true},{"text":". If one of them is equal then we change the session state to ","type":"text"},{"code":"authenticated","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"RequestContexts","type":"heading","text":"RequestContexts","level":3},{"type":"paragraph","inlineContent":[{"text":"This example uses multiple ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"text":". If starts with ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","type":"reference","isActive":true},{"text":" which provides the functionality for a basic Hummingbird application, but does not support authentication or sessions. When we call any route that requires authentication or sessions we convert this context to a ","type":"text"},{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/RequestContext.swift","type":"reference","isActive":true},{"text":". This conversion is done using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods\/group(_:context:)-w6fz","type":"reference","isActive":true},{"text":" which creates a new ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","type":"reference","isActive":true},{"text":" using the new ","type":"text"},{"code":"AppSessionRequestContext","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"And then in routes that require an authenticated state we have added conversion to an ","type":"text"},{"type":"codeVoice","code":"AuthenticatedRequestContext"},{"text":" which requires an authenticated identity. This means those routes don’t need to check the authenticated state they are provided with a non-optional identity.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can find out more about "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" transformations in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts#RequestContext-transformation"},{"type":"text","text":"."}]},{"anchor":"Dynamic-HTML","type":"heading","text":"Dynamic HTML","level":3},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"WebController","type":"codeVoice"},{"text":" generates dynamic content for the logged in screen. It uses ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"reference","isActive":true},{"text":" to render the content. The mustache templates are stored in the ","type":"text"},{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Resources","type":"reference","isActive":true},{"text":" folder in the App. The templates are loaded at initialization using ","type":"text"},{"code":"Bundle.module.resourcePath","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"WebController","type":"codeVoice"},{"text":" when rendering the logged in screen extracts information from the authenticated users and uses that as a context while rendering the page mustache template. The resulting output is then wrapped in an ","type":"text"},{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Extensions\/html.swift","type":"reference","isActive":true},{"text":" type that conforms to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","type":"reference","isActive":true},{"text":" that outputs a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":" witht eh correct ","type":"text"},{"code":"content-type","type":"codeVoice"},{"text":" header.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExamplesGuide"]]},"metadata":{"role":"article","roleHeading":"Article","title":"OTP Authentication Example"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OTPAuthenticationExample","interfaceLanguage":"swift"},"references":{"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Middleware/TOTPMiddleware.swift":{"title":"TOTPMiddleware","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Middleware\/TOTPMiddleware.swift","type":"link","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Middleware\/TOTPMiddleware.swift","titleInlineContent":[{"code":"TOTPMiddleware","type":"codeVoice"}]},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Extensions/html.swift":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Extensions\/html.swift","title":"HTML","titleInlineContent":[{"type":"codeVoice","code":"HTML"}],"url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Extensions\/html.swift","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application/beforeServerStarts(perform:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbird\/application\/beforeserverstarts(perform:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application\/beforeServerStarts(perform:)","type":"topic","abstract":[{"type":"text","text":"Add a process to run before we kick off the server service"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"beforeServerStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}],"title":"beforeServerStarts(perform:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdBasicAuth/BasicAuthenticator":{"title":"BasicAuthenticator","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","navigatorTitle":[{"kind":"identifier","text":"BasicAuthenticator"}],"kind":"symbol","abstract":[{"type":"text","text":"Basic password authenticator"}],"url":"\/documentation\/hummingbirdbasicauth\/basicauthenticator","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicAuthenticator"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/BasicRequestContext":{"abstract":[{"type":"text","text":"Implementation of a basic request context that supports everything the Hummingbird library needs"}],"title":"BasicRequestContext","type":"topic","url":"\/documentation\/hummingbird\/basicrequestcontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"BasicRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/BasicRequestContext","role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGroup":{"role":"symbol","kind":"symbol","url":"\/documentation\/hummingbird\/routergroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterGroup"}],"title":"RouterGroup"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Repositories/UserRepository.swift":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Repositories\/UserRepository.swift","titleInlineContent":[{"type":"codeVoice","code":"UserRepository"}],"type":"link","title":"UserRepository","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Repositories\/UserRepository.swift"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"title":"PostgresMigrations","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","url":"\/documentation\/postgresmigrations","abstract":[{"type":"text","text":"Postgres database migration service"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TodosAuthExample":{"role":"article","abstract":[{"type":"text","text":"Example combining Authentication with CRUD operations using fluent-kit"}],"title":"Todos with Authentication Example","kind":"article","url":"\/documentation\/hummingbird\/todosauthexample","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigrationsGuide":{"abstract":[{"type":"text","text":"Managing database structure changes."}],"title":"Postgres Migrations","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/migrationsguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigrationsGuide","role":"article","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionAuthenticator":{"title":"SessionAuthenticator","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","navigatorTitle":[{"text":"SessionAuthenticator","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Session authenticator"}],"url":"\/documentation\/hummingbirdauth\/sessionauthenticator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionAuthenticator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ExamplesGuide":{"title":"Examples","url":"\/documentation\/hummingbird\/examplesguide","type":"topic","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ExamplesGuide","abstract":[{"text":"Documentation for some of the larger example projects in the hummingbird-examples repository.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","type":"topic","url":"\/documentation\/hummingbird\/requestcontext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseGenerator":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseGenerator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseGenerator","kind":"identifier"}],"navigatorTitle":[{"text":"ResponseGenerator","kind":"identifier"}],"abstract":[{"text":"Object that can generate a ","type":"text"},{"code":"Response","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/hummingbird\/responsegenerator","role":"symbol","title":"ResponseGenerator","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMethods/group(_:context:)-w6fz":{"url":"\/documentation\/hummingbird\/routermethods\/group(_:context:)-w6fz","role":"symbol","type":"topic","title":"group(_:context:)","abstract":[{"text":"Return a group inside the current group that transforms the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMethods\/group(_:context:)-w6fz","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"group"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TargetContext"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11Hummingbird10RouterPathV","kind":"typeIdentifier","text":"RouterPath"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11Hummingbird13RouterMethodsPAAE5group_7contextAA0B5GroupVyqd__GAA0B4PathV_qd__mtAA14RequestContextRd__6SourceQyd__0I0RtzlF06TargetI0L_qd__mfp","kind":"typeIdentifier","text":"TargetContext"},{"kind":"text","text":".Type) -> "},{"preciseIdentifier":"s:11Hummingbird11RouterGroupV","kind":"typeIdentifier","text":"RouterGroup"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:11Hummingbird13RouterMethodsPAAE5group_7contextAA0B5GroupVyqd__GAA0B4PathV_qd__mtAA14RequestContextRd__6SourceQyd__0I0RtzlF06TargetI0L_qd__mfp","kind":"typeIdentifier","text":"TargetContext"},{"kind":"text","text":">"}]},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp","titleInlineContent":[{"text":"here","type":"text"}],"type":"link","title":"here","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Controllers/TOTPController.swift":{"title":"TOTPController","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/TOTPController.swift","type":"link","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/TOTPController.swift","titleInlineContent":[{"code":"TOTPController","type":"codeVoice"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts#RequestContext-transformation":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts#RequestContext-transformation","title":"RequestContext transformation","url":"\/documentation\/hummingbird\/requestcontexts#RequestContext-transformation","abstract":[],"kind":"section","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"type":"topic","role":"article","url":"\/documentation\/hummingbird\/persistentdata","images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddleware":{"title":"FileMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileMiddleware"}],"kind":"symbol","url":"\/documentation\/hummingbird\/filemiddleware","abstract":[{"text":"Middleware for serving static files.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileMiddleware"}]},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Resources":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Resources","titleInlineContent":[{"text":"Resources","type":"text"}],"type":"link","title":"Resources","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Resources"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations/apply(client:groups:options:logger:dryRun:)":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations\/apply(client:groups:options:logger:dryRun:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"externalParam","text":"client"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11PostgresNIO0A6ClientC","text":"PostgresClient"},{"kind":"text","text":", "},{"kind":"externalParam","text":"groups"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:18PostgresMigrations22DatabaseMigrationGroupV","text":"DatabaseMigrationGroup"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:18PostgresMigrations08DatabaseB0C12ApplyOptionsV","text":"ApplyOptions","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"dryRun"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Apply database migrations"}],"url":"\/documentation\/postgresmigrations\/databasemigrations\/apply(client:groups:options:logger:dryrun:)","role":"symbol","title":"apply(client:groups:options:logger:dryRun:)","type":"topic"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Migrations":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Migrations","title":"Migrations folder","titleInlineContent":[{"text":"Migrations folder","type":"text"}],"url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Migrations","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"title":"Mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","url":"\/documentation\/mustache","abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdOTP/TOTP":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdOTP\/TOTP","title":"TOTP","type":"topic","url":"\/documentation\/hummingbirdotp\/totp","navigatorTitle":[{"text":"TOTP","kind":"identifier"}],"abstract":[{"type":"text","text":"A time based one time password (OTP)"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TOTP","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres/PostgresPersistDriver":{"role":"symbol","abstract":[{"type":"text","text":"Postgres driver for persist system for storing persistent cross request key\/value pairs"}],"url":"\/documentation\/hummingbirdpostgres\/postgrespersistdriver","title":"PostgresPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PostgresPersistDriver"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres\/PostgresPersistDriver","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PostgresPersistDriver"}]},"logo.png":{"alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","role":"symbol","kind":"symbol","url":"\/documentation\/hummingbirdauth\/sessionmiddleware","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SessionMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"SessionMiddleware"}],"title":"SessionMiddleware","abstract":[{"type":"text","text":"Middleware that extracts session data for a request and stores it in the context"}]},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Controllers/WebController.swift":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/WebController.swift","titleInlineContent":[{"code":"WebController","type":"codeVoice"}],"type":"link","title":"WebController","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/WebController.swift"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/RequestContext.swift":{"identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/RequestContext.swift","title":"AppSessionRequestContext","titleInlineContent":[{"type":"codeVoice","code":"AppSessionRequestContext"}],"url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/RequestContext.swift","type":"link"},"https://github.com/hummingbird-project/hummingbird-examples/tree/main/auth-otp/Sources/App/Controllers/UserController.swift":{"title":"UserController","url":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/UserController.swift","type":"link","identifier":"https:\/\/github.com\/hummingbird-project\/hummingbird-examples\/tree\/main\/auth-otp\/Sources\/App\/Controllers\/UserController.swift","titleInlineContent":[{"type":"codeVoice","code":"UserController"}]}}}