{"abstract":[{"type":"text","text":"Session based authentication"}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sessions allow you to persist state eg user authentication status between multiple requests to the server. They work by creating a temporary session object that is stored in a key\/value store. The key or session id is returned in the response. Subsequent requests can then access the session object by supplying the session id in their request. This object can then be used to authenicate the user. Normally the session id is stored in a cookie."}]},{"text":"SessionMiddleware","type":"heading","anchor":"SessionMiddleware","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware"},{"type":"text","text":" is used to extract and save session state from the RequestContext. To use it, your "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" must conform to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext"},{"type":"text","text":". Adding the "},{"code":"SessionMiddleware","type":"codeVoice"},{"type":"text","text":" to your middleware stack will mean any middleware or routes after will have read\/write access to session state via the member "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext\/sessions"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"SessionMiddleware"},{"text":" needs a persist key value store to save its state. You can find out more about the persist framework here ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","isActive":true},{"text":". In the example below we are using an in memory key value store, but ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver","isActive":true},{"text":" provide solutions that stores the session data in a database or redis database respectively.","type":"text"}]},{"type":"codeListing","code":["router.add(","    middleware: SessionMiddleware(","        storage: MemoryPersistDriver()","    )",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"By default sessions store the session id in a ","type":"text"},{"code":"SESSION_ID","type":"codeVoice"},{"text":" cookie and the default session expiration is 12 hours. At initialization it is possible to set these up differently.","type":"text"}]},{"type":"codeListing","code":["router.add(","    middleware: SessionMiddleware(","        storage: MemoryPersistDriver(),","        sessionCookie: \"MY_SESSION_ID\",","        defaultSessionExpiration: .seconds(60 * 60)","    )",")"],"syntax":"swift"},{"text":"SessionRequestContext","type":"heading","anchor":"SessionRequestContext","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext","type":"reference","isActive":true},{"type":"text","text":" protocol requires you include a member "},{"type":"codeVoice","code":"sessions"},{"type":"text","text":". This is a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionContext","type":"reference","isActive":true},{"type":"text","text":" type which holds the session data for the current request and includes a generic parameter defining what type this session data is."}]},{"type":"codeListing","code":["struct MyRequestContext: SessionRequestContext {","    \/\/\/ core context","    public var coreContext: CoreRequestContextStorage","    \/\/\/ session context with UUID as the session object","    public let sessions: SessionContext<UUID>","}"],"syntax":"swift"},{"text":"Saving a session","type":"heading","anchor":"Saving-a-session","level":2},{"type":"paragraph","inlineContent":[{"text":"Once a user is authenticated you need to save a session for the user.","type":"text"}]},{"type":"codeListing","code":["func login(_ request: Request, context: MyRequestContext) async throws -> HTTPResponseStatus {","    \/\/ get authenticated user","    let user = try context.requireIdentity()","    \/\/ create session lasting 1 hour","    context.sessions.setSession(user.id, expiresIn: .seconds(600))","    return .ok","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example "},{"type":"codeVoice","code":"user.id"},{"type":"text","text":" is saved with the session id. The data we save in "},{"type":"codeVoice","code":"setSession"},{"type":"text","text":" is saved to storage when we return to the "},{"type":"codeVoice","code":"SessionMiddleware"},{"type":"text","text":". If your route throws an error then the session data is not updated."}]},{"text":"Sessions Authentication","type":"heading","anchor":"Sessions-Authentication","level":2},{"type":"paragraph","inlineContent":[{"text":"To authenticate a user using a session id you need to add a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator"},{"text":" middleware to the router. This uses the session stored in the request context and converts it into the authenticated user using the closure or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/UserSessionRepository"},{"text":" provided. The session authenticator requires your ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" conforms to both ","type":"text"},{"code":"SessionRequestContext","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AuthRequestContext","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["router.addMiddleware {","    SessionMiddleware(storage: MemoryPersistDriver())","    SessionAuthenticator { session, context in","        try await getUser(from: session)","    }","}","router.get(\"session\") { request, context -> HTTPResponse.Status in","    _ = try context.requireIdentity()","    return .ok","}"],"syntax":"swift"}],"kind":"content"}],"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Sessions","roleHeading":"Article","role":"article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext"],"title":"Related Documentation"},{"generated":true,"anchor":"Authentication","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"title":"Authentication"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SessionRequestContext"}],"role":"symbol","abstract":[{"type":"text","text":"Protocol for RequestContext that stores session data"}],"navigatorTitle":[{"kind":"identifier","text":"SessionRequestContext"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext","url":"\/documentation\/hummingbirdauth\/sessionrequestcontext","title":"SessionRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionAuthenticator":{"kind":"symbol","abstract":[{"type":"text","text":"Session authenticator"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionAuthenticator","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/sessionauthenticator","navigatorTitle":[{"text":"SessionAuthenticator","kind":"identifier"}],"title":"SessionAuthenticator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionMiddleware":{"kind":"symbol","abstract":[{"type":"text","text":"Middleware that extracts session data for a request and stores it in the context"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SessionMiddleware"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdauth\/sessionmiddleware","navigatorTitle":[{"kind":"identifier","text":"SessionMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","title":"SessionMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionRequestContext/sessions":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionRequestContext\/sessions","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"sessions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SessionContext","preciseIdentifier":"s:15HummingbirdAuth14SessionContextV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Session","preciseIdentifier":"s:15HummingbirdAuth21SessionRequestContextP0C0Qa"},{"text":">","kind":"text"}],"url":"\/documentation\/hummingbirdauth\/sessionrequestcontext\/sessions","abstract":[],"title":"sessions","kind":"symbol","role":"symbol","required":true},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/UserSessionRepository":{"type":"topic","abstract":[{"type":"text","text":"Repository of users identified by a session object"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UserSessionRepository","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/UserSessionRepository","navigatorTitle":[{"text":"UserSessionRepository","kind":"identifier"}],"title":"UserSessionRepository","kind":"symbol","url":"\/documentation\/hummingbirdauth\/usersessionrepository","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisPersistDriver":{"title":"RedisPersistDriver","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisPersistDriver","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdredis\/redispersistdriver","navigatorTitle":[{"text":"RedisPersistDriver","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"Redis driver for persist system for storing persistent cross request key\/value pairs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisPersistDriver"},"doc://com.opticalaberration.hummingbird/documentation/index":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"url":"\/documentation\/index","title":"Hummingbird Documentation","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionContext":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionContext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/sessioncontext","abstract":[{"text":"Session context","type":"text"}],"kind":"symbol","title":"SessionContext","role":"symbol","navigatorTitle":[{"text":"SessionContext","kind":"identifier"}]},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/AuthenticatorMiddlewareGuide":{"abstract":[{"text":"Request authentication middleware","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","title":"Authenticator Middleware","url":"\/documentation\/hummingbird\/authenticatormiddlewareguide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"title":"One Time Passwords","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","type":"topic","role":"article","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"url":"\/documentation\/hummingbird\/onetimepasswords"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"role":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","url":"\/documentation\/hummingbird\/persistentdata","title":"Persistent data","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent/FluentPersistDriver":{"abstract":[{"type":"text","text":"Fluent driver for persist system for storing persistent cross request key\/value pairs"}],"navigatorTitle":[{"kind":"identifier","text":"FluentPersistDriver"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent\/FluentPersistDriver","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FluentPersistDriver"}],"title":"FluentPersistDriver","kind":"symbol","url":"\/documentation\/hummingbirdfluent\/fluentpersistdriver","role":"symbol"}}}