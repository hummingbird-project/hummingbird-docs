{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true,"title":"Authentication","anchor":"Authentication"}],"abstract":[{"type":"text","text":"Request authentication middleware"}],"metadata":{"role":"article","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"Article","title":"Authenticator Middleware"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide"},"kind":"article","primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","isActive":true},{"type":"text","text":". This requires you implement the function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","isActive":true},{"type":"text","text":" that returns a value conforming to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use an authenticator it is required that your request context conform to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true},{"type":"text","text":". When you return valid authentication data from your "},{"type":"codeVoice","code":"authenticate"},{"type":"text","text":" function it is recorded in the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","isActive":true},{"type":"text","text":" member of your request context."}],"type":"paragraph"},{"text":"Usage","anchor":"Usage","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct, otherwise it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> Identity? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}],"type":"paragraph"},{"syntax":"swift","code":["router.add(middleware: BasicAuthenticator())"],"type":"codeListing"},{"inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"code":"context.identity","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    let user = context.requireIdentity()","    return user","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by adding the middleware "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware"},{"type":"text","text":" after your authentication middleware"}],"type":"paragraph"},{"syntax":"swift","code":["router.addMiddleware {","    BasicAuthenticator()","    IsAuthenticatedMiddleware()","}"],"type":"codeListing"}],"kind":"content"}],"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"type":"topic","title":"Sessions","url":"\/documentation\/hummingbird\/sessions","kind":"article","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","abstract":[{"text":"Session based authentication","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"title":"One Time Passwords","role":"article","abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/onetimepasswords"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","url":"\/documentation\/hummingbirdauth\/authrequestcontext","role":"symbol","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"kind":"symbol","navigatorTitle":[{"text":"AuthRequestContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthRequestContext","kind":"identifier"}],"title":"AuthRequestContext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"title":"Hummingbird Documentation","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"kind":"symbol","title":"IsAuthenticatedMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IsAuthenticatedMiddleware"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"role":"symbol","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"kind":"symbol","title":"AuthenticatorMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)":{"title":"authenticate(request:context:)","role":"symbol","type":"topic","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"authenticate"},{"kind":"text","text":"("},{"kind":"externalParam","text":"request"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","text":"Context"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP8IdentityQa","text":"Identity"},{"kind":"text","text":"?"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)","required":true},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/identity-swift.property":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP8IdentityQa","kind":"typeIdentifier","text":"Identity"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","required":true,"role":"symbol","type":"topic","url":"\/documentation\/hummingbirdauth\/authrequestcontext\/identity-swift.property","kind":"symbol","abstract":[{"type":"text","text":"The authenticated identity"}],"title":"identity"}}}