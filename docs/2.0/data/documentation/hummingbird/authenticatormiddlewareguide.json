{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OTPAuthenticationExample","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords"],"generated":true,"anchor":"Authentication","title":"Authentication"}],"kind":"article","primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Authenticators are middleware that are used to check if a request is authenticated and then pass authentication data to functions further down the callstack via the request context. Authenticators should conform to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","type":"reference","isActive":true},{"text":". This requires you implement the function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","type":"reference","isActive":true},{"text":" that returns a value conforming to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To use an authenticator it is required that your request context conform to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","isActive":true,"type":"reference"},{"text":". When you return valid authentication data from your ","type":"text"},{"type":"codeVoice","code":"authenticate"},{"text":" function it is recorded in the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","isActive":true,"type":"reference"},{"text":" member of your request context.","type":"text"}]},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"text":"A simple username, password authenticator could be implemented as follows. If the authenticator is successful it returns a ","type":"text"},{"type":"codeVoice","code":"User"},{"text":" struct, otherwise it returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"codeListing","code":["struct BasicAuthenticator: AuthenticatorMiddleware {","    func authenticate<Context: AuthRequestContext>(request: Request, context: Context) async throws -> Identity? {","        \/\/ Basic authentication info in the \"Authorization\" header, is accessible","        \/\/ via request.headers.basic","        guard let basic = request.headers.basic else { return nil }","        \/\/ check if user exists in the database and then verify the entered password","        \/\/ against the one stored in the database. If it is correct then login in user","        let user = try await database.getUserWithUsername(basic.username)","        \/\/ did we find a user","        guard let user = user else { return nil }","        \/\/ verify password against password hash stored in database. If valid","        \/\/ return the user. HummingbirdAuth provides an implementation of Bcrypt","        \/\/ This should be run on the thread pool as it is a long process.","        return try await NIOThreadPool.singleton.runIfActive {","            if Bcrypt.verify(basic.password, hash: user.passwordHash) {","                return user","            }","            return nil","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An authenticator is middleware so can be added to your application like any other middleware"}]},{"type":"codeListing","code":["router.add(middleware: BasicAuthenticator())"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then in your request handler you can access your authentication data with ","type":"text"},{"type":"codeVoice","code":"context.identity"},{"text":".","type":"text"}]},{"type":"codeListing","code":["\/\/\/ Get current logged in user","func current(_ request: Request, context: MyContext) throws -> User {","    \/\/ get authentication data for user. If it doesnt exist then throw unauthorized error","    let user = try context.requireIdentity()","    return user","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can require that that authentication was successful and authentication data is available by adding the middleware "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","isActive":true},{"type":"text","text":" after your authentication middleware"}]},{"type":"codeListing","code":["router.addMiddleware {","    BasicAuthenticator()","    IsAuthenticatedMiddleware()","}"],"syntax":"swift"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/AuthenticatorMiddlewareGuide","interfaceLanguage":"swift"},"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"title":"Authenticator Middleware","role":"article","roleHeading":"Article"},"abstract":[{"type":"text","text":"Request authentication middleware"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OTPAuthenticationExample":{"role":"article","abstract":[{"type":"text","text":"Example demonstrating how to setup one time passwords, using sessions."}],"title":"OTP Authentication Example","kind":"article","url":"\/documentation\/hummingbird\/otpauthenticationexample","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OTPAuthenticationExample"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware/authenticate(request:context:)":{"role":"symbol","url":"\/documentation\/hummingbirdauth\/authenticatormiddleware\/authenticate(request:context:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware\/authenticate(request:context:)","kind":"symbol","abstract":[{"text":"Called by middleware to see if request can authenticate.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"authenticate","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Identity","preciseIdentifier":"s:15HummingbirdAuth23AuthenticatorMiddlewareP8IdentityQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","title":"authenticate(request:context:)","required":true},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TodosAuthExample":{"role":"article","abstract":[{"type":"text","text":"Example combining Authentication with CRUD operations using fluent-kit"}],"title":"Todos with Authentication Example","kind":"article","url":"\/documentation\/hummingbird\/todosauthexample","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","role":"symbol","type":"topic","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}],"title":"AuthenticatorMiddleware","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext/identity-swift.property":{"abstract":[{"text":"The authenticated identity","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext\/identity-swift.property","title":"identity","required":true,"url":"\/documentation\/hummingbirdauth\/authrequestcontext\/identity-swift.property","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Identity","preciseIdentifier":"s:15HummingbirdAuth0B14RequestContextP8IdentityQa"},{"kind":"text","text":"?"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","title":"Hummingbird Documentation","type":"topic","url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OneTimePasswords":{"abstract":[{"text":"A one time password (OTP) valid for only one login session.","type":"text"}],"type":"topic","kind":"article","title":"One Time Passwords","url":"\/documentation\/hummingbird\/onetimepasswords","role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OneTimePasswords","images":[{"type":"icon","identifier":"logo.png"}]},"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Sessions":{"url":"\/documentation\/hummingbird\/sessions","role":"article","type":"topic","title":"Sessions","abstract":[{"text":"Session based authentication","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Sessions","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthRequestContext":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthRequestContext"}],"navigatorTitle":[{"kind":"identifier","text":"AuthRequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthRequestContext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to if they want to support"},{"type":"text","text":" "},{"type":"text","text":"authentication middleware"}],"role":"symbol","title":"AuthRequestContext","kind":"symbol","url":"\/documentation\/hummingbirdauth\/authrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"role":"symbol","title":"IsAuthenticatedMiddleware","kind":"symbol","abstract":[{"type":"text","text":"Middleware returning 401 for unauthenticated requests"}]}}}