{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteCollection","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup"],"anchor":"Related-Documentation","title":"Related Documentation"},{"anchor":"Hummingbird-Server","title":"Hummingbird Server","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default router that comes with Hummingbird uses a Trie based lookup. Routes are added using the function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/on(_:method:use:)","isActive":true},{"type":"text","text":". You provide the URI path, the method and the handler function. Below is a simple route which returns “Hello” in the body of the response."}]},{"type":"codeListing","syntax":"swift","code":["let router = Router()","router.on(\"\/hello\", method: .GET) { request, context in","    return \"Hello\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t provide a path then the default is for it to be “\/”."}]},{"type":"heading","level":3,"anchor":"Methods","text":"Methods"},{"type":"paragraph","inlineContent":[{"text":"There are shortcut functions for the most common HTTP methods. The above can be written as","type":"text"}]},{"code":["let router = Router()","router.get(\"\/hello\") { request, context in","    return \"Hello\"","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"There are shortcuts for ","type":"text"},{"type":"codeVoice","code":"put"},{"type":"text","text":", "},{"code":"post","type":"codeVoice"},{"type":"text","text":", "},{"code":"head","type":"codeVoice"},{"text":", ","type":"text"},{"code":"patch","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"delete"},{"type":"text","text":" as well."}]},{"level":3,"type":"heading","text":"Response generators","anchor":"Response-generators"},{"inlineContent":[{"type":"text","text":"Route handlers are required to return a type conforming to the "},{"code":"ResponseGenerator","type":"codeVoice"},{"type":"text","text":" protocol. The "},{"type":"codeVoice","code":"ResponseGenerator"},{"type":"text","text":" protocol requires a type to be able to generate an "},{"code":"Response","type":"codeVoice"},{"type":"text","text":". For example "},{"code":"String","type":"codeVoice"},{"type":"text","text":" has been extended to conform to "},{"type":"codeVoice","code":"ResponseGenerator"},{"text":" by returning an ","type":"text"},{"type":"codeVoice","code":"Response"},{"text":" with status ","type":"text"},{"code":".ok","type":"codeVoice"},{"text":",  a content-type header of ","type":"text"},{"type":"codeVoice","code":"text-plain"},{"type":"text","text":" and a body holding the contents of the "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/\/ Extend String to conform to ResponseGenerator","extension String: ResponseGenerator {","    \/\/\/ Generate response holding string","    public func response(from request: Request, context: some RequestContext) -> Response {","        let buffer = ByteBuffer(string: self)","        return Response(","            status: .ok,","            headers: [.contentType: \"text\/plain; charset=utf-8\"],","            body: .init(byteBuffer: buffer)","        )","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to "},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"HTTPResponseStatus","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" have also been extended to conform to "},{"code":"ResponseGenerator","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to extend "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" objects to generate a "},{"code":"Response","type":"codeVoice"},{"text":" by conforming these objects to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable"},{"type":"text","text":". The object will use the response encoder attached to your context to encode these objects. If an object conforms to "},{"type":"codeVoice","code":"ResponseEncodable"},{"type":"text","text":" then also so do arrays and dictionaries of these objects. Read more about generating "},{"type":"codeVoice","code":"Response"},{"text":"s via ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" in ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"Wildcards","anchor":"Wildcards"},{"inlineContent":[{"text":"You can use wildcards to match sections of a path component.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A single "},{"type":"codeVoice","code":"*"},{"type":"text","text":" will skip one path component"}]},{"code":["router.get(\"\/files\/*\") { request, context in","    return request.uri.description","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Will match","type":"text"}]},{"type":"codeListing","code":["GET \/files\/test","GET \/files\/test2"],"syntax":null},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"*"},{"type":"text","text":" at the start of a route component will match all path components with the same suffix."}],"type":"paragraph"},{"code":["router.get(\"\/files\/*.jpg\") { request, context in","    return request.uri.description","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Will work for","type":"text"}]},{"type":"codeListing","code":["GET \/files\/test.jpg","GET \/files\/test2.jpg"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"*"},{"text":" at the end of a route component will match all path components with the same prefix.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["router.get(\"\/files\/image.*\") { request, context in","    return request.uri.description","}"]},{"inlineContent":[{"text":"Will work for","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["GET \/files\/image.jpg","GET \/files\/image.png"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"**"},{"text":" will match and capture all remaining path components.","type":"text"}]},{"syntax":"swift","code":["router.get(\"\/files\/**\") { request, context in","    \/\/ return catchAll captured string","    return context.parameters.getCatchAll().joined(separator: \"\/\")","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above will match routes and respond as follows"}]},{"type":"codeListing","code":["GET \/files\/image.jpg returns \"image.jpg\" in the response body","GET \/files\/folder\/image.png returns \"folder\/image.png\" in the response body"],"syntax":null},{"type":"heading","level":3,"anchor":"Parameter-Capture","text":"Parameter Capture"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extract parameters out of the URI by prefixing the path with a colon. This indicates that this path section is a parameter. The parameter name is the string following the colon. You can get access to the URI extracted parameters from the context. This example extracts an id from the URI and uses it to return a specific user. so “\/user\/56” will return user with id 56."}]},{"syntax":"swift","code":["router.get(\"\/user\/:id\") { request, context in","    let id = context.parameters.get(\"id\", as: Int.self) else { throw HTTPError(.badRequest) }","    return getUser(id: id)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above if I fail to access the parameter as an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" then I throw an error. If you throw an "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPError","type":"reference","isActive":true},{"text":" it will get converted to a valid HTTP response.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The parameter name in your route can also be of the form "},{"code":"{id}","type":"codeVoice"},{"type":"text","text":", similar to OpenAPI specifications. With this form you can also extract parameter values from the URI that are prefixes or suffixes of a path component."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["router.get(\"\/files\/{image}.jpg\") { request, context in","    let imageName = context.parameters.get(\"image\") else { throw HTTPError(.badRequest) }","    return getImage(image: imageName)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above we match all paths that are a file with a jpg extension inside the files folder and then call a function with that image name."}]},{"type":"heading","text":"Groups","anchor":"Groups","level":3},{"inlineContent":[{"text":"Routes can be grouped together in a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup"},{"text":".  These allow for you to prefix a series of routes with the same path and more importantly apply middleware to only those routes. The example below is a group that includes five handlers all prefixed with the path “\/todos”.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let app = Application()","router.group(\"\/todos\")","    .put(use: createTodo)","    .get(use: listTodos)","    .get(\"{id}\", getTodo)","    .patch(\"{id}\", editTodo)","    .delete(\"{id}\", deleteTodo)"]},{"type":"heading","anchor":"RequestContext-transformation","level":3,"text":"RequestContext transformation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" can be transformed for the routes in a route group. The "},{"code":"RequestContext","type":"codeVoice"},{"type":"text","text":" you are converting to needs to conform to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext"},{"text":". This requires a parent context ie the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" you are converting from and a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","isActive":true,"type":"reference"},{"type":"text","text":" function to perform the conversion."}]},{"syntax":"swift","type":"codeListing","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = MyRequestContext","    init(context: ParentContext) throws {","        self.coreContext = context.coreContext","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"text":" the conversion is added as follows","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let app = Application(context: MyRequestContext.self)","router.group(\"\/todos\", context: MyNewRequestContext.self)","    .put(use: createTodo)","    .get(use: listTodos)"]},{"text":"Route Collections","anchor":"Route-Collections","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"A "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteCollection","type":"reference","isActive":true},{"text":" is a collection of routes and middleware that can be added to a ","type":"text"},{"code":"Router","type":"codeVoice"},{"type":"text","text":" in one go. It has the same API as "},{"code":"RouterGroup","type":"codeVoice"},{"type":"text","text":", so can have groups internal to the collection to allow for Middleware to applied to only sub-sections of the "},{"type":"codeVoice","code":"RouteCollection"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct UserController<Context: RequestContext> {","    var routes: RouteCollection<Context> {","        let routes = RouteCollection()","        routes.post(\"signup\", use: signUp)","        routes.group(\"login\")","            .add(middleware: BasicAuthenticationMiddleware())","            .post(use: login)","        return routes","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You add the route collection to your router using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/addRoutes(_:atPath:)"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let router = Router()","router.add(\"users\", routes: UserController().routes)"],"syntax":"swift"},{"type":"heading","level":3,"anchor":"Request-Body","text":"Request Body"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the request body is an AsyncSequence of ByteBuffers. You can treat it as a series of buffers or collect it into one larger buffer."}]},{"syntax":"swift","code":["\/\/ process each buffer in the sequence separately","for try await buffer in request.body {","    process(buffer)","}"],"type":"codeListing"},{"code":["\/\/ collect all the buffers in the sequence into a single buffer","let buffer = try await request.body.collate(maxSize: maximumBufferSizeAllowed)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have read the sequence of buffers you cannot read it again. If you want to read the contents of a request body in middleware before it reaches the route handler, but still have it available for the route handler you can use "},{"type":"codeVoice","code":"Request.collectBody(upTo:)"},{"type":"text","text":". After this point though the request body cannot be treated as a sequence of buffers as it has already been collapsed into a single buffer."}]},{"text":"Writing the response body","type":"heading","level":3,"anchor":"Writing-the-response-body"},{"type":"paragraph","inlineContent":[{"text":"The response body is returned back to the server as a closure that will write the body. The closure is provided with a writer type conforming to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","type":"reference","isActive":true},{"type":"text","text":" and the closure uses this to write the buffers that make up the body. In most cases you don’t need to know this as "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","isActive":true,"type":"reference"},{"text":" has initializers that take a single ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":", a sequence of "},{"code":"ByteBuffers","type":"codeVoice"},{"type":"text","text":" and an "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":" of "},{"type":"codeVoice","code":"ByteBuffers"},{"text":" which covers most of the kinds of responses.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In the situation where you need something a little more flexible you can use the closure form. Below is a "},{"type":"codeVoice","code":"ResponseBody"},{"text":" that consists of 10 buffers of random data written with a one second pause between each buffer.","type":"text"}],"type":"paragraph"},{"code":["let responseBody = ResponseBody { writer in","    for _ in 0..<10 {","        try await Task.sleep(for: .seconds(1))","        let buffer = (0..<size).map { _ in UInt8.random(in: 0...255) }","        try await writer.write(buffer)","    }","    writer.finish(nil)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Once you have finished writing your response body you need to tell the writer you have finished by calling "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter\/finish(_:)","isActive":true},{"text":". At this point you can write trailing headers by passing them to the ","type":"text"},{"type":"codeVoice","code":"finish"},{"text":" function. NB Trailing headers are only sent if your response body is a chunked and does not include a content length header.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Editing response in handler","anchor":"Editing-response-in-handler"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The standard way to provide a custom response from a route handler is to return a "},{"code":"Response","type":"codeVoice"},{"type":"text","text":" from that handler. This method loses a lot of the automation of encoding responses, generating the correct status code etc."}]},{"type":"paragraph","inlineContent":[{"text":"Instead you can return what is called a ","type":"text"},{"type":"codeVoice","code":"EditedResponse"},{"text":". This includes a type that can generate a response on its own via the ","type":"text"},{"type":"codeVoice","code":"ResponseGenerator"},{"type":"text","text":" protocol and includes additional edits to the response."}]},{"type":"codeListing","syntax":"swift","code":["router.post(\"test\") { request, _ -> EditedResponse in","    return .init(","        status: .accepted,","        headers: [.contentType: \"application\/json\"],","        response: #\"{\"test\": \"value\"}\"#","    )","}"]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"sections":[],"kind":"article","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"metadata":{"title":"Router","roleHeading":"Article","role":"article","images":[{"identifier":"logo.png","type":"icon"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"title":"Hummingbird Documentation","url":"\/documentation\/index","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/HTTPError":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"HTTPError","kind":"identifier"}],"abstract":[{"text":"Default HTTP error. Provides an HTTP status and a message","type":"text"}],"title":"HTTPError","url":"\/documentation\/hummingbird\/httperror","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTPError"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/HTTPError"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","title":"Migrating to Hummingbird v2","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","title":"Service Lifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","role":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"Router","kind":"identifier"}],"abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"title":"Router","url":"\/documentation\/hummingbird\/router","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Router"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/on(_:method:use:)":{"abstract":[{"type":"text","text":"Add path for async closure"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/on(_:method:use:)","kind":"symbol","url":"\/documentation\/hummingbird\/router\/on(_:method:use:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"on"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"RouterPath","preciseIdentifier":"s:11Hummingbird10RouterPathV"},{"kind":"text","text":", "},{"text":"method","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV","text":"HTTPRequest"},{"kind":"text","text":"."},{"text":"Method","preciseIdentifier":"s:9HTTPTypes11HTTPRequestV6MethodV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"use"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:15HummingbirdCore7RequestV","text":"Request"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird13RouterMethodsP7ContextQa","kind":"typeIdentifier","text":"Context"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird17ResponseGeneratorP","text":"ResponseGenerator"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"on(_:method:use:)"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","type":"topic","role":"article","url":"\/documentation\/hummingbird\/requestcontexts","images":[{"type":"icon","identifier":"logo.png"}],"title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","role":"article","kind":"article","title":"Logging, Metrics and Tracing","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","role":"article","url":"\/documentation\/hummingbird\/testing","images":[{"type":"icon","identifier":"logo.png"}],"title":"Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"title":"Persistent data","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"url":"\/documentation\/hummingbird\/routerbuilderguide","kind":"article","abstract":[{"type":"text","text":"Building your router using a result builder."}],"title":"Result Builder Router","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"title":"ResponseBody","navigatorTitle":[{"text":"ResponseBody","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/responsebody","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ResponseBody","kind":"identifier"}],"abstract":[{"type":"text","text":"Response body"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","title":"Request Decoding","url":"\/documentation\/hummingbird\/requestdecoding","role":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouteCollection":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouteCollection","kind":"identifier"}],"abstract":[{"type":"text","text":"Collection of routes"}],"kind":"symbol","navigatorTitle":[{"text":"RouteCollection","kind":"identifier"}],"type":"topic","title":"RouteCollection","role":"symbol","url":"\/documentation\/hummingbird\/routecollection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouteCollection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"url":"\/documentation\/hummingbird\/responseencoding","kind":"article","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"title":"Response Encoding","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"title":"Request","url":"\/documentation\/hummingbirdcore\/request","role":"symbol","type":"topic","navigatorTitle":[{"text":"Request","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router/addRoutes(_:atPath:)":{"abstract":[{"type":"text","text":"Add route collection to router"}],"title":"addRoutes(_:atPath:)","type":"topic","url":"\/documentation\/hummingbird\/router\/addroutes(_:atpath:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addRoutes","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird15RouteCollectionC","text":"RouteCollection"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:11Hummingbird13RouterMethodsP7ContextQa","text":"Context","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"atPath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird10RouterPathV","text":"RouterPath","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router\/addRoutes(_:atPath:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter/finish(_:)":{"title":"finish(_:)","abstract":[{"text":"Finish writing body","type":"text"}],"type":"topic","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"(","kind":"text"},{"text":"HTTPFields","kind":"typeIdentifier","preciseIdentifier":"s:9HTTPTypes10HTTPFieldsV"},{"kind":"text","text":"?) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter\/finish(_:)","kind":"symbol","url":"\/documentation\/hummingbirdcore\/responsebodywriter\/finish(_:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"url":"\/documentation\/hummingbird\/errorhandling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","title":"Error Handling","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"kind":"symbol","role":"symbol","url":"\/documentation\/hummingbirdcore\/response","title":"Response","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Response","kind":"identifier"}],"abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"navigatorTitle":[{"text":"Response","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext/init(context:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ParentContext","preciseIdentifier":"s:11Hummingbird19ChildRequestContextP06ParentD0Qa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"init(context:)","role":"symbol","type":"topic","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext\/init(context:)","url":"\/documentation\/hummingbird\/childrequestcontext\/init(context:)","abstract":[{"type":"text","text":"Initialise RequestContext from source"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncodable":{"navigatorTitle":[{"text":"ResponseEncodable","kind":"identifier"}],"title":"ResponseEncodable","type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncodable","url":"\/documentation\/hummingbird\/responseencodable","abstract":[{"text":"Protocol for encodable object that can generate a response. The router will encode","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the response using the encoder stored in "},{"type":"codeVoice","code":"Application.encoder"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResponseEncodable"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"title":"Middleware","type":"topic","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ChildRequestContext":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChildRequestContext","kind":"identifier"}],"abstract":[{"text":"A RequestContext that can be initialized from another RequestContext.","type":"text"}],"title":"ChildRequestContext","url":"\/documentation\/hummingbird\/childrequestcontext","role":"symbol","type":"topic","navigatorTitle":[{"text":"ChildRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ChildRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Adding support for TLS and HTTP\/2 upgrades."}],"kind":"article","type":"topic","title":"TLS and HTTP\/2","role":"collectionGroup","url":"\/documentation\/hummingbird\/serverprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResponseBodyWriter"}],"abstract":[{"type":"text","text":"HTTP Response Body part writer"}],"title":"ResponseBodyWriter","url":"\/documentation\/hummingbirdcore\/responsebodywriter","role":"symbol","type":"topic","navigatorTitle":[{"text":"ResponseBodyWriter","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGroup":{"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterGroup"}],"abstract":[{"type":"text","text":"Used to group together routes under a single path. Additional middleware can be added to the endpoint and each route can add a"},{"type":"text","text":" "},{"type":"text","text":"suffix to the endpoint path"}],"title":"RouterGroup","url":"\/documentation\/hummingbird\/routergroup","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RouterGroup"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGroup"}}}