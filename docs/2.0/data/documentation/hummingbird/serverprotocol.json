{"abstract":[{"text":"Adding support for TLS and HTTP\/2 upgrades.","type":"text"}],"kind":"article","seeAlsoSections":[{"anchor":"Hummingbird-Server","generated":true,"title":"Hummingbird Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"By default a Hummingbird application runs with a HTTP\/1.1 server. The Hummingbird comes with additional libraries that allow you to change this to leverage TLS, HTTP\/2 and WebSockets. WebSocket upgrade handling is covered in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/WebSocketServerUpgrade","type":"reference"},{"type":"text","text":"."}]},{"text":"Setting server protocol","anchor":"Setting-server-protocol","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When you create your ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","isActive":true,"type":"reference"},{"type":"text","text":" there is a parameter "},{"type":"codeVoice","code":"server"},{"type":"text","text":" that is used to define the server protocol and its configuration. Below we are creating a server that support HTTP1 with a idle timeout for requests set to one minutes."}]},{"syntax":"swift","code":["let app = Application(","    router: router,","    server: .http1(idleTimeout: .seconds(60))",")"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"HTTPSTLS","text":"HTTPS\/TLS"},{"inlineContent":[{"type":"text","text":"HTTPS is pretty much a requirement for a server these days. Many people run Nginx in front of their server to implement HTTPS, but it is also possible to setup HTTPS inside your Hummingbird application."}],"type":"paragraph"},{"type":"codeListing","code":["import HummingbirdTLS","import NIOSSL","","let tlsConfiguration = TLSConfiguration.makeServerConfiguration(","    certificateChain: try NIOSSLCertificate.fromPEMFile(\"\/path\/to\/certificate.pem\").map { .certificate($0) },","    privateKey: .privateKey(try NIOSSLPrivateKey(file: \"\/path\/to\/privatekey.pem\", format: .pem))",")","let app = Application(","    router: router,","    server: .tls(.http1(), tlsConfiguration: tlsConfiguration)",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"HTTPS is the HTTP protocol with an added encryption layer of TLS to protect the traffic. The ","type":"text"},{"type":"codeVoice","code":"tls"},{"type":"text","text":" function applies the encryption layer using the crytographic keys supplied in the "},{"code":"TLSConfiguration","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"HTTP2","type":"heading","text":"HTTP2","level":2},{"inlineContent":[{"type":"text","text":"HTTP2 is becoming increasingly common. It allows you to service multiple HTTP requests concurrently over one connection. The HTTP2 protocol does not require you to use TLS but it is in effect only supported over TLS as there arenâ€™t any web browsers that support HTTP2 without TLS. Given this the Hummingbird implementation also requires TLS."}],"type":"paragraph"},{"type":"codeListing","code":["import HummingbirdHTTP2","","let app = Application(","    router: router,","    server: .http2(","        tlsConfiguration: tlsConfiguration,","        configuration: .init(","            idleTimeout: .seconds(60),","            gracefulCloseTimeout: .seconds(15),","            maxAgeTimeout: .seconds(900),","            streamConfiguration: .init(idleTimeout: .seconds(60))","        )","    )",")"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The HTTP2 upgrade protocol has a fair amount of configuration. It includes a number of different timeouts,"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"idleTimeout"},{"text":": How long a connection is kept open while idle.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"gracefulCloseTimeout"},{"text":": The maximum amount of time to wait for the client to respond before all streams are closed during graceful close of the connection.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"maxAgeTimeout"},{"text":": a maximum amount of time a connection should be open.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Then each HTTP2 stream (request) has its own idle timeout as well."}]}]}]}],"kind":"content"}],"topicSections":[{"anchor":"Reference","title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"]}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","interfaceLanguage":"swift"},"metadata":{"title":"TLS and HTTP\/2","images":[{"identifier":"logo.png","type":"icon"}],"roleHeading":"API Collection","role":"collectionGroup"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"type":"topic","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/routerguide","role":"article","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"url":"\/documentation\/hummingbird\/persistentdata","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"role":"symbol","type":"topic","abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","title":"Application","url":"\/documentation\/hummingbird\/application","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Application"}],"navigatorTitle":[{"text":"Application","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/requestcontexts","role":"article","title":"Request Contexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"url":"\/documentation\/hummingbird\/migratingtov2","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"title":"Service Lifecycle","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"url":"\/documentation\/hummingbird\/servicelifecycle","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"type":"topic","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/testing","role":"article","title":"Testing"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"kind":"article","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/WebSocketServerUpgrade":{"role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/WebSocketServerUpgrade","url":"\/documentation\/hummingbird\/websocketserverupgrade","title":"WebSocket Server Upgrade","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Support for upgrading HTTP1 connections to WebSocket.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"type":"topic","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","role":"article","title":"Logging, Metrics and Tracing"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","type":"topic","title":"HummingbirdHTTP2","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdhttp2"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"type":"topic","abstract":[{"type":"text","text":"Hummingbird uses "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" to decode requests and encode responses."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/encodinganddecoding","role":"article","title":"Encoding and Decoding"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"url":"\/documentation\/hummingbirdtls","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","type":"topic","abstract":[{"type":"text","text":"Add TLS support to Hummingbird server."}],"title":"HummingbirdTLS","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterBuilderGuide":{"title":"Result Builder Router","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"url":"\/documentation\/hummingbird\/routerbuilderguide","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","url":"\/documentation\/hummingbird\/middlewareguide","abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"role":"article","images":[{"type":"icon","identifier":"logo.png"}],"title":"Middleware"}}}