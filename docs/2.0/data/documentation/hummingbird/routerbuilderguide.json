{"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdRouter"},{"text":" provides an alternative to the standard trie based ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","type":"reference","isActive":true},{"text":" that is in the Hummingbird module. ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","type":"reference","isActive":true},{"text":" uses a result builder to construct your router.","type":"text"}]},{"type":"codeListing","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"RequestContext","anchor":"RequestContext","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" that conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext"},{"type":"text","text":". This contains an additional support struct "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext"},{"type":"text","text":" required by the result builder."}]},{"type":"codeListing","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"syntax":"swift"},{"type":"heading","text":"Common Route Verbs","anchor":"Common-Route-Verbs","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions."}]},{"type":"codeListing","code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"can be written as"}]},{"type":"codeListing","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"syntax":"swift"},{"type":"heading","text":"Route middleware","anchor":"Route-middleware","level":2},{"type":"paragraph","inlineContent":[{"text":"Routes can be initialised with their own result builder as long as they end with a route ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},{"text":" function that returns the response. This allows us to apply middleware to individual routes.","type":"text"}]},{"type":"codeListing","code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you are not adding the handler inline you can add the function reference without the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"codeListing","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"],"syntax":"swift"},{"type":"heading","text":"RequestContext transformation","anchor":"RequestContext-transformation","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can transform the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" to a different type for a group of routes using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)"},{"type":"text","text":". When you define the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" the conversion is added as follows"}]},{"type":"codeListing","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Controllers","anchor":"Controllers","level":3},{"type":"paragraph","inlineContent":[{"text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true,"type":"reference"},{"text":" you can add the contained routes directly into your router eg","type":"text"}]},{"type":"codeListing","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"syntax":"swift"},{"type":"heading","text":"Differences from trie router","anchor":"Differences-from-trie-router","level":3},{"type":"paragraph","inlineContent":[{"text":"There is one subtle difference between the result builder based ","type":"text"},{"code":"RouterBuilder","type":"codeVoice"},{"text":" and the more traditional trie based ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" that comes with ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"text":" and this is related to how middleware are processed in groups.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the trie based "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"type":"paragraph","inlineContent":[{"text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup"},{"text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the ","type":"text"},{"code":"RouteGroup","type":"codeVoice"},{"text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent ","type":"text"},{"code":"RouteGroup","type":"codeVoice"},{"text":" paths to be matched for it to run.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"metadata":{"title":"Result Builder Router","role":"article","roleHeading":"Article","images":[{"type":"icon","identifier":"logo.png"}]},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server","title":"Hummingbird Server","generated":true}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}],"title":"RequestContext","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbird\/requestcontext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"role":"article","title":"Logging, Metrics and Tracing","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"type":"topic","kind":"article","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","kind":"article","title":"Server protocol","role":"collectionGroup","url":"\/documentation\/hummingbird\/serverprotocol","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterBuilderContext","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","kind":"symbol","title":"RouterBuilderContext","role":"symbol","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","abstract":[{"type":"text","text":"Context data required by "},{"type":"codeVoice","code":"RouterBuilder"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"role":"article","url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"type":"topic","title":"Middleware","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","url":"\/documentation\/hummingbird\/servicelifecycle","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"title":"Service Lifecycle","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","kind":"symbol","title":"RouterBuilder","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"RouterBuilder","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/routerbuilder","abstract":[{"text":"Router built using a result builder","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterController","kind":"identifier"}],"title":"RouterController","navigatorTitle":[{"text":"RouterController","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routercontroller","abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterRequestContext"}],"title":"RouterRequestContext","navigatorTitle":[{"kind":"identifier","text":"RouterRequestContext"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts used with RouterBuilder should conform to."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"title":"Testing","abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"url":"\/documentation\/hummingbird\/testing","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","url":"\/documentation\/hummingbird\/requestcontexts","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"title":"Request Contexts","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"role":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","url":"\/documentation\/hummingbird\/requestdecoding","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"title":"Request Decoding","type":"topic","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"role":"article","url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"title":"Migrating to Hummingbird v2","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","kind":"article","title":"Hummingbird Documentation","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/index","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"url":"\/documentation\/hummingbird\/errorhandling","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteGroup"}],"title":"RouteGroup","navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routegroup","abstract":[{"type":"text","text":"Router middleware that applies a middleware chain to URIs with a specified prefix"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Request"}],"url":"\/documentation\/hummingbirdcore\/request","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Handle","kind":"identifier"}],"title":"Handle","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/handle","type":"topic","abstract":[{"type":"text","text":"Route Handler Middleware."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Router","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","title":"Router","navigatorTitle":[{"text":"Router","kind":"identifier"}],"url":"\/documentation\/hummingbird\/router","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"role":"article","url":"\/documentation\/hummingbird\/responseencoding","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"type":"topic","title":"Response Encoding","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"url":"\/documentation\/hummingbird\/routerguide","role":"article","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide"},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","role":"symbol","title":"init(_:context:builder:)","type":"topic","abstract":[{"text":"Create RouteGroup from RequestContext transform and result builder","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildHandler","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV","text":"RouterPath"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","text":"ChildContext"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","text":"ChildHandler"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"url":"\/documentation\/hummingbird\/persistentdata","role":"article","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData"}}}