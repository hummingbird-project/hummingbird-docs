{"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"HummingbirdRouter"},{"text":" provides an alternative to the standard trie based ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"type":"text","text":" that is in the Hummingbird module. "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder"},{"text":" uses a result builder to construct your router.","type":"text"}],"type":"paragraph"},{"code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"text":"RequestContext","anchor":"RequestContext"},{"inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference"},{"text":" that conforms to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","type":"reference"},{"text":". This contains an additional support struct ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","type":"reference"},{"type":"text","text":" required by the result builder."}],"type":"paragraph"},{"code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"text":"Common Route Verbs","anchor":"Common-Route-Verbs"},{"inlineContent":[{"text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"]},{"inlineContent":[{"text":"can be written as","type":"text"}],"type":"paragraph"},{"code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Route middleware","level":2,"anchor":"Route-middleware"},{"inlineContent":[{"type":"text","text":"Routes can be initialised with their own result builder as long as they end with a route "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"text":" function that returns the response. This allows us to apply middleware to individual routes.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"]},{"inlineContent":[{"text":"If you are not adding the handler inline you can add the function reference without the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"]},{"level":2,"text":"RequestContext transformation","type":"heading","anchor":"RequestContext-transformation"},{"type":"paragraph","inlineContent":[{"text":"You can transform the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" to a different type for a group of routes using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)"},{"type":"text","text":". When you define the "},{"type":"codeVoice","code":"RequestContext"},{"text":" type you are converting to you need to define how you initialize it from the original ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":".","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have defined how to perform the transform from your original "},{"type":"codeVoice","code":"RequestContext"},{"text":" the conversion is added as follows","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"level":3,"text":"Controllers","type":"heading","anchor":"Controllers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true},{"type":"text","text":" you can add the contained routes directly into your router eg"}]},{"syntax":"swift","type":"codeListing","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"]},{"type":"heading","text":"Differences from trie router","level":3,"anchor":"Differences-from-trie-router"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"type":"codeVoice","code":"RouterBuilder"},{"text":" and the more traditional trie based ","type":"text"},{"code":"Router","type":"codeVoice"},{"text":" that comes with ","type":"text"},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" and this is related to how middleware are processed in groups."}]},{"inlineContent":[{"type":"text","text":"With the trie based "},{"code":"Router","type":"codeVoice"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}],"type":"paragraph"},{"inlineContent":[{"text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","isActive":true,"type":"reference"},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"type":"codeVoice","code":"RouteGroup"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"code":"RouteGroup","type":"codeVoice"},{"type":"text","text":" paths to be matched for it to run."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"kind":"article","abstract":[{"text":"Building your router using a result builder.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"metadata":{"roleHeading":"Article","title":"Result Builder Router","images":[{"identifier":"logo.png","type":"icon"}],"role":"article"},"seeAlsoSections":[{"title":"Hummingbird Server","generated":true,"anchor":"Hummingbird-Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"navigatorTitle":[{"kind":"identifier","text":"Handle"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/handle","title":"Handle","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Handle","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"topic","abstract":[{"type":"text","text":"Route Handler Middleware."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","title":"Server protocol","images":[{"type":"icon","identifier":"logo.png"}],"role":"collectionGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","type":"topic","abstract":[{"type":"text","text":"Support for TLS and HTTP2 upgrades"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","title":"RouterController","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterController"}],"type":"topic","abstract":[{"text":"A type that represents part of your app’s middleware and routes","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterController"}],"url":"\/documentation\/hummingbirdrouter\/routercontroller"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","url":"\/documentation\/index","title":"Hummingbird Documentation","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"RouterBuilder","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterBuilder"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","title":"RouterBuilder","url":"\/documentation\/hummingbirdrouter\/routerbuilder","abstract":[{"type":"text","text":"Router built using a result builder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterRequestContext"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterRequestContext"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","title":"RouterRequestContext","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","abstract":[{"text":"Protocol that all request contexts used with RouterBuilder should conform to.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"RouteGroup","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","title":"RouteGroup","url":"\/documentation\/hummingbirdrouter\/routegroup","abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","kind":"symbol","abstract":[{"type":"text","text":"Create rules for routing requests and then create "},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"navigatorTitle":[{"text":"Router","kind":"identifier"}],"title":"Router","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Router","kind":"identifier"}],"url":"\/documentation\/hummingbird\/router"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"title":"Testing","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/testing","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildHandler"},{"kind":"text","text":", "},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"RouterPath","kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV"},{"text":", ","kind":"text"},{"text":"context","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","text":"ChildContext","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"builder","kind":"externalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"ChildHandler","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp"},{"kind":"text","text":")"}],"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","type":"topic","abstract":[{"type":"text","text":"Create RouteGroup from RequestContext transform and result builder"}],"title":"init(_:context:builder:)","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","title":"Request","url":"\/documentation\/hummingbirdcore\/request","abstract":[{"text":"Holds all the values required to process a request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"title":"Service Lifecycle","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/servicelifecycle","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","abstract":[{"type":"text","text":"Writing Responses using JSON and other formats."}],"title":"Response Encoding","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/responseencoding","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"title":"RouterBuilderContext","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterBuilderContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","kind":"symbol","abstract":[{"type":"text","text":"Context data required by "},{"type":"codeVoice","code":"RouterBuilder"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"type":"topic","title":"Error Handling","kind":"article","role":"article","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/errorhandling","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","title":"RequestContext","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"url":"\/documentation\/hummingbird\/requestcontext","type":"topic","role":"symbol","navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information"},{"text":" ","type":"text"},{"type":"text","text":"that is associated with a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true},{"type":"text","text":", and is therefore instantiated alongside the request."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"type":"topic","title":"Request Contexts","kind":"article","role":"article","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/requestcontexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","abstract":[{"text":"Decoding of Requests with JSON content and other formats.","type":"text"}],"title":"Request Decoding","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/requestdecoding","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"title":"Router","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/routerguide","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","abstract":[{"text":"How to persist data between requests to your server.","type":"text"}],"title":"Persistent data","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/persistentdata","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"title":"Logging, Metrics and Tracing","images":[{"identifier":"logo.png","type":"icon"}],"kind":"article","url":"\/documentation\/hummingbird\/loggingmetricsandtracing","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"type":"topic","title":"Middleware","kind":"article","role":"article","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide"},"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"type":"topic","title":"Migrating to Hummingbird v2","kind":"article","role":"article","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird\/migratingtov2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"}}}