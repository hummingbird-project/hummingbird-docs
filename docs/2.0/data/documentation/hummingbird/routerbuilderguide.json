{"sections":[],"abstract":[{"type":"text","text":"Building your router using a result builder."}],"seeAlsoSections":[{"generated":true,"title":"Hummingbird Server","anchor":"Hummingbird-Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","title":"Result Builder Router","role":"article"},"kind":"article","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"HummingbirdRouter"},{"type":"text","text":" provides an alternative to the standard trie based "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"text":" that is in the Hummingbird module. ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","type":"reference"},{"text":" uses a result builder to construct your router.","type":"text"}]},{"code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"RequestContext","level":2,"type":"heading","anchor":"RequestContext"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To be able to use the result builder router you need to provide a "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true},{"text":" that conforms to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","isActive":true},{"text":". This contains an additional support struct ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","isActive":true},{"text":" required by the result builder.","type":"text"}]},{"code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Common Route Verbs","level":2,"type":"heading","anchor":"Common-Route-Verbs"},{"type":"paragraph","inlineContent":[{"text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions.","type":"text"}]},{"code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"can be written as"}]},{"code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"text":"Route middleware","level":2,"type":"heading","anchor":"Route-middleware"},{"type":"paragraph","inlineContent":[{"text":"Routes can be initialised with their own result builder as long as they end with a route ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","type":"reference","isActive":true},{"text":" function that returns the response. This allows us to apply middleware to individual routes.","type":"text"}]},{"code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not adding the handler inline you can add the function reference without the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"RequestContext transformation","level":2,"type":"heading","anchor":"RequestContext-transformation"},{"type":"paragraph","inlineContent":[{"text":"You can transform the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"text":" to a different type for a group of routes using ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","type":"reference","isActive":true},{"text":". When you define the ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" type you are converting to you need to define how you initialize it from the original ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Once you have defined how to perform the transform from your original ","type":"text"},{"code":"RequestContext","type":"codeVoice"},{"text":" the conversion is added as follows","type":"text"}]},{"code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Controllers","level":3,"type":"heading","anchor":"Controllers"},{"type":"paragraph","inlineContent":[{"text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","isActive":true,"type":"reference"},{"text":" you can add the contained routes directly into your router eg","type":"text"}]},{"code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"],"type":"codeListing","syntax":"swift"},{"text":"Differences from trie router","level":3,"type":"heading","anchor":"Differences-from-trie-router"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"code":"RouterBuilder","type":"codeVoice"},{"type":"text","text":" and the more traditional trie based "},{"code":"Router","type":"codeVoice"},{"type":"text","text":" that comes with "},{"code":"Hummingbird","type":"codeVoice"},{"type":"text","text":" and this is related to how middleware are processed in groups."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the trie based "},{"code":"Router","type":"codeVoice"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"reference","isActive":true},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"code":"RouteGroup","type":"codeVoice"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"code":"RouteGroup","type":"codeVoice"},{"type":"text","text":" paths to be matched for it to run."}]}],"kind":"content"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"type":"topic","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"text":" that will follow these rules.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Router"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Router"}],"kind":"symbol","url":"\/documentation\/hummingbird\/router","title":"Router"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"type":"topic","url":"\/documentation\/hummingbirdrouter\/routercontroller","kind":"symbol","title":"RouterController","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterController"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","abstract":[{"type":"text","text":"A type that represents part of your app’s middleware and routes"}],"navigatorTitle":[{"kind":"identifier","text":"RouterController"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"abstract":[{"type":"text","text":"Route Handler Middleware."}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","role":"symbol","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Handle","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/handle","title":"Handle"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png","type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","kind":"article","title":"Middleware","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/testing","kind":"article","title":"Testing","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","abstract":[{"type":"text","text":"Using the HummingbirdTesting framework to test your application"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ResponseEncoding":{"abstract":[{"text":"Writing Responses using JSON and other formats.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ResponseEncoding","url":"\/documentation\/hummingbird\/responseencoding","images":[{"identifier":"logo.png","type":"icon"}],"title":"Response Encoding","type":"topic","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"role":"symbol","type":"topic","title":"RouterBuilder","url":"\/documentation\/hummingbirdrouter\/routerbuilder","navigatorTitle":[{"kind":"identifier","text":"RouterBuilder"}],"abstract":[{"text":"Router built using a result builder","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterBuilder"}]},"doc://com.opticalaberration.hummingbird/documentation/index":{"type":"topic","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/index","title":"Hummingbird Documentation"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"abstract":[{"text":"Create RouteGroup from RequestContext transform and result builder","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","title":"init(_:context:builder:)","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildHandler"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildContext"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11Hummingbird10RouterPathV","kind":"typeIdentifier","text":"RouterPath"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","kind":"typeIdentifier","text":"ChildContext"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"text":": () -> ","kind":"text"},{"text":"ChildHandler","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"title":"Router","abstract":[{"type":"text","text":"The router directs requests to their handlers based on the contents of their path."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/routerguide"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbird\/requestcontexts","kind":"article","title":"Request Contexts","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","abstract":[{"type":"text","text":"Controlling contextual data provided to middleware and route handlers"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"title":"Error Handling","abstract":[{"type":"text","text":"How to build errors for the server to return."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/errorhandling"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestDecoding":{"title":"Request Decoding","abstract":[{"type":"text","text":"Decoding of Requests with JSON content and other formats."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestDecoding","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/requestdecoding"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"type":"topic","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"title":"RequestContext","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","url":"\/documentation\/hummingbird\/requestcontext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"type":"topic","abstract":[{"type":"text","text":"Context data required by "},{"type":"codeVoice","code":"RouterBuilder"}],"title":"RouterBuilderContext","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterBuilderContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","url":"\/documentation\/hummingbirdrouter\/routerbuildercontext","kind":"symbol","navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServerProtocol":{"type":"topic","abstract":[{"text":"Support for TLS and HTTP2 upgrades","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServerProtocol","role":"collectionGroup","images":[{"type":"icon","identifier":"logo.png"}],"kind":"article","url":"\/documentation\/hummingbird\/serverprotocol","title":"Server protocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"type":"topic","abstract":[{"type":"text","text":"Protocol that all request contexts used with RouterBuilder should conform to."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","role":"symbol","navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterRequestContext","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routerrequestcontext","title":"RouterRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"title":"Logging, Metrics and Tracing","abstract":[{"type":"text","text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/loggingmetricsandtracing"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"abstract":[{"type":"text","text":"Router middleware that applies a middleware chain to URIs with a specified prefix"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","role":"symbol","navigatorTitle":[{"text":"RouteGroup","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouteGroup","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/routegroup","title":"RouteGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"title":"Service Lifecycle","abstract":[{"type":"text","text":"Integration with Swift Service Lifecycle"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","kind":"article","images":[{"type":"icon","identifier":"logo.png"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"title":"Migrating to Hummingbird v2","abstract":[{"type":"text","text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2"}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","images":[{"identifier":"logo.png","type":"icon"}],"role":"article","type":"topic","url":"\/documentation\/hummingbird\/migratingtov2"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"role":"symbol","type":"topic","title":"Request","url":"\/documentation\/hummingbirdcore\/request","navigatorTitle":[{"kind":"identifier","text":"Request"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}]}}}