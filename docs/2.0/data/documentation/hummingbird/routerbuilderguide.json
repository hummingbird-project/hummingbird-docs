{"sections":[],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Building your router using a result builder.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"]]},"seeAlsoSections":[{"title":"Hummingbird Server","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2"],"anchor":"Hummingbird-Server"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterBuilderGuide"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"code":"HummingbirdRouter","type":"codeVoice"},{"type":"text","text":" provides an alternative to the standard trie based "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router"},{"type":"text","text":" that is in the Hummingbird module. "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","isActive":true},{"text":" uses a result builder to construct your router.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    CORSMiddleware()","    Route(.get, \"health\") { _,_ in","        HTTPResponse.Status.ok","    }","    RouteGroup(\"user\") {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"],"type":"codeListing"},{"type":"heading","anchor":"RequestContext","text":"RequestContext","level":2},{"type":"paragraph","inlineContent":[{"text":"To be able to use the result builder router you need to provide a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"text":" that conforms to ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","isActive":true},{"text":". This contains an additional support struct ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","isActive":true},{"type":"text","text":" required by the result builder."}]},{"syntax":"swift","code":["struct MyRequestContext: RouterRequestContext {","    public var routerContext: RouterBuilderContext","    public var coreContext: CoreRequestContextStorage","","    public init(source: Source) {","        self.coreContext = .init(source: source)","        self.routerContext = .init()","    }","}"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Common-Route-Verbs","text":"Common Route Verbs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The common HTTP verbs: GET, PUT, POST, PATCH, HEAD, DELETE, have their own shortcut functions."}]},{"code":["Route(.get, \"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"can be written as","type":"text"}]},{"syntax":"swift","code":["Get(\"health\") { _,_ in","    HTTPResponse.Status.ok","}"],"type":"codeListing"},{"text":"Route middleware","type":"heading","level":2,"anchor":"Route-middleware"},{"inlineContent":[{"type":"text","text":"Routes can be initialised with their own result builder as long as they end with a route "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true},{"type":"text","text":" function that returns the response. This allows us to apply middleware to individual routes."}],"type":"paragraph"},{"code":["Post(\"login\") {","    BasicAuthenticationMiddleware()","    Handle  { request, context in","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are not adding the handler inline you can add the function reference without the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"code":["@Sendable func processLogin(request: Request, context: MyContext) async throws -> Response {","    \/\/ process login","}","RouterBuilder(context: BasicRouterRequestContext.self) {","    ...","    Post(\"login\") {","        BasicAuthenticationMiddleware()","        processLogin","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"RequestContext transformation","type":"heading","anchor":"RequestContext-transformation"},{"inlineContent":[{"text":"You can transform the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","type":"reference","isActive":true},{"type":"text","text":" to a different type for a group of routes using "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","isActive":true},{"type":"text","text":". When you define the "},{"type":"codeVoice","code":"RequestContext"},{"type":"text","text":" type you are converting to you need to define how you initialize it from the original "},{"type":"codeVoice","code":"RequestContext"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["struct MyNewRequestContext: ChildRequestContext {","    typealias ParentContext = BasicRouterRequestContext","    init(context: ParentContext) {","        self.coreContext = context.coreContext","        ...","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Once you have defined how to perform the transform from your original ","type":"text"},{"type":"codeVoice","code":"RequestContext"},{"text":" the conversion is added as follows","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    RouteGroup(\"user\", context: MyNewRequestContext.self) {","        BasicAuthenticationMiddleware()","        Route(.post, \"login\") { request, context in","            ...","        }","    }","}"]},{"text":"Controllers","type":"heading","anchor":"Controllers","level":3},{"type":"paragraph","inlineContent":[{"text":"It is common practice to group routes into controller types that perform operations on a common type eg user management, CRUD operations for an asset type. By conforming your controller type to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController"},{"text":" you can add the contained routes directly into your router eg","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct TodoController<Context: RouterRequestContext>: RouterController {","    var body: some RouterMiddleware<Context> {","        RouteGroup(\"todos\") {","            Put(handler: self.put)","            Get(handler: self.get)","            Patch(handler: self.update)","            Delete(handler: self.delete)","        }","    }","}","let router = RouterBuilder(context: BasicRouterRequestContext.self) {","    TodoController()","}"]},{"text":"Differences from trie router","level":3,"type":"heading","anchor":"Differences-from-trie-router"},{"inlineContent":[{"type":"text","text":"There is one subtle difference between the result builder based "},{"type":"codeVoice","code":"RouterBuilder"},{"type":"text","text":" and the more traditional trie based "},{"type":"codeVoice","code":"Router"},{"type":"text","text":" that comes with "},{"type":"codeVoice","code":"Hummingbird"},{"type":"text","text":" and this is related to how middleware are processed in groups."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"With the trie based ","type":"text"},{"type":"codeVoice","code":"Router"},{"type":"text","text":" a request is matched against an endpoint and then only runs the middleware applied to that endpoint."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the result builder a request is processed by each element of the router result builder until it hits a route that matches its URI and method. If it hits a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","type":"reference","isActive":true},{"type":"text","text":" and this matches the current request uri path component then the request (with matched URI path components dropped) will be processed by the children of the "},{"code":"RouteGroup","type":"codeVoice"},{"type":"text","text":" including its middleware. The request path matching and middleware processing is done at the same time which means middleware only needs its parent "},{"type":"codeVoice","code":"RouteGroup"},{"text":" paths to be matched for it to run.","type":"text"}]}]}],"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Article","role":"article","title":"Result Builder Router"},"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Processing requests and responses outside of request handlers.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","type":"topic","url":"\/documentation\/hummingbird\/middlewareguide","role":"article","title":"Middleware","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Testing":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Using the HummingbirdTesting framework to test your application","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Testing","type":"topic","url":"\/documentation\/hummingbird\/testing","role":"article","title":"Testing","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilder":{"abstract":[{"type":"text","text":"Router built using a result builder"}],"title":"RouterBuilder","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilder","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterBuilder","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterBuilder"}],"url":"\/documentation\/hummingbirdrouter\/routerbuilder"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterController":{"url":"\/documentation\/hummingbirdrouter\/routercontroller","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterController","role":"symbol","title":"RouterController","kind":"symbol","abstract":[{"text":"A type that represents part of your app’s middleware and routes","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterController","kind":"identifier"}],"navigatorTitle":[{"text":"RouterController","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContexts":{"url":"\/documentation\/hummingbird\/requestcontexts","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContexts","kind":"article","type":"topic","title":"Request Contexts","abstract":[{"text":"Controlling contextual data provided to middleware and route handlers","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterRequestContext":{"abstract":[{"type":"text","text":"Protocol that all request contexts used with RouterBuilder should conform to."}],"title":"RouterRequestContext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterRequestContext","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterRequestContext"}],"role":"symbol","navigatorTitle":[{"text":"RouterRequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/routerrequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ServiceLifecycle":{"images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Integration with Swift Service Lifecycle","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ServiceLifecycle","type":"topic","url":"\/documentation\/hummingbird\/servicelifecycle","role":"article","title":"Service Lifecycle","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"kind":"symbol","abstract":[{"text":"Create RouteGroup from RequestContext transform and result builder","type":"text"}],"title":"init(_:context:builder:)","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildHandler"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildContext"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11Hummingbird10RouterPathV","text":"RouterPath"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"context"},{"text":": ","kind":"text"},{"text":"ChildContext","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"builder","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","text":"ChildHandler"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterGuide":{"url":"\/documentation\/hummingbird\/routerguide","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterGuide","kind":"article","type":"topic","title":"Router","abstract":[{"text":"The router directs requests to their handlers based on the contents of their path.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","role":"symbol","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","navigatorTitle":[{"kind":"identifier","text":"Request"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/request","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/PersistentData":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"Persistent data","abstract":[{"type":"text","text":"How to persist data between requests to your server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/PersistentData","type":"topic","url":"\/documentation\/hummingbird\/persistentdata","kind":"article","role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ErrorHandling":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"How to build errors for the server to return.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ErrorHandling","type":"topic","url":"\/documentation\/hummingbird\/errorhandling","role":"article","title":"Error Handling","kind":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouterBuilderContext":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouterBuilderContext","kind":"symbol","type":"topic","abstract":[{"text":"Context data required by ","type":"text"},{"code":"RouterBuilder","type":"codeVoice"}],"role":"symbol","title":"RouterBuilderContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterBuilderContext"}],"navigatorTitle":[{"text":"RouterBuilderContext","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/routerbuildercontext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Router":{"kind":"symbol","title":"Router","abstract":[{"text":"Create rules for routing requests and then create ","type":"text"},{"type":"codeVoice","code":"Responder"},{"type":"text","text":" that will follow these rules."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Router"}],"navigatorTitle":[{"kind":"identifier","text":"Router"}],"type":"topic","url":"\/documentation\/hummingbird\/router","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Router","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"title":"RequestContext","role":"symbol","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is associated with a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"url":"\/documentation\/hummingbird\/requestcontext","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LoggingMetricsAndTracing":{"url":"\/documentation\/hummingbird\/loggingmetricsandtracing","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LoggingMetricsAndTracing","kind":"article","type":"topic","title":"Logging, Metrics and Tracing","abstract":[{"text":"Considered the three pillars of observability, logging, metrics and tracing provide different ways of viewing how your application is working.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/index":{"title":"Hummingbird Documentation","role":"collection","abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/index","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"title":"RouteGroup","role":"symbol","abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouteGroup"}],"type":"topic","url":"\/documentation\/hummingbirdrouter\/routegroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MigratingToV2":{"url":"\/documentation\/hummingbird\/migratingtov2","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MigratingToV2","kind":"article","type":"topic","title":"Migrating to Hummingbird v2","abstract":[{"text":"Migration guide for converting Hummingbird v1 applications to Hummingbird v2","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/EncodingAndDecoding":{"url":"\/documentation\/hummingbird\/encodinganddecoding","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/EncodingAndDecoding","kind":"article","type":"topic","title":"Encoding and Decoding","abstract":[{"text":"Hummingbird uses ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" to decode requests and encode responses.","type":"text"}],"role":"article"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Handle":{"abstract":[{"type":"text","text":"Route Handler Middleware."}],"title":"Handle","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Handle","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Handle","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Handle","kind":"identifier"}],"url":"\/documentation\/hummingbirdrouter\/handle"},"logo.png":{"alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image"}}}