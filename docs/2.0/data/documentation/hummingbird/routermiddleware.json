{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"variants":[{"paths":["\/documentation\/hummingbird\/routermiddleware"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Version of "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","type":"reference","isActive":true},{"type":"text","text":" whose Input is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference","isActive":true},{"type":"text","text":" and output is "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"reference","isActive":true},{"type":"text","text":"."}],"seeAlsoSections":[{"title":"Middleware","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareFixedTypeBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware"],"anchor":"Middleware"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","interfaceLanguage":"swift"},"metadata":{"externalID":"s:11Hummingbird16RouterMiddlewareP","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouterMiddleware"}],"symbolKind":"protocol","roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterMiddleware"}],"title":"RouterMiddleware","modules":[{"name":"Hummingbird"}]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterMiddleware","kind":"identifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context","text":"Context","kind":"typeIdentifier"},{"text":"> : ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","text":"MiddlewareProtocol","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP5InputQa","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Input","text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore7RequestV","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","text":"Request","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP6OutputQa","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Output","text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:15HummingbirdCore8ResponseV","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","text":"Response","kind":"typeIdentifier"}],"languages":["swift"]}]},{"mentions":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide"],"kind":"mentions"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"All middleware has to conform to the protocol ","type":"text"},{"type":"codeVoice","code":"RouterMiddleware"},{"text":". This requires one function ","type":"text"},{"type":"codeVoice","code":"handle(_:context:next)"},{"text":" to be implemented. At some point in this function unless you want to shortcut the router and return your own response you should call ","type":"text"},{"type":"codeVoice","code":"next(request, context)"},{"text":" to continue down the middleware stack and return the result, or a result processed by your middleware.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following is a simple logging middleware that outputs every URI being sent to the server","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public struct LogRequestsMiddleware<Context: RequestContext>: RouterMiddleware {","    public func handle(_ request: Request, context: Context, next: (Request, Context) async throws -> Response) async throws -> Response {","        \/\/ log request URI","        context.logger.log(level: .debug, String(describing:request.uri.path))","        \/\/ pass request onto next middleware or the router and return response","        return try await next(request, context)","    }","}"]}],"kind":"content"}],"relationshipsSections":[{"title":"Inherits From","kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","doc:\/\/com.opticalaberration.hummingbird\/s16SendableMetatypeP"],"type":"inheritsFrom"},{"title":"Inherited By","kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"],"type":"inheritedBy"},{"title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ContextTransform","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/RequestDecompressionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/ResponseCompressionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Route","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ThrowingContextTransform","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketUpgradeMiddleware"],"type":"conformingTypes"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMiddleware":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Version of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","type":"reference"},{"text":" whose Input is ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference"},{"text":" and output is ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"reference"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"RouterMiddleware","kind":"identifier"}],"title":"RouterMiddleware","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","url":"\/documentation\/hummingbird\/routermiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","title":"AuthenticatorMiddleware","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AuthenticatorMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthenticatorMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","abstract":[{"type":"text","text":"Protocol for a middleware that checks if a request is authenticated."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"title":"Request","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"kind":"symbol"},"logo.png":{"type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdBasicAuth/BasicAuthenticator":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Basic password authenticator","type":"text"}],"navigatorTitle":[{"text":"BasicAuthenticator","kind":"identifier"}],"title":"BasicAuthenticator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAuthenticator","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","url":"\/documentation\/hummingbirdbasicauth\/basicauthenticator"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGroup":{"type":"topic","url":"\/documentation\/hummingbird\/middlewaregroup","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareGroup"}],"abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"MiddlewareGroup"}],"title":"MiddlewareGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MetricsMiddleware":{"type":"topic","title":"MetricsMiddleware","url":"\/documentation\/hummingbird\/metricsmiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MetricsMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetricsMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","abstract":[{"text":"Middleware recording metrics for each request","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LogRequestsMiddleware":{"type":"topic","title":"LogRequestsMiddleware","url":"\/documentation\/hummingbird\/logrequestsmiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LogRequestsMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogRequestsMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","abstract":[{"type":"text","text":"Middleware outputting to log for every call to server."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareFixedTypeBuilder":{"type":"topic","title":"MiddlewareFixedTypeBuilder","url":"\/documentation\/hummingbird\/middlewarefixedtypebuilder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MiddlewareFixedTypeBuilder"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MiddlewareFixedTypeBuilder"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareFixedTypeBuilder","abstract":[{"text":"Middleware stack result builder","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Output":{"url":"\/documentation\/hummingbird\/middlewareprotocol\/output","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Output","kind":"identifier"}],"title":"Output","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Output","type":"topic","required":true,"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TracingMiddleware":{"url":"\/documentation\/hummingbird\/tracingmiddleware","type":"topic","title":"TracingMiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"TracingMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TracingMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware","abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket/WebSocketUpgradeMiddleware":{"url":"\/documentation\/hummingbirdwebsocket\/websocketupgrademiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WebSocketUpgradeMiddleware","kind":"identifier"}],"title":"WebSocketUpgradeMiddleware","abstract":[{"text":"An alternative way to add a WebSocket upgrade to a router via Middleware","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketUpgradeMiddleware","type":"topic","role":"symbol","navigatorTitle":[{"text":"WebSocketUpgradeMiddleware","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/s16SendableMetatypeP":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/s16SendableMetatypeP","type":"unresolvable","title":"Swift.SendableMetatype"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","title":"init(_:context:builder:)","kind":"symbol","abstract":[{"type":"text","text":"Create RouteGroup from RequestContext transform and result builder"}],"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildHandler"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildContext"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"RouterPath","preciseIdentifier":"s:11Hummingbird10RouterPathV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChildContext","preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","text":"ChildHandler","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Input":{"url":"\/documentation\/hummingbird\/middlewareprotocol\/input","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Input"}],"title":"Input","abstract":[],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Input","required":true,"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Context":{"title":"Context","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context","required":true,"kind":"symbol","abstract":[],"url":"\/documentation\/hummingbird\/middlewareprotocol\/context","role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Context","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/ThrowingContextTransform":{"type":"topic","title":"ThrowingContextTransform","url":"\/documentation\/hummingbirdrouter\/throwingcontexttransform","role":"symbol","navigatorTitle":[{"text":"ThrowingContextTransform","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ThrowingContextTransform","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ThrowingContextTransform","abstract":[{"type":"text","text":"Router middleware that transforms the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" and uses it with the contained"},{"type":"text","text":" "},{"type":"text","text":"Middleware chain. Used by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)"}]},"doc://com.opticalaberration.hummingbird/s8SendableP":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionAuthenticator":{"type":"topic","title":"SessionAuthenticator","url":"\/documentation\/hummingbirdauth\/sessionauthenticator","role":"symbol","navigatorTitle":[{"text":"SessionAuthenticator","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionAuthenticator","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","abstract":[{"text":"Session authenticator","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddleware":{"title":"FileMiddleware","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","kind":"symbol","abstract":[{"text":"Middleware for serving static files.","type":"text"}],"url":"\/documentation\/hummingbird\/filemiddleware","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileMiddleware"}],"navigatorTitle":[{"kind":"identifier","text":"FileMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/RequestDecompressionMiddleware":{"type":"topic","title":"RequestDecompressionMiddleware","url":"\/documentation\/hummingbirdcompression\/requestdecompressionmiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestDecompressionMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestDecompressionMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/RequestDecompressionMiddleware","abstract":[{"text":"Middleware for decompressing request bodies","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CORSMiddleware":{"type":"topic","url":"\/documentation\/hummingbird\/corsmiddleware","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CORSMiddleware","kind":"identifier"}],"abstract":[{"text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers.","type":"text"}],"navigatorTitle":[{"text":"CORSMiddleware","kind":"identifier"}],"title":"CORSMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/ClosureAuthenticator":{"url":"\/documentation\/hummingbirdauth\/closureauthenticator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClosureAuthenticator"}],"title":"ClosureAuthenticator","abstract":[{"text":"Authenticator that uses a closure to return authentication state","type":"text"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ClosureAuthenticator"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"url":"\/documentation\/hummingbirdcore\/response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"title":"Response","abstract":[{"type":"text","text":"Holds all the required to generate a HTTP Response"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Response"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"type":"topic","url":"\/documentation\/hummingbirdrouter\/routegroup","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteGroup"}],"abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"title":"RouteGroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","title":"MiddlewareProtocol","kind":"symbol","abstract":[{"type":"text","text":"Middleware protocol with generic input, context and output types"}],"url":"\/documentation\/hummingbird\/middlewareprotocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MiddlewareProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"MiddlewareProtocol","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/ResponseCompressionMiddleware":{"type":"topic","url":"\/documentation\/hummingbirdcompression\/responsecompressionmiddleware","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseCompressionMiddleware"}],"abstract":[{"text":"Middleware for compressing response bodies","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ResponseCompressionMiddleware"}],"title":"ResponseCompressionMiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/ResponseCompressionMiddleware"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"url":"\/documentation\/hummingbird\/requestcontext","title":"RequestContext","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RequestContext"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestContext"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Middleware returning 401 for unauthenticated requests"}],"navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"title":"IsAuthenticatedMiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/ContextTransform":{"type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Router middleware that transforms the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext"},{"type":"text","text":" and uses it with the contained"},{"type":"text","text":" "},{"type":"text","text":"Middleware chain"}],"navigatorTitle":[{"text":"ContextTransform","kind":"identifier"}],"title":"ContextTransform","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ContextTransform","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ContextTransform","url":"\/documentation\/hummingbirdrouter\/contexttransform"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"url":"\/documentation\/hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","title":"Hummingbird","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Route":{"url":"\/documentation\/hummingbirdrouter\/route","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Route","kind":"identifier"}],"abstract":[{"type":"text","text":"Route definition"}],"title":"Route","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Route","type":"topic","role":"symbol","navigatorTitle":[{"text":"Route","kind":"identifier"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGuide":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird\/middlewareguide","type":"topic","title":"Middleware","role":"article","kind":"article","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGuide","abstract":[{"type":"text","text":"Processing requests and responses outside of request handlers."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionMiddleware":{"type":"topic","title":"SessionMiddleware","url":"\/documentation\/hummingbirdauth\/sessionmiddleware","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SessionMiddleware"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SessionMiddleware"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","abstract":[{"type":"text","text":"Middleware that extracts session data for a request and stores it in the context"}]}}}