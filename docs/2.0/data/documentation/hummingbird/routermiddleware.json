{"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/s8SendableP"],"kind":"relationships","type":"inheritsFrom"},{"title":"Inherited By","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware"],"kind":"relationships","type":"inheritedBy"},{"title":"Conforming Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ContextTransform","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/RequestDecompressionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/ResponseCompressionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Route","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ThrowingContextTransform","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketUpgradeMiddleware"],"kind":"relationships","type":"conformingTypes"}],"seeAlsoSections":[{"title":"Middleware","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareFixedTypeBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware"],"generated":true,"anchor":"Middleware"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouterMiddleware"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP7ContextQa","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context"},{"kind":"text","text":"> : "},{"kind":"typeIdentifier","text":"MiddlewareProtocol","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP5InputQa","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Input"},{"text":" == ","kind":"text"},{"text":"Request","preciseIdentifier":"s:15HummingbirdCore7RequestV","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","preciseIdentifier":"s:11Hummingbird18MiddlewareProtocolP6OutputQa","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Output"},{"text":" == ","kind":"text"},{"text":"Response","preciseIdentifier":"s:15HummingbirdCore8ResponseV","kind":"typeIdentifier","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"All middleware has to conform to the protocol ","type":"text"},{"type":"codeVoice","code":"RouterMiddleware"},{"text":". This requires one function ","type":"text"},{"type":"codeVoice","code":"handle(_:context:next)"},{"text":" to be implemented. At some point in this function unless you want to shortcut the router and return your own response you should call ","type":"text"},{"type":"codeVoice","code":"next(request, context)"},{"text":" to continue down the middleware stack and return the result, or a result processed by your middleware.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following is a simple logging middleware that outputs every URI being sent to the server","type":"text"}]},{"type":"codeListing","code":["public struct LogRequestsMiddleware<Context: RequestContext>: RouterMiddleware {","    public func handle(_ request: Request, context: Context, next: (Request, Context) async throws -> Response) async throws -> Response {","        \/\/ log request URI","        context.logger.log(level: .debug, String(describing:request.uri.path))","        \/\/ pass request onto next middleware or the router and return response","        return try await next(request, context)","    }","}"],"syntax":"swift"}]}],"sections":[],"metadata":{"title":"RouterMiddleware","navigatorTitle":[{"text":"RouterMiddleware","kind":"identifier"}],"modules":[{"name":"Hummingbird"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RouterMiddleware"}],"externalID":"s:11Hummingbird16RouterMiddlewareP","roleHeading":"Protocol","symbolKind":"protocol","role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbird\/routermiddleware"]}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]]},"kind":"symbol","abstract":[{"text":"Version of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol"},{"text":" whose Input is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":" and output is ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"type":"text","text":"."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TracingMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TracingMiddleware","title":"TracingMiddleware","abstract":[{"text":"Middleware creating Distributed Tracing spans for each request.","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbird\/tracingmiddleware","navigatorTitle":[{"text":"TracingMiddleware","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TracingMiddleware","kind":"identifier"}],"type":"topic","role":"symbol"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/IsAuthenticatedMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"IsAuthenticatedMiddleware","kind":"identifier"}],"abstract":[{"text":"Middleware returning 401 for unauthenticated requests","type":"text"}],"url":"\/documentation\/hummingbirdauth\/isauthenticatedmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/IsAuthenticatedMiddleware","title":"IsAuthenticatedMiddleware","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IsAuthenticatedMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/ClosureAuthenticator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/ClosureAuthenticator","title":"ClosureAuthenticator","kind":"symbol","abstract":[{"type":"text","text":"Authenticator that uses a closure to return authentication state"}],"url":"\/documentation\/hummingbirdauth\/closureauthenticator","navigatorTitle":[{"kind":"identifier","text":"ClosureAuthenticator"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClosureAuthenticator"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/RequestDecompressionMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"RequestDecompressionMiddleware","kind":"identifier"}],"abstract":[{"text":"Middleware for decompressing request bodies","type":"text"}],"url":"\/documentation\/hummingbirdcompression\/requestdecompressionmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/RequestDecompressionMiddleware","title":"RequestDecompressionMiddleware","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestDecompressionMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression/ResponseCompressionMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression\/ResponseCompressionMiddleware","title":"ResponseCompressionMiddleware","abstract":[{"text":"Middleware for compressing response bodies","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdcompression\/responsecompressionmiddleware","navigatorTitle":[{"text":"ResponseCompressionMiddleware","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseCompressionMiddleware","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MetricsMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MetricsMiddleware"}],"abstract":[{"type":"text","text":"Middleware recording metrics for each request"}],"url":"\/documentation\/hummingbird\/metricsmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MetricsMiddleware","title":"MetricsMiddleware","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetricsMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","title":"Hummingbird","url":"\/documentation\/hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/Route":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/Route","title":"Route","abstract":[{"text":"Route definition","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdrouter\/route","navigatorTitle":[{"text":"Route","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Route","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Output":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Output","title":"Output","abstract":[],"kind":"symbol","url":"\/documentation\/hummingbird\/middlewareprotocol\/output","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Output","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/ThrowingContextTransform":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ThrowingContextTransform","type":"topic","role":"symbol","title":"ThrowingContextTransform","url":"\/documentation\/hummingbirdrouter\/throwingcontexttransform","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ThrowingContextTransform","kind":"identifier"}],"navigatorTitle":[{"text":"ThrowingContextTransform","kind":"identifier"}],"abstract":[{"type":"text","text":"Router middleware that transforms the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"type":"text","text":" and uses it with the contained"},{"type":"text","text":" "},{"type":"text","text":"Middleware chain. Used by "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","isActive":true,"type":"reference"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","kind":"symbol","role":"symbol","title":"Response","url":"\/documentation\/hummingbirdcore\/response","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"navigatorTitle":[{"kind":"identifier","text":"Response"}],"abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareGroup":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"MiddlewareGroup","kind":"identifier"}],"abstract":[{"text":"Group of middleware that can be used to create a responder chain. Each middleware calls the next one","type":"text"}],"url":"\/documentation\/hummingbird\/middlewaregroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareGroup","title":"MiddlewareGroup","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MiddlewareGroup","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/LogRequestsMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"LogRequestsMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware outputting to log for every call to server."}],"url":"\/documentation\/hummingbird\/logrequestsmiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/LogRequestsMiddleware","title":"LogRequestsMiddleware","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogRequestsMiddleware","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/s8SendableP","title":"Swift.Sendable"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/CORSMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/CORSMiddleware","title":"CORSMiddleware","kind":"symbol","abstract":[{"type":"text","text":"Middleware implementing Cross-Origin Resource Sharing (CORS) headers."}],"url":"\/documentation\/hummingbird\/corsmiddleware","navigatorTitle":[{"kind":"identifier","text":"CORSMiddleware"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CORSMiddleware"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Context":{"kind":"symbol","required":true,"role":"symbol","abstract":[],"url":"\/documentation\/hummingbird\/middlewareprotocol\/context","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Context","title":"Context","type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Context","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol/Input":{"kind":"symbol","required":true,"role":"symbol","abstract":[],"url":"\/documentation\/hummingbird\/middlewareprotocol\/input","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol\/Input","title":"Input","type":"topic","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Input"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket/WebSocketUpgradeMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"WebSocketUpgradeMiddleware"}],"abstract":[{"text":"An alternative way to add a WebSocket upgrade to a router via Middleware","type":"text"}],"url":"\/documentation\/hummingbirdwebsocket\/websocketupgrademiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket\/WebSocketUpgradeMiddleware","title":"WebSocketUpgradeMiddleware","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebSocketUpgradeMiddleware"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareProtocol":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol","title":"MiddlewareProtocol","kind":"symbol","abstract":[{"text":"Middleware protocol with generic input, context and output types","type":"text"}],"url":"\/documentation\/hummingbird\/middlewareprotocol","navigatorTitle":[{"text":"MiddlewareProtocol","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MiddlewareProtocol","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionAuthenticator":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SessionAuthenticator","kind":"identifier"}],"abstract":[{"text":"Session authenticator","type":"text"}],"url":"\/documentation\/hummingbirdauth\/sessionauthenticator","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionAuthenticator","title":"SessionAuthenticator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionAuthenticator","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RequestContext":{"navigatorTitle":[{"text":"RequestContext","kind":"identifier"}],"url":"\/documentation\/hummingbird\/requestcontext","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","kind":"symbol","title":"RequestContext","abstract":[{"text":"Protocol that all request contexts should conform to. A RequestContext is a statically typed metadata container for information","type":"text"},{"text":" ","type":"text"},{"text":"that is associated with a ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","isActive":true,"type":"reference"},{"text":", and is therefore instantiated alongside the request.","type":"text"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/RouterMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RouterMiddleware","title":"RouterMiddleware","kind":"symbol","abstract":[{"text":"Version of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareProtocol"},{"text":" whose Input is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request"},{"text":" and output is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response"},{"type":"text","text":"."}],"url":"\/documentation\/hummingbird\/routermiddleware","navigatorTitle":[{"text":"RouterMiddleware","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RouterMiddleware","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/ContextTransform":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ContextTransform","kind":"identifier"}],"abstract":[{"text":"Router middleware that transforms the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/RequestContext","isActive":true,"type":"reference"},{"text":" and uses it with the contained","type":"text"},{"text":" ","type":"text"},{"text":"Middleware chain","type":"text"}],"url":"\/documentation\/hummingbirdrouter\/contexttransform","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/ContextTransform","title":"ContextTransform","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContextTransform","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","kind":"symbol","role":"symbol","title":"Request","url":"\/documentation\/hummingbirdcore\/request","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"navigatorTitle":[{"kind":"identifier","text":"Request"}],"abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup/init(_:context:builder:)":{"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Create RouteGroup from RequestContext transform and result builder"}],"url":"\/documentation\/hummingbirdrouter\/routegroup\/init(_:context:builder:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup\/init(_:context:builder:)","title":"init(_:context:builder:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildHandler","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildContext","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:11Hummingbird10RouterPathV","kind":"typeIdentifier","text":"RouterPath"},{"kind":"text","text":", "},{"kind":"externalParam","text":"context"},{"kind":"text","text":": "},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0lH0L_qd_0_mfp","kind":"typeIdentifier","text":"ChildContext"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"builder"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:17HummingbirdRouter10RouteGroupV_7context7builderACyxAA24ThrowingContextTransformVyxqd_0_qd__GG0A00B4PathV_qd_0_mqd__yXEtc06ParentH0AJ012ChildRequestH0PQyd_0_RszAHRs_AJ18MiddlewareProtocolRd__AjNRd_0_AA0bmH0Rd_0_0H0Qyd__Rsd_0_0A4Core0M0V5InputRtd__AU8ResponseV6OutputRtd__r0_lufc0L7HandlerL_qd__mfp","text":"ChildHandler","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/FileMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/FileMiddleware","kind":"symbol","role":"symbol","title":"FileMiddleware","url":"\/documentation\/hummingbird\/filemiddleware","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FileMiddleware","kind":"identifier"}],"navigatorTitle":[{"text":"FileMiddleware","kind":"identifier"}],"abstract":[{"type":"text","text":"Middleware for serving static files."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/SessionMiddleware":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/SessionMiddleware","title":"SessionMiddleware","kind":"symbol","abstract":[{"text":"Middleware that extracts session data for a request and stores it in the context","type":"text"}],"url":"\/documentation\/hummingbirdauth\/sessionmiddleware","navigatorTitle":[{"text":"SessionMiddleware","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SessionMiddleware","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRouter/RouteGroup":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RouteGroup"}],"abstract":[{"text":"Router middleware that applies a middleware chain to URIs with a specified prefix","type":"text"}],"url":"\/documentation\/hummingbirdrouter\/routegroup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRouter\/RouteGroup","title":"RouteGroup","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RouteGroup"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdBasicAuth/BasicAuthenticator":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdBasicAuth\/BasicAuthenticator","title":"BasicAuthenticator","abstract":[{"type":"text","text":"Basic password authenticator"}],"kind":"symbol","url":"\/documentation\/hummingbirdbasicauth\/basicauthenticator","navigatorTitle":[{"text":"BasicAuthenticator","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicAuthenticator","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/MiddlewareFixedTypeBuilder":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"MiddlewareFixedTypeBuilder","kind":"identifier"}],"abstract":[{"text":"Middleware stack result builder","type":"text"}],"url":"\/documentation\/hummingbird\/middlewarefixedtypebuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/MiddlewareFixedTypeBuilder","title":"MiddlewareFixedTypeBuilder","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MiddlewareFixedTypeBuilder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth/AuthenticatorMiddleware":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AuthenticatorMiddleware","kind":"identifier"}],"abstract":[{"text":"Protocol for a middleware that checks if a request is authenticated.","type":"text"}],"url":"\/documentation\/hummingbirdauth\/authenticatormiddleware","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth\/AuthenticatorMiddleware","title":"AuthenticatorMiddleware","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AuthenticatorMiddleware","kind":"identifier"}]}}}