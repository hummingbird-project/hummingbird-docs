{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction"]]},"sections":[],"metadata":{"externalID":"s:17HummingbirdLambda0B8FunctionV06beforeB6Starts7performyyyYaYbKc_tF","modules":[{"name":"HummingbirdLambda"}],"symbolKind":"method","title":"beforeLambdaStarts(perform:)","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"beforeLambdaStarts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")","kind":"text"}],"role":"symbol"},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeLambdaStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":" "},{"kind":"internalParam","text":"process"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"process","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Process to run before server is started"}]}]}],"kind":"parameters"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is for processes that might need another Service running but need"},{"type":"text","text":" "},{"type":"text","text":"to run before the lambda has started processing requests. For example a"},{"type":"text","text":" "},{"type":"text","text":"database migration process might need the database connection pool running"},{"type":"text","text":" "},{"type":"text","text":"but should be finished before any request to the server can be made. Also"},{"type":"text","text":" "},{"type":"text","text":"there may be situations where you want another Service to have fully initialized"},{"type":"text","text":" "},{"type":"text","text":"before starting the lambda service."}]},{"type":"paragraph","inlineContent":[{"text":"You can call ","type":"text"},{"code":"beforeLambdaStarts","type":"codeVoice"},{"text":" multiple times and each process will still","type":"text"},{"text":" ","type":"text"},{"text":"be called.","type":"text"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/hummingbirdlambda\/lambdafunction\/beforelambdastarts(perform:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Add a process to run before we kick off the lambda runtime service","type":"text"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction\/beforeLambdaStarts(perform:)","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction/beforeLambdaStarts(perform:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction\/beforeLambdaStarts(perform:)","type":"topic","abstract":[{"type":"text","text":"Add a process to run before we kick off the lambda runtime service"}],"title":"beforeLambdaStarts(perform:)","url":"\/documentation\/hummingbirdlambda\/lambdafunction\/beforelambdastarts(perform:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"beforeLambdaStarts"},{"kind":"text","text":"("},{"kind":"externalParam","text":"perform"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdlambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"topic","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"title":"HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}]},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}],"title":"LambdaFunction","abstract":[{"text":"Represents a Lambda function with input\/output and background processes","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","role":"symbol","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdafunction"}}}