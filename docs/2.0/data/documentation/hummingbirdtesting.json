{"variants":[{"paths":["\/documentation\/hummingbirdtesting"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"sections":[],"topicSections":[{"anchor":"Test-Setup","title":"Test Setup","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"]},{"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"],"generated":true},{"anchor":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClient","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestResponse"],"generated":true,"title":"Structures"}],"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"hierarchy":{"paths":[[]]},"metadata":{"roleHeading":"Framework","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}],"externalID":"HummingbirdTesting","title":"HummingbirdTesting","modules":[{"name":"HummingbirdTesting"}],"role":"collection"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"Provides methods for easy setup of unit tests using either the XCTest or Swift Testing frameworks.","type":"text"}],"type":"paragraph"},{"text":"Usage","level":3,"anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Setup your server and run requests to the routes you want to test.","type":"text"}]},{"syntax":"swift","code":["let router = Router()","router.get(\"test\") { _ in","    return \"testing\"","}","let app = Application(router: router)","try await app.test(.router) { client in","    try await client.execute(uri: \"test\", method: .GET) { response in","        #expect(response.status == .ok)","        #expect(String(buffer: response.body) == \"testing\")","    }","}"],"type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","interfaceLanguage":"swift"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"kind":"symbol","url":"\/documentation\/hummingbirdtesting\/testingsetup","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestingSetup"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestingSetup"}],"title":"TestingSetup","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","role":"symbol","abstract":[{"type":"text","text":"Type of test framework"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestResponse":{"abstract":[{"type":"text","text":"Response structure returned by testing framework"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestResponse"}],"kind":"symbol","title":"TestResponse","url":"\/documentation\/hummingbirdtesting\/testresponse","role":"symbol","type":"topic","navigatorTitle":[{"text":"TestResponse","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestResponse"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"url":"\/documentation\/hummingbirdtesting","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdTesting","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"kind":"symbol","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","kind":"typeIdentifier","text":"TestingSetup"},{"kind":"text","text":", ("},{"kind":"keyword","text":"any"},{"kind":"text","text":" "},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp","kind":"typeIdentifier","text":"Value"}],"type":"topic","title":"test(_:_:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Test "},{"type":"codeVoice","code":"Application"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","type":"topic","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"title":"Hummingbird","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"url":"\/documentation\/hummingbirdtesting\/testhttpscheme","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","navigatorTitle":[{"text":"TestHTTPScheme","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"HTTP Scheme to use with AsyncHTTPClient test framework","type":"text"}],"title":"TestHTTPScheme"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"url":"\/documentation\/hummingbirdtesting\/testclientprotocol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestClientProtocol"}],"navigatorTitle":[{"text":"TestClientProtocol","kind":"identifier"}],"title":"TestClientProtocol","abstract":[{"text":"Protocol for client used by HummingbirdTesting","type":"text"}],"type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClient":{"url":"\/documentation\/hummingbirdtesting\/testclient","title":"TestClient","role":"symbol","navigatorTitle":[{"text":"TestClient","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Bare bones single connection HTTP client."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TestClient","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClient","kind":"symbol"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"identifier":"logo.png","type":"image","alt":null}}}