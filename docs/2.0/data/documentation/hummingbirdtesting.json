{"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"anchor":"Related-Documentation","title":"Related Documentation"}],"sections":[],"kind":"symbol","metadata":{"externalID":"HummingbirdTesting","roleHeading":"Framework","symbolKind":"module","title":"HummingbirdTesting","modules":[{"name":"HummingbirdTesting"}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collection"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[[]]},"abstract":[{"text":"Test framework for Hummingbird.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)"],"title":"Test Setup","anchor":"Test-Setup"},{"generated":true,"title":"Protocols","anchor":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"]},{"generated":true,"title":"Structures","anchor":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClient","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestResponse"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Provides methods for easy setup of unit tests using either the XCTest or Swift Testing frameworks."}],"type":"paragraph"},{"type":"heading","text":"Usage","level":3,"anchor":"Usage"},{"inlineContent":[{"type":"text","text":"Setup your server and run requests to the routes you want to test."}],"type":"paragraph"},{"code":["let router = Router()","router.get(\"test\") { _ in","    return \"testing\"","}","let app = Application(router: router)","try await app.test(.router) { client in","    try await client.execute(uri: \"test\", method: .GET) { response in","        #expect(response.status == .ok)","        #expect(String(buffer: response.body) == \"testing\")","    }","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"paths":["\/documentation\/hummingbirdtesting"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestHTTPScheme":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestHTTPScheme","abstract":[{"text":"HTTP Scheme to use with AsyncHTTPClient test framework","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"TestHTTPScheme","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"TestHTTPScheme"}],"title":"TestHTTPScheme","type":"topic","url":"\/documentation\/hummingbirdtesting\/testhttpscheme"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClientProtocol":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestClientProtocol"}],"type":"topic","abstract":[{"type":"text","text":"Protocol for client used by HummingbirdTesting"}],"title":"TestClientProtocol","role":"symbol","url":"\/documentation\/hummingbirdtesting\/testclientprotocol","navigatorTitle":[{"kind":"identifier","text":"TestClientProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClientProtocol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestResponse":{"kind":"symbol","url":"\/documentation\/hummingbirdtesting\/testresponse","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestResponse","kind":"identifier"}],"title":"TestResponse","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestResponse","abstract":[{"text":"Response structure returned by testing framework","type":"text"}],"navigatorTitle":[{"text":"TestResponse","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestingSetup":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestingSetup","abstract":[{"text":"Type of test framework","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"TestingSetup","kind":"identifier"}],"navigatorTitle":[{"text":"TestingSetup","kind":"identifier"}],"title":"TestingSetup","type":"topic","url":"\/documentation\/hummingbirdtesting\/testingsetup"},"logo.png":{"alt":null,"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting":{"images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Test framework for Hummingbird."}],"title":"HummingbirdTesting","url":"\/documentation\/hummingbirdtesting","type":"topic","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTesting/TestClient":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestClient"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTesting\/TestClient","url":"\/documentation\/hummingbirdtesting\/testclient","title":"TestClient","type":"topic","abstract":[{"type":"text","text":"Bare bones single connection HTTP client."}],"navigatorTitle":[{"kind":"identifier","text":"TestClient"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/ApplicationProtocol/test(_:_:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/ApplicationProtocol\/test(_:_:)","abstract":[{"type":"text","text":"Test "},{"code":"Application","type":"codeVoice"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"test"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:18HummingbirdTesting0B5SetupV","text":"TestingSetup","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"any"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:18HummingbirdTesting18TestClientProtocolP","kind":"typeIdentifier","text":"TestClientProtocol"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:11Hummingbird19ApplicationProtocolP0A7TestingE4testyqd__AD0D5SetupV_qd__AD010TestClientC0_pYaYbKXEtYaKlF5ValueL_qd__mfp"}],"title":"test(_:_:)","type":"topic","url":"\/documentation\/hummingbird\/applicationprotocol\/test(_:_:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol"}}}