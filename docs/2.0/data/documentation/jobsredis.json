{"abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"hierarchy":{"paths":[[]]},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"],"title":"Job Queue","anchor":"Job-Queue"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush"],"generated":true,"title":"Enumerations","anchor":"Enumerations"}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"title":"Related Documentation","anchor":"Related-Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres"],"generated":true,"title":"Reference","anchor":"Reference"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird Jobs Queue driver using "},{"identifier":"https:\/\/github.com\/swift-server\/redistack","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently "},{"code":"RediStack","type":"codeVoice"},{"type":"text","text":" is not setup to use "},{"type":"codeVoice","code":"ServiceLifecycle"},{"text":". So to ensure clean shutdown of ","type":"text"},{"type":"codeVoice","code":"RediStack"},{"text":" you either need to use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService"},{"text":" that is part of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},{"text":" or write your own ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" type that will manage the shutdown of a ","type":"text"},{"code":"RedisConnectionPool","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":4,"text":"Using HummingbirdRedis","anchor":"Using-HummingbirdRedis"},{"inlineContent":[{"type":"text","text":"If you choose to use "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" you can setup a JobQueue using "},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" as follows"}],"type":"paragraph"},{"code":["let redisService = try RedisConnectionPoolService(","    .init(hostname: redisHost, port: 6379),","    logger: logger",")","let jobQueue = JobQueue(","    .redis(","        redisService.pool, ","        configuration: .init(","            queueKey: \"MyJobQueue\", ","            pollTime: .milliseconds(50)","        )","    ),","    numWorkers: 10,","    logger: logger",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [redisService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: logger","    )",")","try await serviceGroup.run()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Redis job queue configuration includes two values."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"queueKey","type":"codeVoice"},{"type":"text","text":": Prefix to all the Redis keys used to store queues."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pollTime"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]}]},{"anchor":"Write-RedisConnectionPool-Service","level":4,"type":"heading","text":"Write RedisConnectionPool Service"},{"type":"paragraph","inlineContent":[{"text":"Alternatively you can write your own ","type":"text"},{"code":"Service","type":"codeVoice"},{"type":"text","text":" to manage the lifecycle of the "},{"code":"RedisConnectionPool","type":"codeVoice"},{"type":"text","text":". This basically keeps a reference to the "},{"code":"RedisConnectionPool","type":"codeVoice"},{"type":"text","text":" and waits for graceful shutdown. At graceful shutdown it will close the connection pool. Unfortunately "},{"code":"RedisConnectionPool","type":"codeVoice"},{"type":"text","text":" is not "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" so we either have to add an "},{"code":"@unchecked Sendable","type":"codeVoice"},{"type":"text","text":" to "},{"code":"RedisConnectionPoolService","type":"codeVoice"},{"type":"text","text":" or import "},{"code":"RediStack","type":"codeVoice"},{"type":"text","text":" using "},{"code":"@preconcurrency","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","code":["struct RedisConnectionPoolService: Service, @unchecked Sendable {","    let pool: RedisConnectionPool","","    public func run() async throws {","        \/\/ Wait for graceful shutdown and ignore cancellation error","        try? await gracefulShutdown()","        \/\/ close connection pool","        let promise = self.pool.eventLoop.makePromise(of: Void.self)","        self.pool.close(promise: promise)","        return try await promise.futureResult.get()","    }","}"],"syntax":"swift"},{"anchor":"Additional-Features","level":2,"type":"heading","text":"Additional Features"},{"type":"paragraph","inlineContent":[{"text":"There are features specific to the Redis Job Queue implementation.","type":"text"}]},{"anchor":"Push-Options","level":3,"type":"heading","text":"Push Options"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a number of options you can provide."}]},{"anchor":"Delaying-jobs","level":4,"type":"heading","text":"Delaying jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time."}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"syntax":"swift"},{"anchor":"Cancellation","level":3,"type":"heading","text":"Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","isActive":true},{"type":"text","text":" conforms to protocol "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","isActive":true},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","isActive":true},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","isActive":true},{"type":"text","text":" it will remove it from the pending queue."}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"syntax":"swift"},{"anchor":"Pause-and-Resume","level":3,"type":"heading","text":"Pause and Resume"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","isActive":true,"type":"reference"},{"text":" conforms to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","isActive":true,"type":"reference"},{"text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","isActive":true,"type":"reference"},{"text":". If you supply these function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"text":" returned by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","isActive":true,"type":"reference"},{"text":" you can remove from the pending queue and add them back in at a later date.","type":"text"}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"syntax":"swift"}]}],"metadata":{"symbolKind":"module","externalID":"JobsRedis","modules":[{"name":"JobsRedis"}],"title":"JobsRedis","roleHeading":"Framework","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobsredis"]}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"role":"symbol","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResumableJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"ResumableJobQueue"}],"url":"\/documentation\/jobs\/resumablejobqueue","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"topic","title":"ResumableJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/resume(jobID:)":{"abstract":[{"text":"Moved paused job back onto pending queue","type":"text"}],"type":"topic","title":"resume(jobID:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","url":"\/documentation\/jobsredis\/redisjobqueue\/resume(jobid:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resume"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/pause(jobID:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","title":"pause(jobID:)","kind":"symbol","url":"\/documentation\/jobsredis\/redisjobqueue\/pause(jobid:)","abstract":[{"text":"Temporarily remove job from pending queue","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pause","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","text":"JobID"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisScriptFlush":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisScriptFlush","kind":"identifier"}],"title":"RedisScriptFlush","navigatorTitle":[{"text":"RedisScriptFlush","kind":"identifier"}],"abstract":[{"type":"text","text":"Script flush mode"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush","url":"\/documentation\/jobsredis\/redisscriptflush","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/push(_:options:)":{"role":"symbol","abstract":[{"type":"text","text":"Push job data onto queue"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parameters"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:4Jobs10JobRequestV","text":"JobRequest"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC4push_7optionsAC0C2IDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAH0C10ParametersRzlF0J0L_xmfp","text":"Parameters"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C7OptionsV","text":"JobOptions"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","text":"JobID"}],"url":"\/documentation\/jobsredis\/redisjobqueue\/push(_:options:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","type":"topic","title":"push(_:options:)"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}],"title":"RedisJobQueue","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"abstract":[{"text":"Redis implementation of job queue driver","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","url":"\/documentation\/jobsredis\/redisjobqueue","type":"topic","role":"symbol"},"logo.png":{"type":"image","alt":null,"identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/jobs","title":"Jobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdredis","abstract":[{"text":"Add Redis support to Hummingbird server with RediStack.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/jobspostgres","title":"JobsPostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"title":"RedisConnectionPoolService","navigatorTitle":[{"kind":"identifier","text":"RedisConnectionPoolService"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisConnectionPoolService"}],"type":"topic","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","abstract":[{"text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"url":"\/documentation\/jobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"role":"collection","kind":"symbol","title":"JobsRedis"},"https://github.com/swift-server/redistack":{"title":"RediStack","url":"https:\/\/github.com\/swift-server\/redistack","identifier":"https:\/\/github.com\/swift-server\/redistack","type":"link","titleInlineContent":[{"text":"RediStack","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"type":"topic","navigatorTitle":[{"text":"CancellableJobQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","title":"CancellableJobQueue","kind":"symbol","url":"\/documentation\/jobs\/cancellablejobqueue","abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancellableJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/cancel(jobID:)":{"role":"symbol","abstract":[{"text":"Cancels a job","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"url":"\/documentation\/jobsredis\/redisjobqueue\/cancel(jobid:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","type":"topic","title":"cancel(jobID:)"}}}