{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"JobsRedis","roleHeading":"Framework","symbolKind":"module","externalID":"JobsRedis","modules":[{"name":"JobsRedis"}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"],"anchor":"Related-Documentation","title":"Related Documentation"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"],"anchor":"Job-Queue","title":"Job Queue"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobCleanupParameters"],"anchor":"Structures","generated":true,"title":"Structures"}],"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobsredis"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"Hummingbird Jobs Queue driver using ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/redistack","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Setup","type":"heading","level":3,"text":"Setup"},{"inlineContent":[{"text":"Currently ","type":"text"},{"code":"RediStack","type":"codeVoice"},{"text":" is not setup to use ","type":"text"},{"code":"ServiceLifecycle","type":"codeVoice"},{"text":". So to ensure clean shutdown of ","type":"text"},{"code":"RediStack","type":"codeVoice"},{"text":" you either need to use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService"},{"text":" that is part of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},{"text":" or write your own ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" type that will manage the shutdown of a ","type":"text"},{"code":"RedisConnectionPool","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Using-HummingbirdRedis","type":"heading","level":4,"text":"Using HummingbirdRedis"},{"inlineContent":[{"type":"text","text":"If you choose to use "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" you can setup a JobQueue using "},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" as follows"}],"type":"paragraph"},{"code":["let redisService = try RedisConnectionPoolService(","    .init(hostname: redisHost, port: 6379),","    logger: logger",")","let jobQueue = JobQueue(","    .redis(","        redisService.pool, ","        configuration: .init(","            queueKey: \"MyJobQueue\", ","            pollTime: .milliseconds(50)","        )","    ),","    logger: logger",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [redisService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: logger","    )",")","try await serviceGroup.run()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The Redis job queue configuration includes two values."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"queueKey"},{"text":": Prefix to all the Redis keys used to store queues.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"pollTime","type":"codeVoice"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]}]},{"anchor":"Write-RedisConnectionPool-Service","type":"heading","level":4,"text":"Write RedisConnectionPool Service"},{"inlineContent":[{"text":"Alternatively you can write your own ","type":"text"},{"type":"codeVoice","code":"Service"},{"text":" to manage the lifecycle of the ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPool"},{"text":". This basically keeps a reference to the ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPool"},{"text":" and waits for graceful shutdown. At graceful shutdown it will close the connection pool. Unfortunately ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPool"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" so we either have to add an ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPoolService"},{"text":" or import ","type":"text"},{"type":"codeVoice","code":"RediStack"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"@preconcurrency"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["struct RedisConnectionPoolService: Service, @unchecked Sendable {","    let pool: RedisConnectionPool","","    public func run() async throws {","        \/\/ Wait for graceful shutdown and ignore cancellation error","        try? await gracefulShutdown()","        \/\/ close connection pool","        let promise = self.pool.eventLoop.makePromise(of: Void.self)","        self.pool.close(promise: promise)","        return try await promise.futureResult.get()","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Additional-Features","type":"heading","level":2,"text":"Additional Features"},{"inlineContent":[{"type":"text","text":"There are features specific to the Redis Job Queue implementation."}],"type":"paragraph"},{"anchor":"Push-Options","type":"heading","level":3,"text":"Push Options"},{"inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a number of options you can provide."}],"type":"paragraph"},{"anchor":"Delaying-jobs","type":"heading","level":4,"text":"Delaying jobs"},{"inlineContent":[{"text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"type":"codeListing","syntax":"swift"},{"anchor":"Cancellation","type":"heading","level":3,"text":"Cancellation"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"},{"type":"text","text":" conforms to protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue"},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)"},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)"},{"type":"text","text":" it will remove it from the pending queue."}],"type":"paragraph"},{"code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"type":"codeListing","syntax":"swift"},{"anchor":"Pause-and-Resume","type":"heading","level":3,"text":"Pause and Resume"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","type":"reference","isActive":true},{"type":"text","text":" conforms to protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"reference","isActive":true},{"type":"text","text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","type":"reference","isActive":true},{"type":"text","text":". If you supply these function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","type":"reference","isActive":true},{"type":"text","text":" you can remove from the pending queue and add them back in at a later date."}],"type":"paragraph"},{"code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"type":"codeListing","syntax":"swift"},{"anchor":"Job-retention","type":"heading","level":3,"text":"Job retention"},{"inlineContent":[{"text":"The queue has options to retain jobs once it has finished with them depending on status. By default the queue will retain failed jobs and drop cancelled or completed jobs, but these decisions are configurable.","type":"text"}],"type":"paragraph"},{"code":["let jobQueue = JobQueue(","    .redis(","        redisService.pool, ","        configuration: .init(","            queueKey: \"MyJobQueue\", ","            retentionPolicy: .init(","                completedJobs: .retain, ","                failedJobs: .retain, ","                cancelledJobs: .doNotRetain","            )","        )","    ),","    logger: logger",")"],"type":"codeListing","syntax":"swift"},{"anchor":"Job-queue-cleanup","type":"heading","level":3,"text":"Job queue cleanup"},{"inlineContent":[{"text":"If you do opt to retain jobs after processing you will probably eventually want to clean them up. The Redis queue provides a method ","type":"text"},{"code":"cleanup","type":"codeVoice"},{"text":" which allows you to remove or attempt to re-run jobs based on what state they are in. You should be careful not to do anything to pending or processing jobs while the job queue is being processed as it might confuse the job processor.","type":"text"}],"type":"paragraph"},{"code":["jobQueue.queue.cleanup(","    pendingJobs: .doNothing,","    processingJobs: .doNothing,","    completedJobs: .remove(maxAge: .seconds(7*24*60*60)),","    failedJobs: .rerun,","    cancelledJobs: .remove, ",")"],"type":"codeListing","syntax":"swift"},{"anchor":"Scheduling-cleanup","type":"heading","level":4,"text":"Scheduling cleanup"},{"inlineContent":[{"type":"text","text":"Given this is a job you will probably want to do regularly the queue also provides a job you can use in conjunction with the "},{"type":"codeVoice","code":"JobScheduler"},{"type":"text","text":" that will do the cleanup for you."}],"type":"paragraph"},{"code":["var jobSchedule = JobSchedule()","jobSchedule.addJob(","    jobQueue.queue.cleanupJob,","    parameters: .init(completedJobs: .remove, failedJobs: .rerun, cancelledJobs: .remove),","    schedule: .weekly(day: .sunday)",")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can find out more about the Job scheduler in the Jobs guide "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide#Job-Scheduler"}],"type":"paragraph"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","kind":"symbol","title":"Jobs","type":"topic","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/jobs"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/pause(jobID:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pause"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","text":"JobID"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","abstract":[{"text":"Temporarily remove job from pending queue","type":"text"}],"url":"\/documentation\/jobsredis\/redisjobqueue\/pause(jobid:)","title":"pause(jobID:)"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"abstract":[{"type":"text","text":"Protocol for Job queue driver which implements resumable jobs"}],"title":"ResumableJobQueue","url":"\/documentation\/jobs\/resumablejobqueue","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResumableJobQueue","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ResumableJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","title":"HummingbirdRedis","type":"topic","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdredis"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","title":"Hummingbird","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"title":"RedisConnectionPoolService","kind":"symbol","navigatorTitle":[{"text":"RedisConnectionPoolService","kind":"identifier"}],"type":"topic","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","role":"symbol"},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/cancel(jobID:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"text":"JobID","kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"abstract":[{"text":"Cancels a job","type":"text"}],"title":"cancel(jobID:)","type":"topic","url":"\/documentation\/jobsredis\/redisjobqueue\/cancel(jobid:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/JobsGuide#Job-Scheduler":{"url":"\/documentation\/hummingbird\/jobsguide#Job-Scheduler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/JobsGuide#Job-Scheduler","title":"Job Scheduler","kind":"section","abstract":[],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"title":"JobsRedis","kind":"symbol","type":"topic","url":"\/documentation\/jobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/resume(jobID:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","url":"\/documentation\/jobsredis\/redisjobqueue\/resume(jobid:)","role":"symbol","abstract":[{"text":"Moved paused job back onto pending queue","type":"text"}],"type":"topic","title":"resume(jobID:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier","text":"JobID"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}]},"https://github.com/swift-server/redistack":{"url":"https:\/\/github.com\/swift-server\/redistack","title":"RediStack","identifier":"https:\/\/github.com\/swift-server\/redistack","titleInlineContent":[{"text":"RediStack","type":"text"}],"type":"link"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"abstract":[{"type":"text","text":"Redis implementation of job queue driver"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}],"title":"RedisJobQueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"type":"topic","url":"\/documentation\/jobsredis\/redisjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/push(_:options:)":{"abstract":[{"text":"Push job data onto queue","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:4Jobs10JobRequestV","text":"JobRequest","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC4push_7optionsAC0C2IDV0A00C7RequestVyxG_AC0C7OptionsVtYaKSeRzSERzs8SendableRzlF10ParametersL_xmfp","text":"Parameters","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C7OptionsV","text":"JobOptions","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"JobID","kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"}],"title":"push(_:options:)","kind":"symbol","type":"topic","url":"\/documentation\/jobsredis\/redisjobqueue\/push(_:options:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","url":"\/documentation\/jobspostgres","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"type":"topic","title":"JobsPostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"navigatorTitle":[{"kind":"identifier","text":"CancellableJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","role":"symbol","title":"CancellableJobQueue","url":"\/documentation\/jobs\/cancellablejobqueue","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancellableJobQueue"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobCleanupParameters":{"role":"symbol","url":"\/documentation\/jobsredis\/redisjobcleanupparameters","navigatorTitle":[{"text":"RedisJobCleanupParameters","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobCleanupParameters","title":"RedisJobCleanupParameters","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisJobCleanupParameters","kind":"identifier"}],"abstract":[{"text":"Parameters for Cleanup job","type":"text"}]}}}