{"sections":[],"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"metadata":{"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"title":"JobsRedis","roleHeading":"Framework","symbolKind":"module","externalID":"JobsRedis","modules":[{"name":"JobsRedis"}]},"kind":"symbol","topicSections":[{"anchor":"Job-Queue","title":"Job Queue","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"]},{"anchor":"Enumerations","title":"Enumerations","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Hummingbird Jobs Queue driver using ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/redistack","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"anchor":"Setup","type":"heading","level":3,"text":"Setup"},{"type":"paragraph","inlineContent":[{"text":"Currently ","type":"text"},{"code":"RediStack","type":"codeVoice"},{"text":" is not setup to use ","type":"text"},{"code":"ServiceLifecycle","type":"codeVoice"},{"text":". So to ensure clean shutdown of ","type":"text"},{"code":"RediStack","type":"codeVoice"},{"text":" you either need to use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","type":"reference"},{"text":" that is part of ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"reference"},{"text":" or write your own ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" type that will manage the shutdown of a ","type":"text"},{"code":"RedisConnectionPool","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Using-HummingbirdRedis","type":"heading","level":4,"text":"Using HummingbirdRedis"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you choose to use "},{"type":"codeVoice","code":"HummingbirdRedis"},{"type":"text","text":" you can setup a JobQueue using "},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" as follows"}]},{"syntax":"swift","code":["let redisService = try RedisConnectionPoolService(","    .init(hostname: redisHost, port: 6379),","    logger: logger",")","let jobQueue = JobQueue(","    .redis(","        redisService.pool, ","        configuration: .init(","            queueKey: \"MyJobQueue\", ","            pollTime: .milliseconds(50)","        )","    ),","    numWorkers: 10,","    logger: logger",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [redisService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: logger","    )",")","try await serviceGroup.run()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Redis job queue configuration includes two values."}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"queueKey"},{"text":": Prefix to all the Redis keys used to store queues.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"pollTime","type":"codeVoice"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Write-RedisConnectionPool-Service","type":"heading","level":4,"text":"Write RedisConnectionPool Service"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can write your own "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" to manage the lifecycle of the "},{"type":"codeVoice","code":"RedisConnectionPool"},{"type":"text","text":". This basically keeps a reference to the "},{"type":"codeVoice","code":"RedisConnectionPool"},{"type":"text","text":" and waits for graceful shutdown. At graceful shutdown it will close the connection pool. Unfortunately "},{"type":"codeVoice","code":"RedisConnectionPool"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" so we either have to add an "},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" to "},{"type":"codeVoice","code":"RedisConnectionPoolService"},{"type":"text","text":" or import "},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" using "},{"type":"codeVoice","code":"@preconcurrency"},{"type":"text","text":"."}]},{"syntax":"swift","code":["struct RedisConnectionPoolService: Service, @unchecked Sendable {","    let pool: RedisConnectionPool","","    public func run() async throws {","        \/\/ Wait for graceful shutdown and ignore cancellation error","        try? await gracefulShutdown()","        \/\/ close connection pool","        let promise = self.pool.eventLoop.makePromise(of: Void.self)","        self.pool.close(promise: promise)","        return try await promise.futureResult.get()","    }","}"],"type":"codeListing"},{"anchor":"Additional-Features","type":"heading","level":2,"text":"Additional Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are features specific to the Redis Job Queue implementation."}]},{"anchor":"Push-Options","type":"heading","level":3,"text":"Push Options"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a number of options you can provide."}]},{"anchor":"Delaying-jobs","type":"heading","level":4,"text":"Delaying jobs"},{"type":"paragraph","inlineContent":[{"text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time.","type":"text"}]},{"syntax":"swift","code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"type":"codeListing"},{"anchor":"Cancellation","type":"heading","level":3,"text":"Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","type":"reference"},{"type":"text","text":" conforms to protocol "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","type":"reference"},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","type":"reference"},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","type":"reference"},{"type":"text","text":" it will remove it from the pending queue."}]},{"syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"type":"codeListing"},{"anchor":"Pause-and-Resume","type":"heading","level":3,"text":"Pause and Resume"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","type":"reference"},{"text":" conforms to protocol ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"reference"},{"text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","type":"reference"},{"text":". If you supply these function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"text":" returned by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","type":"reference"},{"text":" you can remove from the pending queue and add them back in at a later date.","type":"text"}]},{"syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobsredis"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/pause(jobID:)":{"kind":"symbol","url":"\/documentation\/jobsredis\/redisjobqueue\/pause(jobid:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pause","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","abstract":[{"text":"Temporarily remove job from pending queue","type":"text"}],"title":"pause(jobID:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","title":"RedisJobQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisJobQueue"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisJobQueue"}],"url":"\/documentation\/jobsredis\/redisjobqueue","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Redis implementation of job queue driver"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"url":"\/documentation\/jobspostgres","images":[{"identifier":"logo.png","type":"icon"}],"title":"JobsPostgres","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"url":"\/documentation\/jobs","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","title":"Jobs","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"url":"\/documentation\/jobs\/cancellablejobqueue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancellableJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"CancellableJobQueue"}],"abstract":[{"text":"Protocol for Job queue driver which implement cancellable jobs","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","title":"CancellableJobQueue","role":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"url":"\/documentation\/jobsredis","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","title":"JobsRedis","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"kind":"symbol","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","title":"ResumableJobQueue","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResumableJobQueue"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ResumableJobQueue"}],"url":"\/documentation\/jobs\/resumablejobqueue","type":"topic","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"kind":"symbol"},"https://github.com/swift-server/redistack":{"title":"RediStack","url":"https:\/\/github.com\/swift-server\/redistack","titleInlineContent":[{"type":"text","text":"RediStack"}],"type":"link","identifier":"https:\/\/github.com\/swift-server\/redistack"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/cancel(jobID:)":{"title":"cancel(jobID:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"kind":"symbol","abstract":[{"text":"Cancels a job","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","type":"topic","url":"\/documentation\/jobsredis\/redisjobqueue\/cancel(jobid:)"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"url":"\/documentation\/hummingbirdredis","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","title":"HummingbirdRedis","role":"collection","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/push(_:options:)":{"kind":"symbol","url":"\/documentation\/jobsredis\/redisjobqueue\/push(_:options:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parameters"},{"kind":"text","text":">("},{"preciseIdentifier":"s:4Jobs10JobRequestV","kind":"typeIdentifier","text":"JobRequest"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC4push_7optionsAC0C2IDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAH0C10ParametersRzlF0J0L_xmfp","kind":"typeIdentifier","text":"Parameters"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C7OptionsV","kind":"typeIdentifier","text":"JobOptions"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier","text":"JobID"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","abstract":[{"type":"text","text":"Push job data onto queue"}],"title":"push(_:options:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","title":"RedisConnectionPoolService","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"RedisConnectionPoolService","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/resume(jobID:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resume"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Moved paused job back onto pending queue"}],"type":"topic","title":"resume(jobID:)","kind":"symbol","url":"\/documentation\/jobsredis\/redisjobqueue\/resume(jobid:)","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisScriptFlush":{"url":"\/documentation\/jobsredis\/redisscriptflush","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisScriptFlush","kind":"identifier"}],"navigatorTitle":[{"text":"RedisScriptFlush","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush","kind":"symbol","title":"RedisScriptFlush","abstract":[{"text":"Script flush mode","type":"text"}],"role":"symbol","type":"topic"}}}