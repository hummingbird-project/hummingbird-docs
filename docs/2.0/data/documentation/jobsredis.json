{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobsredis"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Hummingbird Jobs Queue driver using ","type":"text"},{"identifier":"https:\/\/github.com\/swift-server\/redistack","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"text":"Currently ","type":"text"},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" is not setup to use "},{"type":"codeVoice","code":"ServiceLifecycle"},{"text":". So to ensure clean shutdown of ","type":"text"},{"code":"RediStack","type":"codeVoice"},{"type":"text","text":" you either need to use the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","type":"reference","isActive":true},{"text":" that is part of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis"},{"text":" or write your own ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" type that will manage the shutdown of a ","type":"text"},{"code":"RedisConnectionPool","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Using-HummingbirdRedis","type":"heading","text":"Using HummingbirdRedis","level":4},{"type":"paragraph","inlineContent":[{"text":"If you choose to use ","type":"text"},{"code":"HummingbirdRedis","type":"codeVoice"},{"type":"text","text":" you can setup a JobQueue using "},{"type":"codeVoice","code":"RediStack"},{"text":" as follows","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let redisService = try RedisConnectionPoolService(","    .init(hostname: redisHost, port: 6379),","    logger: logger",")","let jobQueue = JobQueue(","    .redis(","        redisService.pool, ","        configuration: .init(","            queueKey: \"MyJobQueue\", ","            pollTime: .milliseconds(50)","        )","    ),","    numWorkers: 10,","    logger: logger",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [redisService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: logger","    )",")","try await serviceGroup.run()"]},{"type":"paragraph","inlineContent":[{"text":"The Redis job queue configuration includes two values.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"queueKey"},{"text":": Prefix to all the Redis keys used to store queues.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"pollTime"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]}]},{"anchor":"Write-RedisConnectionPool-Service","level":4,"type":"heading","text":"Write RedisConnectionPool Service"},{"inlineContent":[{"type":"text","text":"Alternatively you can write your own "},{"type":"codeVoice","code":"Service"},{"text":" to manage the lifecycle of the ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPool"},{"type":"text","text":". This basically keeps a reference to the "},{"code":"RedisConnectionPool","type":"codeVoice"},{"text":" and waits for graceful shutdown. At graceful shutdown it will close the connection pool. Unfortunately ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPool"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" so we either have to add an ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"RedisConnectionPoolService"},{"type":"text","text":" or import "},{"type":"codeVoice","code":"RediStack"},{"type":"text","text":" using "},{"code":"@preconcurrency","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct RedisConnectionPoolService: Service, @unchecked Sendable {","    let pool: RedisConnectionPool","","    public func run() async throws {","        \/\/ Wait for graceful shutdown and ignore cancellation error","        try? await gracefulShutdown()","        \/\/ close connection pool","        let promise = self.pool.eventLoop.makePromise(of: Void.self)","        self.pool.close(promise: promise)","        return try await promise.futureResult.get()","    }","}"]},{"anchor":"Additional-Features","type":"heading","level":2,"text":"Additional Features"},{"inlineContent":[{"text":"There are features specific to the Redis Job Queue implementation.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Push-Options","text":"Push Options","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a number of options you can provide."}]},{"level":4,"type":"heading","anchor":"Delaying-jobs","text":"Delaying jobs"},{"inlineContent":[{"type":"text","text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time."}],"type":"paragraph"},{"code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"type":"codeListing","syntax":"swift"},{"anchor":"Cancellation","level":3,"text":"Cancellation","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","isActive":true,"type":"reference"},{"text":" conforms to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","isActive":true,"type":"reference"},{"text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","isActive":true,"type":"reference"},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)"},{"text":" it will remove it from the pending queue.","type":"text"}]},{"syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"type":"codeListing"},{"text":"Pause and Resume","level":3,"anchor":"Pause-and-Resume","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","isActive":true,"type":"reference"},{"type":"text","text":" conforms to protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue"},{"type":"text","text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","isActive":true},{"text":". If you supply these function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"type":"text","text":" returned by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","isActive":true},{"type":"text","text":" you can remove from the pending queue and add them back in at a later date."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"syntax":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Framework","images":[{"type":"icon","identifier":"logo.png"}],"symbolKind":"module","modules":[{"name":"JobsRedis"}],"role":"collection","title":"JobsRedis","externalID":"JobsRedis"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"hierarchy":{"paths":[[]]},"topicSections":[{"title":"Job Queue","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue"],"anchor":"Job-Queue"},{"title":"Enumerations","generated":true,"anchor":"Enumerations","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush"]}],"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisScriptFlush":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisScriptFlush","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RedisScriptFlush"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RedisScriptFlush"}],"title":"RedisScriptFlush","abstract":[{"text":"Script flush mode","type":"text"}],"url":"\/documentation\/jobsredis\/redisscriptflush"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/cancel(jobID:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"("},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier","text":"JobID"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","title":"cancel(jobID:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/cancel(jobID:)","kind":"symbol","abstract":[{"type":"text","text":"Cancels a job"}],"url":"\/documentation\/jobsredis\/redisjobqueue\/cancel(jobid:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/pause(jobID:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pause"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/pause(jobID:)","abstract":[{"text":"Temporarily remove job from pending queue","type":"text"}],"role":"symbol","title":"pause(jobID:)","url":"\/documentation\/jobsredis\/redisjobqueue\/pause(jobid:)"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/push(_:options:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/push(_:options:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parameters"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:4Jobs10JobRequestV","text":"JobRequest"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:9JobsRedis0B8JobQueueC4push_7optionsAC0C2IDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAH0C10ParametersRzlF0J0L_xmfp","text":"Parameters","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"options","kind":"externalParam"},{"kind":"text","text":": "},{"text":"JobOptions","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C7OptionsV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","kind":"typeIdentifier"}],"title":"push(_:options:)","url":"\/documentation\/jobsredis\/redisjobqueue\/push(_:options:)","type":"topic","kind":"symbol","abstract":[{"text":"Push job data onto queue","type":"text"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","url":"\/documentation\/jobspostgres","title":"JobsPostgres","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"title":"JobsRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","kind":"symbol","url":"\/documentation\/jobsredis","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","role":"collection","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"kind":"symbol","url":"\/documentation\/hummingbirdredis","title":"HummingbirdRedis","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","type":"topic","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}]},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","title":"RedisConnectionPoolService","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"RedisConnectionPoolService","kind":"identifier"}],"url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RedisConnectionPoolService"}],"abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","url":"\/documentation\/hummingbird","title":"Hummingbird","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","role":"symbol","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"title":"ResumableJobQueue","navigatorTitle":[{"text":"ResumableJobQueue","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ResumableJobQueue"}],"url":"\/documentation\/jobs\/resumablejobqueue","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"navigatorTitle":[{"kind":"identifier","text":"CancellableJobQueue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"type":"topic","role":"symbol","title":"CancellableJobQueue","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CancellableJobQueue","kind":"identifier"}],"url":"\/documentation\/jobs\/cancellablejobqueue","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue":{"title":"RedisJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"RedisJobQueue","kind":"identifier"}],"url":"\/documentation\/jobsredis\/redisjobqueue","type":"topic","role":"symbol","navigatorTitle":[{"text":"RedisJobQueue","kind":"identifier"}],"abstract":[{"text":"Redis implementation of job queue driver","type":"text"}]},"https://github.com/swift-server/redistack":{"identifier":"https:\/\/github.com\/swift-server\/redistack","titleInlineContent":[{"text":"RediStack","type":"text"}],"type":"link","url":"https:\/\/github.com\/swift-server\/redistack","title":"RediStack"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis/RedisJobQueue/resume(jobID:)":{"title":"resume(jobID:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9JobsRedis0B8JobQueueC0C2IDV","text":"JobID"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis\/RedisJobQueue\/resume(jobID:)","kind":"symbol","url":"\/documentation\/jobsredis\/redisjobqueue\/resume(jobid:)","abstract":[{"text":"Moved paused job back onto pending queue","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","title":"Jobs","kind":"symbol","url":"\/documentation\/jobs","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}]}}}