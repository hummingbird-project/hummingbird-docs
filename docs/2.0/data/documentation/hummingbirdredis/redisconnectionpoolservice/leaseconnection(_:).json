{"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"leaseConnection"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"operation"},{"kind":"text","text":": "},{"kind":"attribute","text":"@escaping"},{"kind":"text","text":" ("},{"preciseIdentifier":"s:9RediStack15RedisConnectionC","kind":"typeIdentifier","text":"RedisConnection"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"operation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that receives exclusive access to the provided "},{"type":"codeVoice","code":"RedisConnection"},{"type":"text","text":" for the lifetime of the closure for specialized Redis command chains."}]}]}],"kind":"parameters"},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIO.EventLoopFuture"},{"type":"text","text":" that resolves the value of the "},{"type":"codeVoice","code":"NIO.EventLoopFuture"},{"type":"text","text":" in the provided closure operation."}]}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"content":[{"type":"paragraph","inlineContent":[{"text":"Attempting to create PubSub subscriptions with connections leased in the closure will result in a failed ","type":"text"},{"code":"NIO.EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"Warning","type":"aside","style":"warning"},{"inlineContent":[{"code":"RedisConnectionPool","type":"codeVoice"},{"text":" manages PubSub state and requires exclusive control over creating PubSub subscriptions.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This connection "},{"inlineContent":[{"type":"text","text":"MUST NOT"}],"type":"strong"},{"type":"text","text":" be stored outside of the closure. It is only available exclusively within the closure."}]}],"name":"Important","type":"aside","style":"important"},{"inlineContent":[{"type":"text","text":"All operations should be done inside the closure as chained "},{"code":"NIO.EventLoopFuture","type":"codeVoice"},{"type":"text","text":" callbacks."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["let countFuture = pool.leaseConnection {","    let client = $0.logging(to: myLogger)","    return client.authorize(with: userPassword)","        .flatMap { connection.select(database: userDatabase) }","        .flatMap { connection.increment(counterKey) }","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Some commands change the state of the connection that are not tracked client-side,","type":"text"},{"text":" ","type":"text"},{"text":"and will not be automatically reset when the connection is returned to the pool.","type":"text"}]}],"name":"Warning","type":"aside","style":"warning"},{"inlineContent":[{"type":"text","text":"When the connection is reused from the pool, it will retain this state and may affect future commands executed with it."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if "},{"type":"codeVoice","code":"select(database:)"},{"type":"text","text":" is used, all future commands made with this connection will be against the selected database."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To protect against future issues, make sure the final commands executed are to reset the connection to itâ€™s previous known state."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService\/leaseConnection(_:)"},"variants":[{"paths":["\/documentation\/hummingbirdredis\/redisconnectionpoolservice\/leaseconnection(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"leaseConnection"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:9RediStack15RedisConnectionC","text":"RedisConnection"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","text":"T"},{"kind":"text","text":">"}],"extendedModule":"HummingbirdRedis","externalID":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF","roleHeading":"Instance Method","symbolKind":"method","title":"leaseConnection(_:)","role":"symbol","modules":[{"name":"HummingbirdRedis"}]},"abstract":[{"type":"text","text":"Provides limited exclusive access to a connection to be used in a user-defined specialized closure of operations."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService/leaseConnection(_:)":{"url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice\/leaseconnection(_:)","abstract":[{"text":"Provides limited exclusive access to a connection to be used in a user-defined specialized closure of operations.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService\/leaseConnection(_:)","title":"leaseConnection(_:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"leaseConnection","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:9RediStack15RedisConnectionC","text":"RedisConnection","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:16HummingbirdRedis0B21ConnectionPoolServiceV05leaseC0y7NIOCore15EventLoopFutureCyxGAH9RediStack0bC0CclF1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","url":"\/documentation\/hummingbirdredis","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis/RedisConnectionPoolService":{"title":"RedisConnectionPoolService","url":"\/documentation\/hummingbirdredis\/redisconnectionpoolservice","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis\/RedisConnectionPoolService","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RedisConnectionPoolService","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Wrapper for RedisConnectionPool that conforms to ServiceLifecycle Service"}],"navigatorTitle":[{"text":"RedisConnectionPoolService","kind":"identifier"}]}}}