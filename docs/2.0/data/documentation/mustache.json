{"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"variants":[{"paths":["\/documentation\/mustache"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"title":"Reference Documentation","anchor":"Reference-Documentation","generated":true}],"primaryContentSections":[{"kind":"mentions","mentions":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OTPAuthenticationExample","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample"]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about it from the ","type":"text"},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While swift-mustache has been designed to be used with the Hummingbird server framework, it has no dependencies and can be used as a standalone library."}],"type":"paragraph"},{"level":2,"text":"Usage","type":"heading","anchor":"Usage"},{"inlineContent":[{"text":"Load your templates from the filesystem","type":"text"}],"type":"paragraph"},{"code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This will look for all the files with the extension ","type":"text"},{"code":".mustache","type":"codeVoice"},{"text":" in the specified folder and subfolders and attempt to load them. Each file is registered with the name of the file (with subfolder, if inside a subfolder) minus the ","type":"text"},{"code":".mustache","type":"codeVoice"},{"text":" extension.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following code shows how to render an object with a template:","type":"text"}],"type":"paragraph"},{"code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"code":"Mustache","type":"codeVoice"},{"text":" treats an object as a set of key\/value pairs when rendering and renders both dictionaries and objects via ","type":"text"},{"code":"Mirror","type":"codeVoice"},{"text":" reflection.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Support","type":"heading","anchor":"Support"},{"inlineContent":[{"text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache ","type":"text"},{"identifier":"https:\/\/github.com\/mustache\/spec","isActive":true,"type":"reference"},{"text":" with the exception of the Lambda support.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[[]]},"sections":[],"metadata":{"roleHeading":"Framework","role":"collection","modules":[{"name":"Mustache"}],"images":[{"identifier":"logo.png","type":"icon"}],"title":"Mustache","externalID":"Mustache","symbolKind":"module"},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"],"title":"Template Library","anchor":"Template-Library"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"],"title":"Rendering","anchor":"Rendering"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"],"title":"Content Types","anchor":"Content-Types"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"title":"Protocols","anchor":"Protocols","generated":true},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"],"title":"Structures","anchor":"Structures","generated":true}],"kind":"symbol","abstract":[{"text":"Mustache template engine.","type":"text"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"type":"topic","title":"HummingbirdValkey","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift."}],"url":"\/documentation\/hummingbirdvalkey","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"title":"MustacheSequence","url":"\/documentation\/mustache\/mustachesequence","type":"topic","navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","abstract":[{"type":"text","text":"Protocol for objects that can be rendered as a sequence in Mustache"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","title":"HummingbirdFluent","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Integration with Vapor’s Fluent ORM framework.","type":"text"}],"url":"\/documentation\/hummingbirdfluent","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/TodosAuthExample":{"role":"article","title":"Todos with Authentication Example","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/TodosAuthExample","kind":"article","type":"topic","abstract":[{"text":"Example combining Authentication with CRUD operations using fluent-kit","type":"text"}],"url":"\/documentation\/hummingbird\/todosauthexample"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","type":"topic","abstract":[{"text":"Protocol for content types","type":"text"}],"kind":"symbol","role":"symbol","title":"MustacheContentType","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentType"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheContentType"}],"url":"\/documentation\/mustache\/mustachecontenttype"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"role":"symbol","type":"topic","title":"MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","kind":"symbol","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}]},"http://mustache.github.io/mustache.5.html":{"titleInlineContent":[{"type":"text","text":"mustache manual"}],"url":"http:\/\/mustache.github.io\/mustache.5.html","identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"mustache manual","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"role":"symbol","navigatorTitle":[{"text":"MustacheContentTypes","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","url":"\/documentation\/mustache\/mustachecontenttypes","title":"MustacheContentTypes","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"abstract":[{"text":"Map of strings to content types.","type":"text"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"abstract":[{"type":"text","text":"Class holding Mustache template"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTemplate","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"MustacheTemplate","url":"\/documentation\/mustache\/mustachetemplate","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","navigatorTitle":[{"text":"MustacheTemplate","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"abstract":[{"text":"context used in parser error","type":"text"}],"url":"\/documentation\/mustache\/mustacheparsercontext","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParserContext","kind":"identifier"}],"type":"topic","title":"MustacheParserContext","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","navigatorTitle":[{"text":"MustacheParserContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"type":"topic","title":"HummingbirdPostgres","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"url":"\/documentation\/hummingbirdpostgres","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/OTPAuthenticationExample":{"abstract":[{"text":"Example demonstrating how to setup one time passwords, using sessions.","type":"text"}],"type":"topic","kind":"article","role":"article","title":"OTP Authentication Example","url":"\/documentation\/hummingbird\/otpauthenticationexample","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/OTPAuthenticationExample"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"type":"topic","title":"Jobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/jobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}],"title":"MustacheLibrary","url":"\/documentation\/mustache\/mustachelibrary","abstract":[{"text":"Class holding a collection of mustache templates.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTransformable"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"role":"symbol","type":"topic","title":"MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","kind":"symbol","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}]},"https://github.com/mustache/spec":{"identifier":"https:\/\/github.com\/mustache\/spec","url":"https:\/\/github.com\/mustache\/spec","type":"link","titleInlineContent":[{"type":"text","text":"spec"}],"title":"spec"},"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"type":"topic","title":"WSClient","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Support for connecting to WebSocket server.","type":"text"}],"url":"\/documentation\/wsclient","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdAuth","url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","role":"collection","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"type":"topic","title":"HummingbirdCompression","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"url":"\/documentation\/hummingbirdcompression","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"role":"symbol","type":"topic","title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","kind":"symbol","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","title":"Mustache","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Mustache template engine."}],"url":"\/documentation\/mustache","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","title":"HummingbirdLambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"url":"\/documentation\/hummingbirdlambda","role":"collection"}}}