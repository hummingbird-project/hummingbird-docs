{"abstract":[{"type":"text","text":"Mustache template engine."}],"seeAlsoSections":[{"title":"Reference Documentation","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"anchor":"Reference-Documentation"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about it from the ","type":"text"},{"isActive":true,"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While swift-mustache has been designed to be used with the Hummingbird server framework, it has no dependencies and can be used as a standalone library.","type":"text"}]},{"text":"Usage","level":2,"anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Load your templates from the filesystem"}]},{"syntax":"swift","type":"codeListing","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"]},{"type":"paragraph","inlineContent":[{"text":"This will look for all the files with the extension ","type":"text"},{"code":".mustache","type":"codeVoice"},{"text":" in the specified folder and subfolders and attempt to load them. Each file is registered with the name of the file (with subfolder, if inside a subfolder) minus the ","type":"text"},{"code":".mustache","type":"codeVoice"},{"text":" extension.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following code shows how to render an object with a template:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let output = library.render(object, withTemplate: \"myTemplate\")"]},{"type":"paragraph","inlineContent":[{"code":"Mustache","type":"codeVoice"},{"type":"text","text":" treats an object as a set of key\/value pairs when rendering and renders both dictionaries and objects via "},{"code":"Mirror","type":"codeVoice"},{"type":"text","text":" reflection."}]},{"text":"Support","level":2,"anchor":"Support","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache "},{"identifier":"https:\/\/github.com\/mustache\/spec","type":"reference","isActive":true},{"type":"text","text":" with the exception of the Lambda support."}]}]}],"variants":[{"paths":["\/documentation\/mustache"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"],"anchor":"Template-Library"},{"title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"],"anchor":"Rendering"},{"title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"],"anchor":"Content-Types"},{"title":"Protocols","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"anchor":"Protocols"},{"title":"Structures","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"],"anchor":"Structures"}],"metadata":{"externalID":"Mustache","roleHeading":"Framework","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}],"title":"Mustache","modules":[{"name":"Mustache"}],"role":"collection"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"sections":[],"hierarchy":{"paths":[[]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdfluent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","abstract":[{"type":"text","text":"Integration with Vapor’s Fluent ORM framework."}],"images":[{"type":"icon","identifier":"logo.png"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","role":"symbol","kind":"symbol","type":"topic","title":"MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheCustomRenderable"}],"navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/mustache\/mustachelibrary","title":"MustacheLibrary","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLibrary"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLibrary"}],"abstract":[{"type":"text","text":"Class holding a collection of mustache templates."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachetransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","type":"topic","abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"title":"MustacheTransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"abstract":[{"text":"Protocol for content types","type":"text"}],"kind":"symbol","title":"MustacheContentType","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentType","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","role":"symbol","url":"\/documentation\/mustache\/mustachecontenttype","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"topic","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"title":"HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol"},"http://mustache.github.io/mustache.5.html":{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"mustache manual","titleInlineContent":[{"text":"mustache manual","type":"text"}],"url":"http:\/\/mustache.github.io\/mustache.5.html","type":"link"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheContentTypes"}],"url":"\/documentation\/mustache\/mustachecontenttypes","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentTypes"}],"abstract":[{"type":"text","text":"Map of strings to content types."}],"title":"MustacheContentTypes","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"abstract":[{"text":"Middleware for decompressing requests and compressing responses","type":"text"}],"title":"HummingbirdCompression","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","kind":"symbol","type":"topic","role":"collection","url":"\/documentation\/hummingbirdcompression","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"title":"WSClient","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/wsclient"},"https://github.com/mustache/spec":{"title":"spec","identifier":"https:\/\/github.com\/mustache\/spec","titleInlineContent":[{"text":"spec","type":"text"}],"type":"link","url":"https:\/\/github.com\/mustache\/spec"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/mustache\/mustachetemplate","title":"MustacheTemplate","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTemplate","kind":"identifier"}],"navigatorTitle":[{"text":"MustacheTemplate","kind":"identifier"}],"abstract":[{"text":"Class holding Mustache template","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"kind":"symbol","role":"collection","url":"\/documentation\/hummingbirdlambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","type":"topic","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"title":"HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"kind":"symbol","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","title":"HummingbirdWebSocket","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","url":"\/documentation\/hummingbirdwebsocket"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"kind":"symbol","role":"collection","url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","abstract":[{"type":"text","text":"Mustache template engine."}],"title":"Mustache","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"kind":"symbol","role":"collection","url":"\/documentation\/jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","type":"topic","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"title":"Jobs","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"abstract":[{"type":"text","text":"Protocol for objects that can be rendered as a sequence in Mustache"}],"role":"symbol","kind":"symbol","title":"MustacheSequence","navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachesequence","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"title":"MustacheLambda","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachelambda"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"url":"\/documentation\/hummingbirdcore"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","kind":"symbol","url":"\/documentation\/hummingbird","type":"topic","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"abstract":[{"type":"text","text":"context used in parser error"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParserContext"}],"title":"MustacheParserContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParserContext"}],"type":"topic","role":"symbol","url":"\/documentation\/mustache\/mustacheparsercontext"},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"kind":"symbol","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","url":"\/documentation\/hummingbirdpostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"title":"HummingbirdValkey","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","abstract":[{"type":"text","text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift."}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","url":"\/documentation\/hummingbirdvalkey"}}}