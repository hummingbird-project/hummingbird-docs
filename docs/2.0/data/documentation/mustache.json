{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Mustache template engine."}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"],"title":"Template Library","anchor":"Template-Library"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"],"title":"Rendering","anchor":"Rendering"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"],"title":"Content Types","anchor":"Content-Types"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"generated":true,"title":"Protocols","anchor":"Protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"],"generated":true,"title":"Structures","anchor":"Structures"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache"]}],"kind":"symbol","primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about it from the ","type":"text"},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While swift-mustache has been designed to be used with the Hummingbird server framework, it has no dependencies and can be used as a standalone library.","type":"text"}]},{"type":"heading","level":2,"text":"Usage","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Load your templates from the filesystem"}]},{"type":"codeListing","syntax":"swift","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will look for all the files with the extension "},{"type":"codeVoice","code":".mustache"},{"type":"text","text":" in the specified folder and subfolders and attempt to load them. Each file is registered with the name of the file (with subfolder, if inside a subfolder) minus the "},{"type":"codeVoice","code":".mustache"},{"type":"text","text":" extension."}]},{"type":"paragraph","inlineContent":[{"text":"The following code shows how to render an object with a template:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let output = library.render(object, withTemplate: \"myTemplate\")"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Mustache"},{"type":"text","text":" treats an object as a set of key\/value pairs when rendering and renders both dictionaries and objects via "},{"type":"codeVoice","code":"Mirror"},{"type":"text","text":" reflection."}]},{"type":"heading","level":2,"text":"Support","anchor":"Support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache "},{"type":"reference","identifier":"https:\/\/github.com\/mustache\/spec","isActive":true},{"type":"text","text":" with the exception of the Lambda support."}]}]}],"sections":[],"hierarchy":{"paths":[[]]},"metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"externalID":"Mustache","modules":[{"name":"Mustache"}],"role":"collection","title":"Mustache","symbolKind":"module","roleHeading":"Framework"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true,"title":"Reference Documentation","anchor":"Reference-Documentation"}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","type":"topic","role":"collection","url":"\/documentation\/hummingbirdfluent","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor’s Fluent ORM framework."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","kind":"symbol","type":"topic","role":"collection","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","title":"HummingbirdWebSocket","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"title":"MustacheParent","type":"topic","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","url":"\/documentation\/mustache\/mustacheparent","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore","role":"collection","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","abstract":[{"text":"Protocol for objects that can be rendered as a sequence in Mustache","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachesequence","type":"topic","navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"MustacheSequence"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","kind":"symbol","type":"topic","title":"MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"title":"HummingbirdValkey","url":"\/documentation\/hummingbirdvalkey","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","abstract":[{"text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","url":"\/documentation\/mustache","kind":"symbol","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"url":"\/documentation\/mustache\/mustachelibrary","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"abstract":[{"text":"Class holding a collection of mustache templates.","type":"text"}],"navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","title":"MustacheLibrary"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdauth","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres"},"https://github.com/mustache/spec":{"type":"link","titleInlineContent":[{"type":"text","text":"spec"}],"identifier":"https:\/\/github.com\/mustache\/spec","url":"https:\/\/github.com\/mustache\/spec","title":"spec"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"title":"HummingbirdCompression","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","url":"\/documentation\/hummingbirdcompression"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheParserContext","kind":"identifier"}],"abstract":[{"type":"text","text":"context used in parser error"}],"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/mustache\/mustacheparsercontext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","navigatorTitle":[{"text":"MustacheParserContext","kind":"identifier"}],"title":"MustacheParserContext"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"kind":"symbol","url":"\/documentation\/jobs","type":"topic","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","title":"Jobs","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"title":"MustacheTemplate","url":"\/documentation\/mustache\/mustachetemplate","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"MustacheTemplate","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","abstract":[{"text":"Class holding Mustache template","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTemplate","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","type":"topic","role":"collection","url":"\/documentation\/hummingbirdlambda","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}]},"logo.png":{"type":"image","identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"title":"MustacheTransformable","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"type":"text","text":"of Mustache. They allow you to process objects before they are rendered."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentType"}],"url":"\/documentation\/mustache\/mustachecontenttype","navigatorTitle":[{"kind":"identifier","text":"MustacheContentType"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","abstract":[{"type":"text","text":"Protocol for content types"}],"title":"MustacheContentType"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"url":"\/documentation\/mustache\/mustachecustomrenderable","type":"topic","role":"symbol","kind":"symbol","title":"MustacheCustomRenderable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"abstract":[{"text":"Allow object to override standard hummingbird type rendering which uses","type":"text"},{"text":" ","type":"text"},{"code":"String(describing)","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"abstract":[{"type":"text","text":"Map of strings to content types."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","kind":"symbol","title":"MustacheContentTypes","type":"topic","navigatorTitle":[{"text":"MustacheContentTypes","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecontenttypes","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentTypes","kind":"identifier"}],"role":"symbol"},"http://mustache.github.io/mustache.5.html":{"titleInlineContent":[{"type":"text","text":"mustache manual"}],"type":"link","identifier":"http:\/\/mustache.github.io\/mustache.5.html","title":"mustache manual","url":"http:\/\/mustache.github.io\/mustache.5.html"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","url":"\/documentation\/hummingbird","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"title":"WSClient","url":"\/documentation\/wsclient","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","role":"collection"}}}