{"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Mustache template engine.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache"]}],"kind":"symbol","seeAlsoSections":[{"anchor":"Reference-Documentation","title":"Reference Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true}],"sections":[],"metadata":{"symbolKind":"module","externalID":"Mustache","roleHeading":"Framework","title":"Mustache","modules":[{"name":"Mustache"}],"role":"collection","images":[{"identifier":"logo.png","type":"icon"}]},"topicSections":[{"anchor":"Template-Library","title":"Template Library","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate"]},{"anchor":"Rendering","title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]},{"anchor":"Content-Types","title":"Content Types","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes"]},{"anchor":"Protocols","title":"Protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence"],"generated":true},{"anchor":"Structures","title":"Structures","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext"],"generated":true}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Mustache is a “logic-less” templating language commonly used in web and mobile platforms. You can find out more about it from the ","type":"text"},{"identifier":"http:\/\/mustache.github.io\/mustache.5.html","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While swift-mustache has been designed to be used with the Hummingbird server framework, it has no dependencies and can be used as a standalone library.","type":"text"}]},{"text":"Usage","level":2,"type":"heading","anchor":"Usage"},{"type":"paragraph","inlineContent":[{"text":"Load your templates from the filesystem","type":"text"}]},{"type":"codeListing","code":["let library = MustacheLibrary(\"folder\/my\/templates\/are\/in\")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This will look for all the files with the extension ","type":"text"},{"type":"codeVoice","code":".mustache"},{"text":" in the specified folder and subfolders and attempt to load them. Each file is registered with the name of the file (with subfolder, if inside a subfolder) minus the ","type":"text"},{"type":"codeVoice","code":".mustache"},{"text":" extension.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following code shows how to render an object with a template:","type":"text"}]},{"type":"codeListing","code":["let output = library.render(object, withTemplate: \"myTemplate\")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"Mustache","type":"codeVoice"},{"text":" treats an object as a set of key\/value pairs when rendering and renders both dictionaries and objects via ","type":"text"},{"code":"Mirror","type":"codeVoice"},{"text":" reflection.","type":"text"}]},{"text":"Support","level":2,"type":"heading","anchor":"Support"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mustache supports all standard Mustache tags and is fully compliant with the Mustache "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/mustache\/spec"},{"type":"text","text":" with the exception of the Lambda support."}]}],"kind":"content"}],"references":{"http://mustache.github.io/mustache.5.html":{"type":"link","url":"http:\/\/mustache.github.io\/mustache.5.html","titleInlineContent":[{"type":"text","text":"mustache manual"}],"title":"mustache manual","identifier":"http:\/\/mustache.github.io\/mustache.5.html"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTemplate":{"url":"\/documentation\/mustache\/mustachetemplate","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheTemplate"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTemplate","navigatorTitle":[{"kind":"identifier","text":"MustacheTemplate"}],"type":"topic","title":"MustacheTemplate","abstract":[{"type":"text","text":"Class holding Mustache template"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"kind":"symbol","title":"MustacheCustomRenderable","url":"\/documentation\/mustache\/mustachecustomrenderable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","type":"topic","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"code":"String(describing)","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","role":"collection","type":"topic","abstract":[{"type":"text","text":"Working with Postgres databases."}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","title":"HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"kind":"symbol","type":"topic","abstract":[{"text":"Lambda function. Can add this to object being rendered to filter contents of objects.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheLambda"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"role":"symbol","title":"MustacheLambda"},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","url":"\/documentation\/hummingbirdlambda","role":"collection","title":"HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","kind":"symbol","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"url":"\/documentation\/wsclient","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"WSClient","abstract":[{"text":"Support for connecting to WebSocket server.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParserContext":{"abstract":[{"type":"text","text":"context used in parser error"}],"title":"MustacheParserContext","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheParserContext"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParserContext","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParserContext"}],"url":"\/documentation\/mustache\/mustacheparsercontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"title":"HummingbirdCore","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLibrary":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLibrary","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLibrary","url":"\/documentation\/mustache\/mustachelibrary","navigatorTitle":[{"text":"MustacheLibrary","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Class holding a collection of mustache templates."}],"kind":"symbol","title":"MustacheLibrary"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","role":"collection","type":"topic","abstract":[{"text":"Adds support for upgrading HTTP connections to WebSocket.","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","title":"HummingbirdWebSocket"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheSequence":{"kind":"symbol","abstract":[{"type":"text","text":"Protocol for objects that can be rendered as a sequence in Mustache"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheSequence","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheSequence","kind":"identifier"}],"type":"topic","title":"MustacheSequence","navigatorTitle":[{"text":"MustacheSequence","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachesequence","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentTypes":{"kind":"symbol","abstract":[{"type":"text","text":"Map of strings to content types."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentTypes","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheContentTypes"}],"type":"topic","title":"MustacheContentTypes","navigatorTitle":[{"kind":"identifier","text":"MustacheContentTypes"}],"url":"\/documentation\/mustache\/mustachecontenttypes","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"title":"HummingbirdFluent","role":"collection","kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor’s Fluent ORM framework."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"kind":"symbol","title":"MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","type":"topic","abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}]},"https://github.com/mustache/spec":{"identifier":"https:\/\/github.com\/mustache\/spec","type":"link","url":"https:\/\/github.com\/mustache\/spec","title":"spec","titleInlineContent":[{"type":"text","text":"spec"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheContentType":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheContentType","abstract":[{"type":"text","text":"Protocol for content types"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheContentType","kind":"identifier"}],"url":"\/documentation\/mustache\/mustachecontenttype","title":"MustacheContentType","role":"symbol","navigatorTitle":[{"text":"MustacheContentType","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"title":"HummingbirdRedis","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","kind":"symbol","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"url":"\/documentation\/hummingbirdredis","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","role":"collection","abstract":[{"text":"Middleware for decompressing requests and compressing responses","type":"text"}],"type":"topic","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdcompression","title":"HummingbirdCompression"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"abstract":[{"type":"text","text":"Mustache template engine."}],"role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"title":"Mustache","url":"\/documentation\/mustache"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"type":"topic","title":"Jobs","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","url":"\/documentation\/jobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"url":"\/documentation\/hummingbirdauth","role":"collection","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"title":"HummingbirdAuth","abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"type":"text","text":" "},{"type":"text","text":"of using Mirror"}],"url":"\/documentation\/mustache\/mustacheparent","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MustacheParent"}],"navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"role":"symbol","title":"MustacheParent"}}}