{"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"HummingbirdCore"}],"externalID":"HummingbirdCore","symbolKind":"module","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Framework","title":"HummingbirdCore"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based server. The server is setup with a type conforming "},{"type":"codeVoice","code":"ChannelSetup"},{"type":"text","text":" which defines how the server responds. It has two functions "},{"type":"codeVoice","code":"initialize"},{"type":"text","text":" defines how to setup a server channel ie should it be HTTP1, should it include TLS etc and "},{"type":"codeVoice","code":"handle"},{"type":"text","text":" defines how we should respond to individual messages. For example the following is an HTTP1 server that always returns a response containing the word “Hello” in the body."}]},{"type":"codeListing","code":["let server = Server(","    childChannelSetup: HTTP1Channel { (_, responseWriter: consuming ResponseWriter, _) in","        let responseBody = ByteBuffer(string: \"Hello\")","        var bodyWriter = try await responseWriter.writeHead(.init(status: .ok))","        try await bodyWriter.write(responseBody)","        try await bodyWriter.finish(nil)","    },","    configuration: .init(address: .hostname(port: 8080)),","    eventLoopGroup: eventLoopGroup,","    logger: Logger(label: \"HelloServer\")",")"],"syntax":"swift"},{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"In general you won’t need to create a ","type":"text"},{"type":"codeVoice","code":"Server"},{"text":" directly. You would let ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference","isActive":true},{"text":" do this for you. But the ability is left open to you if you want to write your own HTTP server.","type":"text"}],"type":"paragraph"}]},{"type":"heading","anchor":"Lifecycle-management","text":"Lifecycle management","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hummingbird makes use of "},{"type":"reference","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","isActive":true},{"type":"text","text":" to manage startup and shutdown. "},{"type":"codeVoice","code":"Server"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" protocol required by Swift Service Lifecycle. The following will start the above server and ensure it shuts down gracefully on a shutdown signal."}]},{"type":"codeListing","code":["let serviceGroup = ServiceGroup(","    services: [server],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"syntax":"swift"}]}],"sections":[],"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true,"title":"Reference Documentation","anchor":"Reference-Documentation"}],"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections"],"anchor":"Server","title":"Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler"],"anchor":"HTTP-Server","title":"HTTP Server"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody"],"anchor":"Request","title":"Request"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"],"anchor":"Response","title":"Response"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"],"anchor":"Miscellaneous","title":"Miscellaneous"}],"variants":[{"paths":["\/documentation\/hummingbirdcore"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"type":"topic","navigatorTitle":[{"text":"FlatDictionary","kind":"identifier"}],"title":"FlatDictionary","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}],"url":"\/documentation\/hummingbirdcore\/flatdictionary","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlatDictionary","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseWriter":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/responsewriter","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","navigatorTitle":[{"text":"ResponseWriter","kind":"identifier"}],"abstract":[{"type":"text","text":"ResponseWriter that writes directly to AsyncChannel"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseWriter","kind":"identifier"}],"title":"ResponseWriter","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"type":"topic","title":"HummingbirdValkey","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift."}],"url":"\/documentation\/hummingbirdvalkey","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPChannelHandler":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","type":"topic","abstract":[{"text":"Protocol for HTTP channels","type":"text"}],"kind":"symbol","role":"symbol","title":"HTTPChannelHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPChannelHandler","kind":"identifier"}],"navigatorTitle":[{"text":"HTTPChannelHandler","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/httpchannelhandler"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"type":"topic","title":"HummingbirdLambda","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"url":"\/documentation\/hummingbirdlambda","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsDelegate":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsDelegate","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"AvailableConnectionsDelegate","kind":"identifier"}],"title":"AvailableConnectionsDelegate","url":"\/documentation\/hummingbirdcore\/availableconnectionsdelegate","abstract":[{"type":"text","text":"Delegate for "},{"type":"codeVoice","code":"AvailableConnectionsChannelHandler"},{"type":"text","text":" that defines if we should accept"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"title":"Application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"url":"\/documentation\/hummingbird\/application","role":"symbol","abstract":[{"type":"text","text":"Application type bringing together all the components of Hummingbird"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannel":{"kind":"symbol","navigatorTitle":[{"text":"ServerChildChannel","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Generic server child channel setup protocol"}],"url":"\/documentation\/hummingbirdcore\/serverchildchannel","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServerChildChannel","kind":"identifier"}],"title":"ServerChildChannel","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPUserEventHandler":{"abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPUserEventHandler","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"HTTPUserEventHandler","url":"\/documentation\/hummingbirdcore\/httpusereventhandler","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler","navigatorTitle":[{"text":"HTTPUserEventHandler","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/URI":{"abstract":[{"text":"Simple URL parser","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URI","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"URI","url":"\/documentation\/hummingbirdcore\/uri","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","navigatorTitle":[{"text":"URI","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/MaximumAvailableConnections":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MaximumAvailableConnections"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections","url":"\/documentation\/hummingbirdcore\/maximumavailableconnections","title":"MaximumAvailableConnections","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MaximumAvailableConnections"}],"abstract":[{"type":"text","text":"Implementation of "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","isActive":true},{"type":"text","text":" that sets a maximum limit to the number"},{"type":"text","text":" "},{"type":"text","text":"of open connections"}],"kind":"symbol","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","role":"collection","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerConfiguration":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerConfiguration"}],"navigatorTitle":[{"kind":"identifier","text":"ServerConfiguration"}],"abstract":[{"text":"HTTP server configuration","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","url":"\/documentation\/hummingbirdcore\/serverconfiguration","title":"ServerConfiguration"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"abstract":[{"type":"text","text":"Add HTTP2 support to Hummingbird server."}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"type":"topic","title":"Jobs","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"url":"\/documentation\/jobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"title":"ResponseBodyWriter","navigatorTitle":[{"text":"ResponseBodyWriter","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/responsebodywriter","role":"symbol","abstract":[{"type":"text","text":"HTTP Response Body part writer"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","title":"Mustache","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Mustache template engine."}],"url":"\/documentation\/mustache","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/RequestBody":{"abstract":[{"type":"text","text":"Request Body"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RequestBody"}],"type":"topic","kind":"symbol","role":"symbol","title":"RequestBody","url":"\/documentation\/hummingbirdcore\/requestbody","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody","navigatorTitle":[{"kind":"identifier","text":"RequestBody"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Server":{"navigatorTitle":[{"text":"Server","kind":"identifier"}],"title":"Server","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Server","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","url":"\/documentation\/hummingbirdcore\/server","type":"topic","abstract":[{"type":"text","text":"HTTP server class"}],"kind":"symbol"},"https://github.com/swift-server/swift-service-lifecycle":{"title":"Swift Service Lifecycle","identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"link","titleInlineContent":[{"text":"Swift Service Lifecycle","type":"text"}],"url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"title":"Request","navigatorTitle":[{"text":"Request","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/request","role":"symbol","abstract":[{"text":"Holds all the values required to process a request","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Request","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/BindAddress":{"type":"topic","navigatorTitle":[{"text":"BindAddress","kind":"identifier"}],"title":"BindAddress","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","abstract":[{"type":"text","text":"Address to bind server to"}],"url":"\/documentation\/hummingbirdcore\/bindaddress","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindAddress","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannelValue":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServerChildChannelValue","kind":"identifier"}],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ServerChildChannelValue","kind":"identifier"}],"title":"ServerChildChannelValue","url":"\/documentation\/hummingbirdcore\/serverchildchannelvalue","abstract":[{"type":"text","text":"Protocol for typed server child channel"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder":{"abstract":[{"type":"text","text":"Build server that takes an HTTP responder"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPServerBuilder","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","title":"HTTPServerBuilder","url":"\/documentation\/hummingbirdcore\/httpserverbuilder","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","navigatorTitle":[{"text":"HTTPServerBuilder","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"type":"topic","title":"HummingbirdPostgres","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"url":"\/documentation\/hummingbirdpostgres","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"type":"topic","title":"WSClient","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Support for connecting to WebSocket server.","type":"text"}],"url":"\/documentation\/wsclient","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResponseBody"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ResponseBody"}],"title":"ResponseBody","url":"\/documentation\/hummingbirdcore\/responsebody","abstract":[{"type":"text","text":"Response body"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"type":"topic","navigatorTitle":[{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"title":"AvailableConnectionsChannelHandler","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}]},"logo.png":{"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image","identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","title":"HummingbirdFluent","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Integration with Vapor’s Fluent ORM framework.","type":"text"}],"url":"\/documentation\/hummingbirdfluent","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"type":"topic","title":"HummingbirdCompression","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"url":"\/documentation\/hummingbirdcompression","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"Hummingbird","url":"\/documentation\/hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"title":"Response","navigatorTitle":[{"kind":"identifier","text":"Response"}],"url":"\/documentation\/hummingbirdcore\/response","role":"symbol","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1Channel":{"abstract":[{"text":"Child channel for processing HTTP1","type":"text"}],"title":"HTTP1Channel","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTP1Channel"}],"url":"\/documentation\/hummingbirdcore\/http1channel","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HTTP1Channel"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"abstract":[{"text":"Authentication framework and extensions for Hummingbird.","type":"text"}],"type":"topic","kind":"symbol","role":"collection","title":"HummingbirdAuth","url":"\/documentation\/hummingbirdauth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"title":"HummingbirdTLS","role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","url":"\/documentation\/hummingbirdtls","abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}],"type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]}}}