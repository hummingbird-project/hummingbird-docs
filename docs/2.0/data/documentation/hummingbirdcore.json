{"topicSections":[{"title":"Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections"],"anchor":"Server"},{"title":"HTTP Server","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler"],"anchor":"HTTP-Server"},{"title":"Request","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody"],"anchor":"Request"},{"title":"Response","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter"],"anchor":"Response"},{"title":"Miscellaneous","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary"],"anchor":"Miscellaneous"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","metadata":{"title":"HummingbirdCore","role":"collection","externalID":"HummingbirdCore","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"HummingbirdCore"}],"symbolKind":"module","roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS"],"anchor":"Related-Documentation"},{"generated":true,"title":"Reference Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"anchor":"Reference-Documentation"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdcore"]}],"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"HummingbirdCore contains a Swift NIO based server. The server is setup with a type conforming "},{"type":"codeVoice","code":"ChannelSetup"},{"type":"text","text":" which defines how the server responds. It has two functions "},{"type":"codeVoice","code":"initialize"},{"type":"text","text":" defines how to setup a server channel ie should it be HTTP1, should it include TLS etc and "},{"type":"codeVoice","code":"handle"},{"type":"text","text":" defines how we should respond to individual messages. For example the following is an HTTP1 server that always returns a response containing the word “Hello” in the body."}],"type":"paragraph"},{"syntax":"swift","code":["let server = Server(","    childChannelSetup: HTTP1Channel { (_, responseWriter: consuming ResponseWriter, _) in","        let responseBody = ByteBuffer(string: \"Hello\")","        var bodyWriter = try await responseWriter.writeHead(.init(status: .ok))","        try await bodyWriter.write(responseBody)","        try await bodyWriter.finish(nil)","    },","    configuration: .init(address: .hostname(port: 8080)),","    eventLoopGroup: eventLoopGroup,","    logger: Logger(label: \"HelloServer\")",")"],"type":"codeListing"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"In general you won’t need to create a ","type":"text"},{"code":"Server","type":"codeVoice"},{"text":" directly. You would let ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","type":"reference"},{"text":" do this for you. But the ability is left open to you if you want to write your own HTTP server.","type":"text"}]}],"type":"aside"},{"anchor":"Lifecycle-management","text":"Lifecycle management","level":2,"type":"heading"},{"inlineContent":[{"text":"Hummingbird makes use of ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","type":"reference"},{"text":" to manage startup and shutdown. ","type":"text"},{"code":"Server","type":"codeVoice"},{"text":" conforms to the ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" protocol required by Swift Service Lifecycle. The following will start the above server and ensure it shuts down gracefully on a shutdown signal.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let serviceGroup = ServiceGroup(","    services: [server],","    configuration: .init(gracefulShutdownSignals: [.sigterm, .sigint]),","    logger: logger",")","try await serviceGroup.run()"],"type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Server":{"abstract":[{"text":"HTTP server class","type":"text"}],"type":"topic","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Server","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/server","navigatorTitle":[{"text":"Server","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Server","kind":"symbol","title":"Server","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"kind":"symbol","url":"\/documentation\/jobs","type":"topic","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","title":"Jobs","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBody":{"title":"ResponseBody","url":"\/documentation\/hummingbirdcore\/responsebody","navigatorTitle":[{"text":"ResponseBody","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBody","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Response body"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBody","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/URI":{"title":"URI","url":"\/documentation\/hummingbirdcore\/uri","navigatorTitle":[{"text":"URI","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"URI","kind":"identifier"}],"abstract":[{"type":"text","text":"Simple URL parser"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/URI","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","title":"HummingbirdFluent","type":"topic","role":"collection","url":"\/documentation\/hummingbirdfluent","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Integration with Vapor’s Fluent ORM framework."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseWriter":{"title":"ResponseWriter","url":"\/documentation\/hummingbirdcore\/responsewriter","navigatorTitle":[{"text":"ResponseWriter","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseWriter","kind":"identifier"}],"abstract":[{"type":"text","text":"ResponseWriter that writes directly to AsyncChannel"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseWriter","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPChannelHandler":{"title":"HTTPChannelHandler","url":"\/documentation\/hummingbirdcore\/httpchannelhandler","navigatorTitle":[{"kind":"identifier","text":"HTTPChannelHandler"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPChannelHandler"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPChannelHandler","abstract":[{"type":"text","text":"Protocol for HTTP channels"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerConfiguration":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/serverconfiguration","title":"ServerConfiguration","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ServerConfiguration"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerConfiguration","abstract":[{"text":"HTTP server configuration","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerConfiguration"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Request":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/request","title":"Request","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Request"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Request","abstract":[{"type":"text","text":"Holds all the values required to process a request"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannel":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/serverchildchannel","title":"ServerChildChannel","role":"symbol","navigatorTitle":[{"text":"ServerChildChannel","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannel","abstract":[{"type":"text","text":"Generic server child channel setup protocol"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ServerChildChannel","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPUserEventHandler":{"title":"HTTPUserEventHandler","url":"\/documentation\/hummingbirdcore\/httpusereventhandler","navigatorTitle":[{"text":"HTTPUserEventHandler","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPUserEventHandler","kind":"identifier"}],"type":"topic","abstract":[],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPUserEventHandler","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/MaximumAvailableConnections":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/maximumavailableconnections","title":"MaximumAvailableConnections","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MaximumAvailableConnections"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/MaximumAvailableConnections","abstract":[{"text":"Implementation of ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","type":"reference","isActive":true},{"text":" that sets a maximum limit to the number","type":"text"},{"text":" ","type":"text"},{"text":"of open connections","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MaximumAvailableConnections"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsDelegate":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/availableconnectionsdelegate","title":"AvailableConnectionsDelegate","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsDelegate","abstract":[{"type":"text","text":"Delegate for "},{"type":"codeVoice","code":"AvailableConnectionsChannelHandler"},{"type":"text","text":" that defines if we should accept"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AvailableConnectionsDelegate"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird/Application":{"title":"Application","url":"\/documentation\/hummingbird\/application","navigatorTitle":[{"text":"Application","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Application","kind":"identifier"}],"abstract":[{"text":"Application type bringing together all the components of Hummingbird","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird\/Application","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/RequestBody":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore\/requestbody","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RequestBody","kind":"identifier"}],"abstract":[{"text":"Request Body","type":"text"}],"navigatorTitle":[{"text":"RequestBody","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/RequestBody","title":"RequestBody"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdTLS":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","title":"HummingbirdTLS","type":"topic","abstract":[{"text":"Add TLS support to Hummingbird server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdTLS","url":"\/documentation\/hummingbirdtls","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ResponseBodyWriter":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ResponseBodyWriter","title":"ResponseBodyWriter","type":"topic","role":"symbol","navigatorTitle":[{"text":"ResponseBodyWriter","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/responsebodywriter","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResponseBodyWriter","kind":"identifier"}],"abstract":[{"text":"HTTP Response Body part writer","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"title":"WSClient","url":"\/documentation\/wsclient","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/BindAddress":{"type":"topic","abstract":[{"type":"text","text":"Address to bind server to"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindAddress","kind":"identifier"}],"url":"\/documentation\/hummingbirdcore\/bindaddress","navigatorTitle":[{"text":"BindAddress","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/BindAddress","title":"BindAddress","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/FlatDictionary":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/FlatDictionary","type":"topic","title":"FlatDictionary","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlatDictionary"}],"url":"\/documentation\/hummingbirdcore\/flatdictionary","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlatDictionary"}],"abstract":[{"text":"Provides Dictionary like indexing, but uses a flat array of key","type":"text"},{"text":" ","type":"text"},{"text":"value pairs, plus an array of hash keys for lookup for storage.","type":"text"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"kind":"symbol","type":"topic","url":"\/documentation\/hummingbirdcore","role":"collection","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","kind":"symbol","url":"\/documentation\/hummingbirdauth","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"title":"HummingbirdAuth"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"title":"HummingbirdCompression","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","url":"\/documentation\/hummingbirdcompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/Response":{"kind":"symbol","title":"Response","url":"\/documentation\/hummingbirdcore\/response","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Response"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/Response","abstract":[{"text":"Holds all the required to generate a HTTP Response","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Response"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"kind":"symbol","url":"\/documentation\/hummingbird","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTPServerBuilder":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTPServerBuilder","type":"topic","title":"HTTPServerBuilder","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"HTTPServerBuilder"}],"url":"\/documentation\/hummingbirdcore\/httpserverbuilder","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HTTPServerBuilder"}],"abstract":[{"type":"text","text":"Build server that takes an HTTP responder"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/AvailableConnectionsChannelHandler":{"kind":"symbol","url":"\/documentation\/hummingbirdcore\/availableconnectionschannelhandler","title":"AvailableConnectionsChannelHandler","role":"symbol","navigatorTitle":[{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/AvailableConnectionsChannelHandler","abstract":[{"type":"text","text":"Channel Handler that controls whether we should accept new connections"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AvailableConnectionsChannelHandler","kind":"identifier"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"title":"HummingbirdValkey","url":"\/documentation\/hummingbirdvalkey","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","abstract":[{"text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift.","type":"text"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdHTTP2":{"title":"HummingbirdHTTP2","url":"\/documentation\/hummingbirdhttp2","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"text":"Add HTTP2 support to Hummingbird server.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdHTTP2","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","url":"\/documentation\/mustache","kind":"symbol","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","title":"Mustache","images":[{"type":"icon","identifier":"logo.png"}]},"logo.png":{"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/HTTP1Channel":{"title":"HTTP1Channel","url":"\/documentation\/hummingbirdcore\/http1channel","navigatorTitle":[{"text":"HTTP1Channel","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTP1Channel","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Child channel for processing HTTP1"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/HTTP1Channel","kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","title":"HummingbirdLambda","type":"topic","role":"collection","url":"\/documentation\/hummingbirdlambda","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore/ServerChildChannelValue":{"abstract":[{"text":"Protocol for typed server child channel","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ServerChildChannelValue"}],"url":"\/documentation\/hummingbirdcore\/serverchildchannelvalue","navigatorTitle":[{"kind":"identifier","text":"ServerChildChannelValue"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore\/ServerChildChannelValue","kind":"symbol","title":"ServerChildChannelValue","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","kind":"symbol","type":"topic","role":"collection","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","title":"HummingbirdWebSocket","images":[{"identifier":"logo.png","type":"icon"}]},"https://github.com/swift-server/swift-service-lifecycle":{"identifier":"https:\/\/github.com\/swift-server\/swift-service-lifecycle","title":"Swift Service Lifecycle","titleInlineContent":[{"type":"text","text":"Swift Service Lifecycle"}],"type":"link","url":"https:\/\/github.com\/swift-server\/swift-service-lifecycle"}}}