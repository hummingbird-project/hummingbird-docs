{"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","interfaceLanguage":"swift"},"topicSections":[{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"],"title":"Instance Methods","anchor":"Instance-Methods"}],"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"sections":[],"seeAlsoSections":[{"generated":true,"anchor":"Rendering","title":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","metadata":{"roleHeading":"Protocol","title":"MustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"symbolKind":"protocol","role":"symbol","externalID":"s:8Mustache0A13TransformableP","modules":[{"name":"Mustache"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}]},"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"The syntax for applying transforms is ","type":"text"},{"code":"{{transform(variable)}}","type":"codeVoice"},{"text":". Transforms can be applied to both","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variables, sections and inverted sections."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple example would be ensuring a string is lowercase."}]},{"syntax":null,"type":"codeListing","code":["{{lowercased(myString)}}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If applying a transform to a sequence then the closing element of the sequence should include the"},{"text":" ","type":"text"},{"text":"transform name eg","type":"text"}]},{"type":"codeListing","code":["{{#reversed(sequence)}}{{.}}{{\\reversed(sequence)}}"],"syntax":null}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachetransformable"]}],"references":{"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"type":"topic","kind":"symbol","title":"Mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","url":"\/documentation\/mustache","abstract":[{"text":"Mustache template engine.","type":"text"}],"role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable/transform(_:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"transform","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"required":true,"abstract":[],"kind":"symbol","role":"symbol","url":"\/documentation\/mustache\/mustachetransformable\/transform(_:)","title":"transform(_:)","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Documentation for Hummingbird the lightweight, flexible, modern server framework.","type":"text"}],"title":"Hummingbird Documentation","type":"topic","url":"\/documentation\/index","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"logo.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png","alt":null},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"title":"MustacheTransformable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MustacheTransformable"}],"abstract":[{"text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation","type":"text"},{"text":" ","type":"text"},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"MustacheTransformable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"url":"\/documentation\/mustache\/mustachecustomrenderable","role":"symbol","kind":"symbol","type":"topic","title":"MustacheCustomRenderable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String(describing)"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"MustacheCustomRenderable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheCustomRenderable","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"title":"MustacheParent","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheParent","kind":"identifier"}],"abstract":[{"text":"Protocol for object that has a custom method for accessing their children, instead","type":"text"},{"text":" ","type":"text"},{"text":"of using Mirror","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"MustacheParent","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","url":"\/documentation\/mustache\/mustacheparent","type":"topic","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"url":"\/documentation\/mustache\/mustachelambda","role":"symbol","kind":"symbol","type":"topic","title":"MustacheLambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda","abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"navigatorTitle":[{"text":"MustacheLambda","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheLambda","kind":"identifier"}]}}}