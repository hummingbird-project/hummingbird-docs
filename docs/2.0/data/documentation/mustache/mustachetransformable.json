{"hierarchy":{"paths":[["doc:\/\/com.opticalaberration.hummingbird\/documentation\/index","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"]]},"seeAlsoSections":[{"anchor":"Rendering","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"],"generated":true,"title":"Rendering"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)"]}],"metadata":{"roleHeading":"Protocol","role":"symbol","externalID":"s:8Mustache0A13TransformableP","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheTransformable","kind":"identifier"}],"modules":[{"name":"Mustache"}],"title":"MustacheTransformable","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheTransformable","kind":"identifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax for applying transforms is "},{"type":"codeVoice","code":"{{transform(variable)}}"},{"type":"text","text":". Transforms can be applied to both"},{"text":" ","type":"text"},{"type":"text","text":"variables, sections and inverted sections."}]},{"type":"paragraph","inlineContent":[{"text":"A simple example would be ensuring a string is lowercase.","type":"text"}]},{"code":["{{lowercased(myString)}}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If applying a transform to a sequence then the closing element of the sequence should include the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transform name eg"}]},{"type":"codeListing","syntax":null,"code":["{{#reversed(sequence)}}{{.}}{{\\reversed(sequence)}}"]}],"kind":"content"}],"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable"},"sections":[],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mustache\/mustachetransformable"]}],"references":{"logo.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"identifier":"logo.png","alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheLambda":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheLambda","kind":"identifier"}],"abstract":[{"type":"text","text":"Lambda function. Can add this to object being rendered to filter contents of objects."}],"title":"MustacheLambda","url":"\/documentation\/mustache\/mustachelambda","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheLambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheLambda"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheCustomRenderable":{"kind":"symbol","url":"\/documentation\/mustache\/mustachecustomrenderable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MustacheCustomRenderable","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheCustomRenderable","abstract":[{"type":"text","text":"Allow object to override standard hummingbird type rendering which uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(describing)"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"MustacheCustomRenderable"}],"title":"MustacheCustomRenderable","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/index":{"kind":"article","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Documentation for Hummingbird the lightweight, flexible, modern server framework."}],"title":"Hummingbird Documentation","url":"\/documentation\/index","role":"collection","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/index"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable":{"abstract":[{"type":"text","text":"Objects that can have a transforms run on them. Mustache transforms are specific to this implementation"},{"type":"text","text":" "},{"text":"of Mustache. They allow you to process objects before they are rendered.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MustacheTransformable","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MustacheTransformable"}],"kind":"symbol","title":"MustacheTransformable","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable","url":"\/documentation\/mustache\/mustachetransformable","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Mustache template engine.","type":"text"}],"kind":"symbol","type":"topic","title":"Mustache","role":"collection","url":"\/documentation\/mustache","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheParent":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"MustacheParent","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for object that has a custom method for accessing their children, instead"},{"text":" ","type":"text"},{"type":"text","text":"of using Mirror"}],"title":"MustacheParent","url":"\/documentation\/mustache\/mustacheparent","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MustacheParent"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheParent"},"doc://com.opticalaberration.hummingbird/documentation/Mustache/MustacheTransformable/transform(_:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"transform"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?"}],"url":"\/documentation\/mustache\/mustachetransformable\/transform(_:)","required":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache\/MustacheTransformable\/transform(_:)","type":"topic","role":"symbol","title":"transform(_:)","abstract":[]}}}