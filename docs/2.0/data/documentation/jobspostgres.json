{"kind":"symbol","metadata":{"externalID":"JobsPostgres","modules":[{"name":"JobsPostgres"}],"images":[{"type":"icon","identifier":"logo.png"}],"roleHeading":"Framework","title":"JobsPostgres","symbolKind":"module","role":"collection"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"anchor":"Related-Documentation","title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]},{"generated":true,"anchor":"Reference","title":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobspostgres"]}],"abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"topicSections":[{"anchor":"Job-Queue","title":"Job Queue","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"JobsPostgres provides a Hummingbird Jobs Queue driver using ","type":"text"},{"isActive":true,"identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","type":"reference"},{"text":" and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","type":"reference"},{"text":" library.","type":"text"}]},{"level":2,"type":"heading","text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue driver uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from "},{"type":"codeVoice","code":"PostgresNIO"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"type":"text","text":" from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library to perform the database migrations needed for the driver."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue configuration includes two values."}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"pollTime","type":"codeVoice"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"queueName","type":"codeVoice"},{"text":": Name of queue used to differentiate itself from other queues.","type":"text"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["import JobsPostgres","import PostgresNIO","import ServiceLifecycle","","let postgresClient = PostgresClient(...)","let postgresMigrations = DatabaseMigrations()","let jobQueue = JobQueue(","    .postgres(","        client: postgresClient,","        migrations: postgresMigrations,","        configuration: .init(","            pollTime: .milliseconds(50),","            queueName: \"MyJobQueue\"","        ),","        logger: logger","    ), ","    numWorkers: 4, ","    logger: logger",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The easiest way to ensure the migrations are run is to use the "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","isActive":true},{"type":"text","text":" and add that as a "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" to your "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". The job queue service will not run until the migrations have been run in either "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" mode or for real."}]},{"type":"codeListing","syntax":"swift","code":["let migrationService = DatabaseMigrationService(","    client: postgresClient,","    migrations: postgresMigrations,","    logger: logger,","    dryRun: false",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [postgresClient, migrationService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: jobQueue.queue.logger","    )",")","try await serviceGroup.run()"]},{"level":2,"type":"heading","text":"Additional Features","anchor":"Additional-Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are features specific to the Postgres Job Queue implementation. Some of these are available in other queues and others not."}]},{"level":3,"type":"heading","text":"Push Options","anchor":"Push-Options"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a couple of options you can provide."}]},{"level":4,"type":"heading","text":"Delaying jobs","anchor":"Delaying-jobs"},{"type":"paragraph","inlineContent":[{"text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"]},{"level":4,"type":"heading","text":"Job Priority","anchor":"Job-Priority"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The postgres queue allows you to give a job a priority. Jobs with higher priorities are run before jobs with lower priorities. There are five priorities "},{"type":"codeVoice","code":".lowest"},{"type":"text","text":", "},{"type":"codeVoice","code":".lower"},{"type":"text","text":", "},{"type":"codeVoice","code":".normal"},{"type":"text","text":", "},{"type":"codeVoice","code":".higher"},{"type":"text","text":" and "},{"type":"codeVoice","code":".highest"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Add BackgroundJob to the queue. It will only get processed if there are no jobs","\/\/ with a higher priority on the queue.","try await jobQueue.push(BackgroundJob(), options: .init(priority: .lowest))"]},{"level":3,"type":"heading","text":"Cancellation","anchor":"Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","isActive":true},{"type":"text","text":" conforms to protocol "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","isActive":true},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","isActive":true},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","isActive":true},{"type":"text","text":" it will remove it from the pending queue."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"]},{"level":3,"type":"heading","text":"Pause and Resume","anchor":"Pause-and-Resume"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","type":"reference","isActive":true},{"type":"text","text":" conforms to protocol "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"reference","isActive":true},{"type":"text","text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","type":"reference","isActive":true},{"type":"text","text":". If you supply these function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","type":"reference","isActive":true},{"type":"text","text":" you can remove from the pending queue and add them back in at a later date."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"]}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationService":{"url":"\/documentation\/postgresmigrations\/databasemigrationservice","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Service that runs a database migration"}],"title":"DatabaseMigrationService","navigatorTitle":[{"text":"DatabaseMigrationService","kind":"identifier"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrationService","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"title":"PostgresMigrations","url":"\/documentation\/postgresmigrations","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","type":"topic","abstract":[{"type":"text","text":"Postgres database migration service"}],"kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"title":"PostgresJobQueue","url":"\/documentation\/jobspostgres\/postgresjobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/resume(jobID:)":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Resume job"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/jobspostgres\/postgresjobqueue\/resume(jobid:)","title":"resume(jobID:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)"},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"url":"\/documentation\/jobspostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","kind":"symbol","abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"title":"JobsPostgres","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"url":"\/documentation\/postgresmigrations\/databasemigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Database migration support"}],"title":"DatabaseMigrations","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","url":"\/documentation\/hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/cancel(jobID:)":{"url":"\/documentation\/jobspostgres\/postgresjobqueue\/cancel(jobid:)","type":"topic","kind":"symbol","title":"cancel(jobID:)","abstract":[{"text":"Cancel job","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"title":"HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"type":"topic","kind":"symbol","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/push(_:options:)":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Push Job onto queue"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"JobRequest","preciseIdentifier":"s:4Jobs10JobRequestV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Parameters","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC4push_7options20FoundationEssentials4UUIDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAI0C10ParametersRzlF0L0L_xmfp","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobOptions","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C7OptionsV","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","kind":"typeIdentifier"}],"url":"\/documentation\/jobspostgres\/postgresjobqueue\/push(_:options:)","title":"push(_:options:)","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"url":"\/documentation\/jobs","kind":"symbol","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"title":"Jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"url":"\/documentation\/jobs\/resumablejobqueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"topic","kind":"symbol","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"title":"ResumableJobQueue","navigatorTitle":[{"kind":"identifier","text":"ResumableJobQueue"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResumableJobQueue"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/pause(jobID:)":{"url":"\/documentation\/jobspostgres\/postgresjobqueue\/pause(jobid:)","type":"topic","kind":"symbol","title":"pause(jobID:)","abstract":[{"type":"text","text":"Pause job"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pause"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UUID","preciseIdentifier":"s:20FoundationEssentials4UUIDV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/jobs\/cancellablejobqueue","title":"CancellableJobQueue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancellableJobQueue","kind":"identifier"}],"navigatorTitle":[{"text":"CancellableJobQueue","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"url":"\/documentation\/jobsredis","kind":"symbol","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"title":"JobsRedis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","role":"collection"},"https://api.vapor.codes/postgresnio/documentation/postgresnio/":{"url":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","titleInlineContent":[{"type":"text","text":"PostgresNIO"}],"type":"link","title":"PostgresNIO"}}}