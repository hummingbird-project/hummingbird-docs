{"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],"title":"Related Documentation"},{"generated":true,"anchor":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"],"title":"Reference"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobspostgres"]}],"hierarchy":{"paths":[[]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"JobsPostgres provides a Hummingbird Jobs Queue driver using ","type":"text"},{"type":"reference","identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","isActive":true},{"text":" and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true},{"text":" library.","type":"text"}]},{"level":2,"anchor":"Setup","type":"heading","text":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue driver uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from "},{"type":"codeVoice","code":"PostgresNIO"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"type":"text","text":" from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library to perform the database migrations needed for the driver."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue configuration includes two values."}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"pollTime"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"queueName"},{"text":": Name of queue used to differentiate itself from other queues.","type":"text"}]}]}],"type":"unorderedList"},{"code":["import JobsPostgres","import PostgresNIO","import ServiceLifecycle","","let postgresClient = PostgresClient(...)","let postgresMigrations = DatabaseMigrations()","let jobQueue = JobQueue(","    .postgres(","        client: postgresClient,","        migrations: postgresMigrations,","        configuration: .init(","            pollTime: .milliseconds(50),","            queueName: \"MyJobQueue\"","        ),","        logger: logger","    ), ","    numWorkers: 4, ","    logger: logger",")"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The easiest way to ensure the migrations are run is to use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService"},{"type":"text","text":" and add that as a "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" to your "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". The job queue service will not run until the migrations have been run in either "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" mode or for real."}]},{"code":["let migrationService = DatabaseMigrationService(","    client: postgresClient,","    migrations: postgresMigrations,","    logger: logger,","    dryRun: false",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [postgresClient, migrationService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: jobQueue.queue.logger","    )",")","try await serviceGroup.run()"],"syntax":"swift","type":"codeListing"},{"level":2,"anchor":"Additional-Features","type":"heading","text":"Additional Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are features specific to the Postgres Job Queue implementation. Some of these are available in other queues and others not."}]},{"level":3,"anchor":"Push-Options","type":"heading","text":"Push Options"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When pushing a job to the queue there are a couple of options you can provide."}]},{"level":4,"anchor":"Delaying-jobs","type":"heading","text":"Delaying jobs"},{"type":"paragraph","inlineContent":[{"text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time.","type":"text"}]},{"code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"syntax":"swift","type":"codeListing"},{"level":4,"anchor":"Job-Priority","type":"heading","text":"Job Priority"},{"type":"paragraph","inlineContent":[{"text":"The postgres queue allows you to give a job a priority. Jobs with higher priorities are run before jobs with lower priorities. There are five priorities ","type":"text"},{"code":".lowest","type":"codeVoice"},{"text":", ","type":"text"},{"code":".lower","type":"codeVoice"},{"text":", ","type":"text"},{"code":".normal","type":"codeVoice"},{"text":", ","type":"text"},{"code":".higher","type":"codeVoice"},{"text":" and ","type":"text"},{"code":".highest","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["\/\/ Add BackgroundJob to the queue. It will only get processed if there are no jobs","\/\/ with a higher priority on the queue.","try await jobQueue.push(BackgroundJob(), options: .init(priority: .lowest))"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"Cancellation","type":"heading","text":"Cancellation"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","isActive":true,"type":"reference"},{"text":" conforms to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","isActive":true,"type":"reference"},{"text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","isActive":true,"type":"reference"},{"text":". If you supply this function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"text":" returned by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","isActive":true,"type":"reference"},{"text":" it will remove it from the pending queue.","type":"text"}]},{"code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"Pause-and-Resume","type":"heading","text":"Pause and Resume"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","type":"reference"},{"text":" conforms to protocol ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"reference"},{"text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","type":"reference"},{"text":". If you supply these function with the ","type":"text"},{"type":"codeVoice","code":"JobID"},{"text":" returned by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","type":"reference"},{"text":" you can remove from the pending queue and add them back in at a later date.","type":"text"}]},{"code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"syntax":"swift","type":"codeListing"}]}],"metadata":{"role":"collection","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}],"modules":[{"name":"JobsPostgres"}],"externalID":"JobsPostgres","title":"JobsPostgres","roleHeading":"Framework"},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","interfaceLanguage":"swift"},"topicSections":[{"anchor":"Job-Queue","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"],"title":"Job Queue"}],"kind":"symbol","references":{"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/resume(jobID:)":{"url":"\/documentation\/jobspostgres\/postgresjobqueue\/resume(jobid:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resume"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Resume job"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","title":"resume(jobID:)"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"title":"JobsRedis","type":"topic","role":"collection","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}],"kind":"symbol","url":"\/documentation\/jobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","images":[{"type":"icon","identifier":"logo.png"}]},"https://api.vapor.codes/postgresnio/documentation/postgresnio/":{"identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","type":"link","title":"PostgresNIO","titleInlineContent":[{"type":"text","text":"PostgresNIO"}],"url":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/push(_:options:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parameters"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:4Jobs10JobRequestV","text":"JobRequest"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC4push_7options20FoundationEssentials4UUIDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAI0C10ParametersRzlF0L0L_xmfp","text":"Parameters"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C7OptionsV","text":"JobOptions"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa"}],"title":"push(_:options:)","url":"\/documentation\/jobspostgres\/postgresjobqueue\/push(_:options:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","kind":"symbol","abstract":[{"type":"text","text":"Push Job onto queue"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"title":"ResumableJobQueue","url":"\/documentation\/jobs\/resumablejobqueue","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ResumableJobQueue","kind":"identifier"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"navigatorTitle":[{"text":"ResumableJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"title":"PostgresJobQueue","type":"topic","role":"symbol","abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","url":"\/documentation\/jobspostgres\/postgresjobqueue","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"kind":"symbol","url":"\/documentation\/hummingbirdpostgres","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","title":"HummingbirdPostgres","abstract":[{"type":"text","text":"Working with Postgres databases."}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"title":"PostgresMigrations","type":"topic","role":"collection","abstract":[{"type":"text","text":"Postgres database migration service"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","url":"\/documentation\/postgresmigrations","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","title":"DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"type":"text","text":"Database migration support"}],"kind":"symbol","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"navigatorTitle":[{"kind":"identifier","text":"CancellableJobQueue"}],"url":"\/documentation\/jobs\/cancellablejobqueue","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancellableJobQueue"}],"abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"kind":"symbol","type":"topic","title":"CancellableJobQueue","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationService":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrationService","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","title":"DatabaseMigrationService","kind":"symbol","navigatorTitle":[{"text":"DatabaseMigrationService","kind":"identifier"}],"abstract":[{"text":"Service that runs a database migration","type":"text"}],"url":"\/documentation\/postgresmigrations\/databasemigrationservice","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"title":"JobsPostgres","url":"\/documentation\/jobspostgres","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","images":[{"identifier":"logo.png","type":"icon"}],"kind":"symbol","role":"collection","abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/cancel(jobID:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"cancel"},{"kind":"text","text":"("},{"kind":"externalParam","text":"jobID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","text":"JobID","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"url":"\/documentation\/jobspostgres\/postgresjobqueue\/cancel(jobid:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"Cancel job","type":"text"}],"title":"cancel(jobID:)"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"title":"Jobs","type":"topic","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"kind":"symbol","url":"\/documentation\/jobs","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/pause(jobID:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pause","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:20FoundationEssentials4UUIDV","text":"UUID"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"url":"\/documentation\/jobspostgres\/postgresjobqueue\/pause(jobid:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Pause job"}],"title":"pause(jobID:)"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbird","type":"topic","kind":"symbol","role":"collection","title":"Hummingbird","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}]},"logo.png":{"type":"image","identifier":"logo.png","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"alt":null}}}