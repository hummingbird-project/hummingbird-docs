{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"JobsPostgres provides a Hummingbird Jobs Queue driver using ","type":"text"},{"type":"reference","identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","isActive":true},{"text":" and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","isActive":true},{"text":" library.","type":"text"}]},{"type":"heading","level":2,"text":"Setup","anchor":"Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue driver uses "},{"code":"PostgresClient","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"PostgresNIO","type":"codeVoice"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","type":"reference"},{"text":" from the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","type":"reference"},{"type":"text","text":" library to perform the database migrations needed for the driver."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Postgres job queue configuration includes two values."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"pollTime","type":"codeVoice"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"queueName"},{"type":"text","text":": Name of queue used to differentiate itself from other queues."}]}]}]},{"type":"codeListing","code":["import JobsPostgres","import PostgresNIO","import ServiceLifecycle","","let postgresClient = PostgresClient(...)","let postgresMigrations = DatabaseMigrations()","let jobQueue = JobQueue(","    .postgres(","        client: postgresClient,","        migrations: postgresMigrations,","        configuration: .init(","            pollTime: .milliseconds(50),","            queueName: \"MyJobQueue\"","        ),","        logger: logger","    ), ","    numWorkers: 4, ","    logger: logger",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The easiest way to ensure the migrations are run is to use the "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","type":"reference","isActive":true},{"type":"text","text":" and add that as a "},{"type":"codeVoice","code":"Service"},{"type":"text","text":" to your "},{"type":"codeVoice","code":"ServiceGroup"},{"type":"text","text":". The job queue service will not run until the migrations have been run in either "},{"type":"codeVoice","code":"dryRun"},{"type":"text","text":" mode or for real."}]},{"type":"codeListing","code":["let migrationService = DatabaseMigrationService(","    client: postgresClient,","    migrations: postgresMigrations,","    logger: logger,","    dryRun: false",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [postgresClient, migrationService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: jobQueue.queue.logger","    )",")","try await serviceGroup.run()"],"syntax":"swift"},{"type":"heading","level":2,"text":"Additional Features","anchor":"Additional-Features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are features specific to the Postgres Job Queue implementation. Some of these are available in other queues and others not."}]},{"type":"heading","level":3,"text":"Push Options","anchor":"Push-Options"},{"type":"paragraph","inlineContent":[{"text":"When pushing a job to the queue there are a couple of options you can provide.","type":"text"}]},{"type":"heading","level":4,"text":"Delaying jobs","anchor":"Delaying-jobs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time."}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"syntax":"swift"},{"type":"heading","level":4,"text":"Job Priority","anchor":"Job-Priority"},{"type":"paragraph","inlineContent":[{"text":"The postgres queue allows you to give a job a priority. Jobs with higher priorities are run before jobs with lower priorities. There are five priorities ","type":"text"},{"code":".lowest","type":"codeVoice"},{"text":", ","type":"text"},{"code":".lower","type":"codeVoice"},{"text":", ","type":"text"},{"code":".normal","type":"codeVoice"},{"text":", ","type":"text"},{"code":".higher","type":"codeVoice"},{"text":" and ","type":"text"},{"code":".highest","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["\/\/ Add BackgroundJob to the queue. It will only get processed if there are no jobs","\/\/ with a higher priority on the queue.","try await jobQueue.push(BackgroundJob(), options: .init(priority: .lowest))"],"syntax":"swift"},{"type":"heading","level":3,"text":"Cancellation","anchor":"Cancellation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","type":"reference"},{"type":"text","text":" conforms to protocol "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","type":"reference"},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","type":"reference"},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","type":"reference"},{"type":"text","text":" it will remove it from the pending queue."}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"syntax":"swift"},{"type":"heading","level":3,"text":"Pause and Resume","anchor":"Pause-and-Resume"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","type":"reference"},{"text":" conforms to protocol ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"reference"},{"text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","type":"reference"},{"text":". If you supply these function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"text":" returned by ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","type":"reference"},{"text":" you can remove from the pending queue and add them back in at a later date.","type":"text"}]},{"type":"codeListing","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"syntax":"swift"}]}],"metadata":{"role":"collection","modules":[{"name":"JobsPostgres"}],"externalID":"JobsPostgres","roleHeading":"Framework","symbolKind":"module","images":[{"type":"icon","identifier":"logo.png"}],"title":"JobsPostgres"},"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"sections":[],"topicSections":[{"title":"Job Queue","anchor":"Job-Queue","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"]}],"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"]},{"title":"Reference","generated":true,"anchor":"Reference","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/jobspostgres"]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[[]]},"references":{"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"role":"symbol","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResumableJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"ResumableJobQueue"}],"url":"\/documentation\/jobs\/resumablejobqueue","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","type":"topic","title":"ResumableJobQueue"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"title":"PostgresJobQueue","navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"abstract":[{"text":"Postgres Job queue implementation","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","url":"\/documentation\/jobspostgres\/postgresjobqueue","type":"topic","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/cancel(jobID:)":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","title":"cancel(jobID:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/cancel(jobid:)","abstract":[{"type":"text","text":"Cancel job"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}]},"https://api.vapor.codes/postgresnio/documentation/postgresnio/":{"titleInlineContent":[{"type":"text","text":"PostgresNIO"}],"type":"link","url":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","title":"PostgresNIO"},"logo.png":{"alt":null,"identifier":"logo.png","type":"image","variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/push(_:options:)":{"abstract":[{"type":"text","text":"Push Job onto queue"}],"type":"topic","title":"push(_:options:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","url":"\/documentation\/jobspostgres\/postgresjobqueue\/push(_:options:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:4Jobs10JobRequestV","text":"JobRequest"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC4push_7options20FoundationEssentials4UUIDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAI0C10ParametersRzlF0L0L_xmfp","text":"Parameters"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"options"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C7OptionsV","text":"JobOptions"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","text":"JobID","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/resume(jobID:)":{"abstract":[{"type":"text","text":"Resume job"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","url":"\/documentation\/jobspostgres\/postgresjobqueue\/resume(jobid:)","title":"resume(jobID:)"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/jobs","title":"Jobs"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"abstract":[{"type":"text","text":"Database migration support"}],"navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"type":"topic","title":"DatabaseMigrations","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","url":"\/documentation\/postgresmigrations\/databasemigrations","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/pause(jobID:)":{"type":"topic","title":"pause(jobID:)","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/pause(jobid:)","abstract":[{"text":"Pause job","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pause","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UUID","kind":"typeIdentifier","preciseIdentifier":"s:20FoundationEssentials4UUIDV"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}]},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"abstract":[{"text":"Postgres database migration service","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/postgresmigrations","title":"PostgresMigrations"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"images":[{"type":"icon","identifier":"logo.png"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","role":"collection","kind":"symbol","type":"topic","url":"\/documentation\/jobspostgres","title":"JobsPostgres"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationService":{"abstract":[{"type":"text","text":"Service that runs a database migration"}],"navigatorTitle":[{"text":"DatabaseMigrationService","kind":"identifier"}],"type":"topic","title":"DatabaseMigrationService","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","url":"\/documentation\/postgresmigrations\/databasemigrationservice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrationService","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdpostgres","role":"collection","title":"HummingbirdPostgres"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"url":"\/documentation\/jobsredis","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"text":"Redis implementation for Hummingbird jobs framework","type":"text"}],"role":"collection","kind":"symbol","title":"JobsRedis"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"type":"topic","navigatorTitle":[{"text":"CancellableJobQueue","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","title":"CancellableJobQueue","kind":"symbol","url":"\/documentation\/jobs\/cancellablejobqueue","abstract":[{"type":"text","text":"Protocol for Job queue driver which implement cancellable jobs"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancellableJobQueue","kind":"identifier"}]}}}