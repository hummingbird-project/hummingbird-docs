{"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"],"anchor":"Job-Queue","title":"Job Queue"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","variants":[{"paths":["\/documentation\/jobspostgres"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Postgres implementation for Hummingbird jobs framework"}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres"],"anchor":"Related-Documentation","title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis"],"anchor":"Reference","title":"Reference"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"JobsPostgres provides a Hummingbird Jobs Queue driver using "},{"type":"reference","isActive":true,"identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/"},{"type":"text","text":" and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library."}],"type":"paragraph"},{"anchor":"Setup","text":"Setup","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The Postgres job queue driver uses "},{"type":"codeVoice","code":"PostgresClient"},{"type":"text","text":" from "},{"type":"codeVoice","code":"PostgresNIO"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations"},{"type":"text","text":" from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations"},{"type":"text","text":" library to perform the database migrations needed for the driver."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The Postgres job queue configuration includes two values."}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"pollTime"},{"type":"text","text":": This is the amount of time between the last time the queue was empty and the next time the driver starts looking for pending jobs."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"queueName"},{"type":"text","text":": Name of queue used to differentiate itself from other queues."}]}]}],"type":"unorderedList"},{"syntax":"swift","code":["import JobsPostgres","import PostgresNIO","import ServiceLifecycle","","let postgresClient = PostgresClient(...)","let postgresMigrations = DatabaseMigrations()","let jobQueue = JobQueue(","    .postgres(","        client: postgresClient,","        migrations: postgresMigrations,","        configuration: .init(","            pollTime: .milliseconds(50),","            queueName: \"MyJobQueue\"","        ),","        logger: logger","    ), ","    numWorkers: 4, ","    logger: logger",")"],"type":"codeListing"},{"inlineContent":[{"text":"The easiest way to ensure the migrations are run is to use the ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","isActive":true,"type":"reference"},{"text":" and add that as a ","type":"text"},{"code":"Service","type":"codeVoice"},{"text":" to your ","type":"text"},{"code":"ServiceGroup","type":"codeVoice"},{"text":". The job queue service will not run until the migrations have been run in either ","type":"text"},{"code":"dryRun","type":"codeVoice"},{"text":" mode or for real.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let migrationService = DatabaseMigrationService(","    client: postgresClient,","    migrations: postgresMigrations,","    logger: logger,","    dryRun: false",")","let serviceGroup = ServiceGroup(","    configuration: .init(","        services: [postgresClient, migrationService, jobQueue],","        gracefulShutdownSignals: [.sigterm, .sigint],","        logger: jobQueue.queue.logger","    )",")","try await serviceGroup.run()"],"type":"codeListing"},{"anchor":"Additional-Features","text":"Additional Features","level":2,"type":"heading"},{"inlineContent":[{"text":"There are features specific to the Postgres Job Queue implementation. Some of these are available in other queues and others not.","type":"text"}],"type":"paragraph"},{"anchor":"Push-Options","text":"Push Options","level":3,"type":"heading"},{"inlineContent":[{"text":"When pushing a job to the queue there are a couple of options you can provide.","type":"text"}],"type":"paragraph"},{"anchor":"Delaying-jobs","text":"Delaying jobs","level":4,"type":"heading"},{"inlineContent":[{"text":"As with all queue drivers you can add a delay before a job is processed. The job will sit in the pending queue and will not be available for processing until time has passed its delay until time.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add TestJob to the queue, but don't process it for 2 minutes","try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))"],"type":"codeListing"},{"anchor":"Job-Priority","text":"Job Priority","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"The postgres queue allows you to give a job a priority. Jobs with higher priorities are run before jobs with lower priorities. There are five priorities "},{"code":".lowest","type":"codeVoice"},{"type":"text","text":", "},{"code":".lower","type":"codeVoice"},{"type":"text","text":", "},{"code":".normal","type":"codeVoice"},{"type":"text","text":", "},{"code":".higher","type":"codeVoice"},{"type":"text","text":" and "},{"code":".highest","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add BackgroundJob to the queue. It will only get processed if there are no jobs","\/\/ with a higher priority on the queue.","try await jobQueue.push(BackgroundJob(), options: .init(priority: .lowest))"],"type":"codeListing"},{"anchor":"Cancellation","text":"Cancellation","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue"},{"type":"text","text":" conforms to protocol "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue"},{"type":"text","text":". This requires support for cancelling jobs that are in the pending queue. It adds one new function "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)"},{"type":"text","text":". If you supply this function with the "},{"type":"codeVoice","code":"JobID"},{"type":"text","text":" returned by "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)"},{"type":"text","text":" it will remove it from the pending queue."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately cancel it","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.cancel(jobID: jobID)"],"type":"codeListing"},{"anchor":"Pause-and-Resume","text":"Pause and Resume","level":3,"type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","isActive":true,"type":"reference"},{"text":" conforms to protocol ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue","isActive":true,"type":"reference"},{"text":". This requires support for pausing and resuming jobs that are in the pending queue. It adds two new functions ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","isActive":true,"type":"reference"},{"text":". If you supply these function with the ","type":"text"},{"code":"JobID","type":"codeVoice"},{"text":" returned by ","type":"text"},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","isActive":true,"type":"reference"},{"text":" you can remove from the pending queue and add them back in at a later date.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add TestJob to the queue and immediately remove it and then add it back to the queue","let jobID = try await jobQueue.push(TestJob(), options: .init(delayUntil: .now + 120))","try await jobQueue.pause(jobID: jobID)","try await jobQueue.resume(jobID: jobID)"],"type":"codeListing"}]}],"metadata":{"modules":[{"name":"JobsPostgres"}],"roleHeading":"Framework","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","externalID":"JobsPostgres","title":"JobsPostgres","symbolKind":"module"},"references":{"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres","role":"collection","title":"JobsPostgres","kind":"symbol","url":"\/documentation\/jobspostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Postgres implementation for Hummingbird jobs framework","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"title":"Jobs","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","url":"\/documentation\/jobs","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs/CancellableJobQueue":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/CancellableJobQueue","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CancellableJobQueue","kind":"identifier"}],"title":"CancellableJobQueue","navigatorTitle":[{"text":"CancellableJobQueue","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/jobs\/cancellablejobqueue","abstract":[{"text":"Protocol for Job queue driver which implement cancellable jobs","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","kind":"symbol","type":"topic","url":"\/documentation\/hummingbird","title":"Hummingbird"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrations":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrations","role":"symbol","fragments":[{"text":"actor","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatabaseMigrations","kind":"identifier"}],"title":"DatabaseMigrations","navigatorTitle":[{"text":"DatabaseMigrations","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/postgresmigrations\/databasemigrations","abstract":[{"text":"Database migration support","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/push(_:options:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/push(_:options:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"push","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"JobRequest","kind":"typeIdentifier","preciseIdentifier":"s:4Jobs10JobRequestV"},{"text":"<","kind":"text"},{"text":"Parameters","kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC4push_7options20FoundationEssentials4UUIDV0A00C7RequestVyxG_AC0C7OptionsVtYaKAI0C10ParametersRzlF0L0L_xmfp"},{"text":">, ","kind":"text"},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobOptions","kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C7OptionsV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","text":"JobID"}],"title":"push(_:options:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/push(_:options:)","abstract":[{"text":"Push Job onto queue","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue":{"role":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue","kind":"symbol","title":"PostgresJobQueue","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PostgresJobQueue","kind":"identifier"}],"navigatorTitle":[{"text":"PostgresJobQueue","kind":"identifier"}],"url":"\/documentation\/jobspostgres\/postgresjobqueue","abstract":[{"type":"text","text":"Postgres Job queue implementation"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","role":"collection","title":"HummingbirdPostgres","kind":"symbol","url":"\/documentation\/hummingbirdpostgres","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"text":"Working with Postgres databases.","type":"text"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/cancel(jobID:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/cancel(jobID:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","kind":"typeIdentifier","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"cancel(jobID:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/cancel(jobid:)","type":"topic","abstract":[{"text":"Cancel job","type":"text"}]},"logo.png":{"identifier":"logo.png","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}],"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/JobsRedis":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsRedis","role":"collection","title":"JobsRedis","kind":"symbol","url":"\/documentation\/jobsredis","images":[{"type":"icon","identifier":"logo.png"}],"type":"topic","abstract":[{"type":"text","text":"Redis implementation for Hummingbird jobs framework"}]},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/resume(jobID:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/resume(jobID:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JobID","preciseIdentifier":"s:12JobsPostgres0B8JobQueueC0C2IDa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"resume(jobID:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/resume(jobid:)","abstract":[{"type":"text","text":"Resume job"}],"type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/JobsPostgres/PostgresJobQueue/pause(jobID:)":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/JobsPostgres\/PostgresJobQueue\/pause(jobID:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"pause","kind":"identifier"},{"text":"(","kind":"text"},{"text":"jobID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UUID","preciseIdentifier":"s:20FoundationEssentials4UUIDV"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"}],"title":"pause(jobID:)","kind":"symbol","url":"\/documentation\/jobspostgres\/postgresjobqueue\/pause(jobid:)","abstract":[{"type":"text","text":"Pause job"}],"type":"topic"},"https://api.vapor.codes/postgresnio/documentation/postgresnio/":{"identifier":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","title":"PostgresNIO","url":"https:\/\/api.vapor.codes\/postgresnio\/documentation\/postgresnio\/","titleInlineContent":[{"type":"text","text":"PostgresNIO"}],"type":"link"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations":{"title":"PostgresMigrations","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"abstract":[{"type":"text","text":"Postgres database migration service"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations","kind":"symbol","url":"\/documentation\/postgresmigrations","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/PostgresMigrations/DatabaseMigrationService":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/PostgresMigrations\/DatabaseMigrationService","title":"DatabaseMigrationService","url":"\/documentation\/postgresmigrations\/databasemigrationservice","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatabaseMigrationService"}],"navigatorTitle":[{"kind":"identifier","text":"DatabaseMigrationService"}],"type":"topic","abstract":[{"type":"text","text":"Service that runs a database migration"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs/ResumableJobQueue":{"title":"ResumableJobQueue","abstract":[{"text":"Protocol for Job queue driver which implements resumable jobs","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResumableJobQueue"}],"navigatorTitle":[{"kind":"identifier","text":"ResumableJobQueue"}],"url":"\/documentation\/jobs\/resumablejobqueue","role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs\/ResumableJobQueue"}}}