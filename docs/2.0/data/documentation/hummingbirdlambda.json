{"hierarchy":{"paths":[[]]},"abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"seeAlsoSections":[{"title":"Related Documentation","anchor":"Related-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"]},{"title":"Reference Documentation","anchor":"Reference-Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Usage","anchor":"Usage","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create struct conforming to "},{"type":"codeVoice","code":"LambdaFunction"},{"type":"text","text":". Setup your router in the "},{"type":"codeVoice","code":"buildResponder"},{"type":"text","text":" function: add routes, middleware etc and then return its responder."}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Event","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" types define your input and output objects. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" REST interface to invoke your Lambda then set these to ","type":"text"},{"code":"APIGateway.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.Response","type":"codeVoice"},{"text":" respectively. If you are using an ","type":"text"},{"code":"APIGateway","type":"codeVoice"},{"text":" HTML interface then set these to ","type":"text"},{"code":"APIGateway.V2.Request","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"APIGateway.V2.Response","type":"codeVoice"},{"text":". The protocols ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","type":"reference"},{"text":" set these up for you.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are using any other ","type":"text"},{"type":"codeVoice","code":"In"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Out"},{"text":" types you will need to implement the ","type":"text"},{"type":"codeVoice","code":"request(context:application:from:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"output(from:)"},{"text":" methods yourself.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/hummingbirdlambda"]}],"topicSections":[{"title":"Lambda protocols","anchor":"Lambda-protocols","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"]},{"title":"Request context","anchor":"Request-context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"images":[{"type":"icon","identifier":"logo.png"}],"symbolKind":"module","roleHeading":"Framework","role":"collection","title":"HummingbirdLambda","modules":[{"name":"HummingbirdLambda"}],"externalID":"HummingbirdLambda"},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","type":"topic","role":"collection","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"title":"HummingbirdWebSocket","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"type":"topic","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdredis","title":"HummingbirdRedis","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContextSource"}],"type":"topic","kind":"symbol","title":"LambdaRequestContextSource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContextSource"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"title":"APIGatewayV2LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","navigatorTitle":[{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}],"type":"topic","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayV2LambdaFunction","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"type":"topic","abstract":[{"text":"Integration with Vaporâ€™s Fluent ORM framework.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbirdfluent","title":"HummingbirdFluent","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"role":"symbol","title":"APIGatewayLambdaFunction","kind":"symbol","navigatorTitle":[{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas that use APIGateway"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaRequestContext"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaRequestContext"}],"type":"topic","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","title":"LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicLambdaRequestContext","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The default Lambda request context."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","title":"BasicLambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/hummingbird","title":"Hummingbird","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"role":"collection","type":"topic","kind":"symbol","title":"HummingbirdLambda","images":[{"identifier":"logo.png","type":"icon"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","url":"\/documentation\/hummingbirdlambda"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"abstract":[{"type":"text","text":"Protocol for Hummingbird Lambdas."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}],"type":"topic","kind":"symbol","title":"LambdaFunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"title":"HummingbirdLambdaTesting","url":"\/documentation\/hummingbirdlambdatesting","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","role":"collection","type":"topic","abstract":[]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","kind":"symbol","images":[{"identifier":"logo.png","type":"icon"}],"type":"topic","title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","abstract":[{"text":"Swift NIO based HTTP server.","type":"text"}],"role":"collection"},"logo.png":{"identifier":"logo.png","variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"alt":null,"type":"image"},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","type":"topic","role":"collection","abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"title":"WSClient","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/wsclient"},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","title":"Mustache","type":"topic","url":"\/documentation\/mustache","role":"collection","abstract":[{"text":"Mustache template engine.","type":"text"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"images":[{"type":"icon","identifier":"logo.png"}],"url":"\/documentation\/jobs","kind":"symbol","type":"topic","title":"Jobs","role":"collection","abstract":[{"type":"text","text":"Offload work your server would be doing to another server."}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","url":"\/documentation\/hummingbirdcompression","type":"topic","title":"HummingbirdCompression","role":"collection","abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"abstract":[{"type":"text","text":"Working with Postgres databases."}],"title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","type":"topic","role":"collection","images":[{"identifier":"logo.png","type":"icon"}],"url":"\/documentation\/hummingbirdpostgres","kind":"symbol"}}}