{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Package that allows you to use the Hummingbird Router and Middleware inside an AWS Lambda.","type":"text"}]},{"level":2,"text":"Usage","anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating a Hummingbird Lambda is very similar to how you create a Hummingbird server application. You create your"},{"type":"text","text":" "},{"type":"text","text":"router, create a "},{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","isActive":true,"type":"reference"},{"text":" using the router and then run the lambda function.","type":"text"}]},{"code":["typealias AppRequestContext = BasicLambdaRequestContext<APIGatewayV2Request>","","\/\/ Create router and add a single route returning \"Hello\" and name in its body","let router = Router(context: AppRequestContext.self)","router.get(\"hello\/{name}\") { request, context in","    let name = try context.parameters.require(\"name\")","    return \"Hello \\(name)\"","}","\/\/ create APIGatewayV2 lambda using router and run.","let lambda = LambdaFunction(","    router: router,","    event: APIGatewayV2Request.self,","    output: APIGatewayV2Response.self",")","try await lambda.runService()"],"syntax":"swift","type":"codeListing"}]}],"sections":[],"identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[[]]},"seeAlsoSections":[{"title":"Related Documentation","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"],"anchor":"Related-Documentation"},{"title":"Reference Documentation","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"anchor":"Reference-Documentation"}],"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"topicSections":[{"title":"Lambda function","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunctionProtocol","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FunctionURLLambdaFunction"],"anchor":"Lambda-function"},{"title":"Request context","identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context"},{"title":"Protocols","generated":true,"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaEvent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaOutput"],"anchor":"Protocols"}],"metadata":{"symbolKind":"module","title":"HummingbirdLambda","role":"collection","externalID":"HummingbirdLambda","roleHeading":"Framework","images":[{"identifier":"logo.png","type":"icon"}],"modules":[{"name":"HummingbirdLambda"}]},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource","role":"symbol","abstract":[],"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"title":"LambdaRequestContextSource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","title":"HummingbirdCore","type":"topic","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"kind":"symbol","url":"\/documentation\/hummingbirdcore","abstract":[{"type":"text","text":"Swift NIO based HTTP server."}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"APIGatewayLambdaFunction"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","role":"symbol","abstract":[{"text":"Typealias for Lambda function triggered by APIGateway","type":"text"}],"title":"APIGatewayLambdaFunction","type":"topic","url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayLambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"kind":"symbol","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","role":"symbol","abstract":[{"type":"text","text":"A Request Context that is initialized with the Event that triggered the Lambda"}],"title":"LambdaRequestContext","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","type":"topic","title":"Mustache","role":"collection","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Mustache template engine.","type":"text"}],"url":"\/documentation\/mustache","kind":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"type":"topic","role":"collection","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaEvent":{"abstract":[{"text":"Lambda event type that can generate HTTP Request","type":"text"}],"title":"LambdaEvent","url":"\/documentation\/hummingbirdlambda\/lambdaevent","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaEvent","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaEvent","kind":"identifier"}],"navigatorTitle":[{"text":"LambdaEvent","kind":"identifier"}],"role":"symbol"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaOutput":{"kind":"symbol","navigatorTitle":[{"text":"LambdaOutput","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaOutput","role":"symbol","abstract":[{"type":"text","text":"Lambda output type that can be generated from HTTP Response"}],"title":"LambdaOutput","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdaoutput","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaOutput","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"url":"\/documentation\/hummingbirdlambda","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","role":"collection","abstract":[{"text":"Run Hummingbird inside an AWS Lambda.","type":"text"}],"kind":"symbol","type":"topic","title":"HummingbirdLambda","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"abstract":[{"text":"Integration with Vaporâ€™s Fluent ORM framework.","type":"text"}],"title":"HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","type":"topic","images":[{"identifier":"logo.png","type":"icon"}],"role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdValkey":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdValkey","role":"collection","abstract":[{"type":"text","text":"Add Valkey\/Redis support to Hummingbird server with valkey-swift."}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdValkey","type":"topic","url":"\/documentation\/hummingbirdvalkey"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","role":"symbol","abstract":[{"text":"Typealias for Lambda function triggered by APIGatewayV2","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"title":"APIGatewayV2LambdaFunction","navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}]},"logo.png":{"identifier":"logo.png","type":"image","alt":null,"variants":[{"url":"\/images\/com.opticalaberration.hummingbird\/logo.png","traits":["1x","light"]}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"url":"\/documentation\/hummingbirdwebsocket","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","role":"collection","abstract":[{"type":"text","text":"Adds support for upgrading HTTP connections to WebSocket."}],"kind":"symbol","type":"topic","title":"HummingbirdWebSocket","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/FunctionURLLambdaFunction":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FunctionURLLambdaFunction"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/FunctionURLLambdaFunction","role":"symbol","abstract":[{"text":"Typealias for Lambda function triggered by function URL","type":"text"}],"title":"FunctionURLLambdaFunction","type":"topic","url":"\/documentation\/hummingbirdlambda\/functionurllambdafunction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FunctionURLLambdaFunction"}]},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"role":"collection","title":"Jobs","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","url":"\/documentation\/jobs","abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"url":"\/documentation\/wsclient","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","role":"collection","abstract":[{"text":"Support for connecting to WebSocket server.","type":"text"}],"kind":"symbol","type":"topic","title":"WSClient","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","role":"collection","abstract":[],"title":"HummingbirdLambdaTesting","type":"topic","url":"\/documentation\/hummingbirdlambdatesting"},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"type":"topic","role":"collection","title":"Hummingbird","abstract":[{"text":"Lightweight, modern, flexible server framework written in Swift.","type":"text"}],"url":"\/documentation\/hummingbird","kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"kind":"symbol","navigatorTitle":[{"text":"LambdaFunction","kind":"identifier"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","role":"symbol","abstract":[{"type":"text","text":"Represents a Lambda function with input\/output and background processes"}],"title":"LambdaFunction","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdafunction","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaFunction","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunctionProtocol":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LambdaFunctionProtocol"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunctionProtocol","role":"symbol","abstract":[{"text":"Protocol for a AWS Lambda function.","type":"text"}],"title":"LambdaFunctionProtocol","type":"topic","url":"\/documentation\/hummingbirdlambda\/lambdafunctionprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaFunctionProtocol"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BasicLambdaRequestContext","kind":"identifier"}],"title":"BasicLambdaRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","type":"topic","kind":"symbol","navigatorTitle":[{"text":"BasicLambdaRequestContext","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"The default Lambda request context."}],"url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","role":"collection","abstract":[{"text":"Middleware for decompressing requests and compressing responses","type":"text"}],"images":[{"type":"icon","identifier":"logo.png"}],"title":"HummingbirdCompression","type":"topic","url":"\/documentation\/hummingbirdcompression"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"type":"topic","role":"collection","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","url":"\/documentation\/hummingbirdpostgres","title":"HummingbirdPostgres","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","images":[{"type":"icon","identifier":"logo.png"}]}}}