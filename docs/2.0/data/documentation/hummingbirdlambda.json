{"metadata":{"images":[{"identifier":"logo.png","type":"icon"}],"role":"collection","externalID":"HummingbirdLambda","symbolKind":"module","modules":[{"name":"HummingbirdLambda"}],"title":"HummingbirdLambda","roleHeading":"Framework"},"abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"inlineContent":[{"text":"Create struct conforming to ","type":"text"},{"code":"LambdaFunction","type":"codeVoice"},{"text":". Setup your router in the ","type":"text"},{"code":"buildResponder","type":"codeVoice"},{"text":" function: add routes, middleware etc and then return its responder.","type":"text"}],"type":"paragraph"},{"code":["@main","struct MyHandler: LambdaFunction {","    typealias Event = APIGatewayRequest","    typealias Output = APIGatewayResponse","    typealias Context = BasicLambdaRequestContext<APIGatewayRequest>","","    init(context: LambdaInitializationContext) {}","    ","    \/\/\/ build responder that will create a response from a request","    func buildResponder() -> some Responder<Context> {","        let router = Router(context: Context.self)","        router.get(\"hello\/{name}\") { request, context in","            let name = try context.parameters.require(\"name\")","            return \"Hello \\(name)\"","        }","        return router.buildResponder()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Event"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" types define your input and output objects. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" REST interface to invoke your Lambda then set these to "},{"type":"codeVoice","code":"APIGateway.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.Response"},{"type":"text","text":" respectively. If you are using an "},{"type":"codeVoice","code":"APIGateway"},{"type":"text","text":" HTML interface then set these to "},{"type":"codeVoice","code":"APIGateway.V2.Request"},{"type":"text","text":" and "},{"type":"codeVoice","code":"APIGateway.V2.Response"},{"type":"text","text":". The protocols "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"},{"type":"text","text":" set these up for you."}],"type":"paragraph"},{"inlineContent":[{"text":"If you are using any other ","type":"text"},{"code":"In","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Out","type":"codeVoice"},{"text":" types you will need to implement the ","type":"text"},{"code":"request(context:application:from:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"output(from:)","type":"codeVoice"},{"text":" methods yourself.","type":"text"}],"type":"paragraph"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","interfaceLanguage":"swift"},"hierarchy":{"paths":[[]]},"topicSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction"],"anchor":"Lambda-protocols","title":"Lambda protocols"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"],"anchor":"Request-context","title":"Request context"}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting"],"anchor":"Related-Documentation","title":"Related Documentation"},{"identifiers":["doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient"],"generated":true,"title":"Reference Documentation","anchor":"Reference-Documentation"}],"variants":[{"paths":["\/documentation\/hummingbirdlambda"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda":{"role":"collection","abstract":[{"type":"text","text":"Run Hummingbird inside an AWS Lambda."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda","url":"\/documentation\/hummingbirdlambda","title":"HummingbirdLambda","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Hummingbird":{"abstract":[{"type":"text","text":"Lightweight, modern, flexible server framework written in Swift."}],"title":"Hummingbird","role":"collection","kind":"symbol","type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Hummingbird","url":"\/documentation\/hummingbird","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContext":{"kind":"symbol","abstract":[{"text":"A Request Context that is initialized with the Event that triggered the Lambda","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContext","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontext","navigatorTitle":[{"text":"LambdaRequestContext","kind":"identifier"}],"title":"LambdaRequestContext","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContext"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCompression":{"role":"collection","abstract":[{"type":"text","text":"Middleware for decompressing requests and compressing responses"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCompression","url":"\/documentation\/hummingbirdcompression","title":"HummingbirdCompression","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdCore":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdCore","type":"topic","kind":"symbol","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"type":"text","text":"Swift NIO based HTTP server."}],"title":"HummingbirdCore","url":"\/documentation\/hummingbirdcore","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambdaTesting":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambdaTesting","kind":"symbol","type":"topic","abstract":[],"title":"HummingbirdLambdaTesting","url":"\/documentation\/hummingbirdlambdatesting","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdAuth":{"role":"collection","abstract":[{"type":"text","text":"Authentication framework and extensions for Hummingbird."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdAuth","url":"\/documentation\/hummingbirdauth","title":"HummingbirdAuth","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdFluent":{"role":"collection","abstract":[{"text":"Integration with Vaporâ€™s Fluent ORM framework.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdFluent","url":"\/documentation\/hummingbirdfluent","title":"HummingbirdFluent","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/Mustache":{"role":"collection","abstract":[{"type":"text","text":"Mustache template engine."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Mustache","url":"\/documentation\/mustache","title":"Mustache","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/BasicLambdaRequestContext":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/BasicLambdaRequestContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BasicLambdaRequestContext"}],"url":"\/documentation\/hummingbirdlambda\/basiclambdarequestcontext","abstract":[{"text":"The default Lambda request context.","type":"text"}],"kind":"symbol","title":"BasicLambdaRequestContext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BasicLambdaRequestContext"}]},"doc://com.opticalaberration.hummingbird/documentation/WSClient":{"kind":"symbol","abstract":[{"type":"text","text":"Support for connecting to WebSocket server."}],"type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"role":"collection","url":"\/documentation\/wsclient","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/WSClient","title":"WSClient"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaRequestContextSource":{"kind":"symbol","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LambdaRequestContextSource","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/lambdarequestcontextsource","navigatorTitle":[{"text":"LambdaRequestContextSource","kind":"identifier"}],"title":"LambdaRequestContextSource","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaRequestContextSource"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdWebSocket":{"role":"collection","abstract":[{"text":"Adds support for upgrading HTTP connections to WebSocket.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdWebSocket","url":"\/documentation\/hummingbirdwebsocket","title":"HummingbirdWebSocket","type":"topic","images":[{"identifier":"logo.png","type":"icon"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayLambdaFunction":{"type":"topic","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayLambdaFunction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"APIGatewayLambdaFunction","kind":"identifier"}],"url":"\/documentation\/hummingbirdlambda\/apigatewaylambdafunction","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGateway","type":"text"}],"kind":"symbol","title":"APIGatewayLambdaFunction","role":"symbol","navigatorTitle":[{"text":"APIGatewayLambdaFunction","kind":"identifier"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/LambdaFunction":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LambdaFunction"}],"role":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LambdaFunction"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/LambdaFunction","url":"\/documentation\/hummingbirdlambda\/lambdafunction","title":"LambdaFunction","type":"topic"},"doc://com.opticalaberration.hummingbird/documentation/Jobs":{"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/Jobs","kind":"symbol","type":"topic","images":[{"type":"icon","identifier":"logo.png"}],"abstract":[{"text":"Offload work your server would be doing to another server.","type":"text"}],"url":"\/documentation\/jobs","title":"Jobs","role":"collection"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdRedis":{"role":"collection","abstract":[{"type":"text","text":"Add Redis support to Hummingbird server with RediStack."}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdRedis","url":"\/documentation\/hummingbirdredis","title":"HummingbirdRedis","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdPostgres":{"role":"collection","abstract":[{"text":"Working with Postgres databases.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdPostgres","url":"\/documentation\/hummingbirdpostgres","title":"HummingbirdPostgres","type":"topic","images":[{"type":"icon","identifier":"logo.png"}]},"logo.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/com.opticalaberration.hummingbird\/logo.png"}],"type":"image","identifier":"logo.png"},"doc://com.opticalaberration.hummingbird/documentation/HummingbirdLambda/APIGatewayV2LambdaFunction":{"kind":"symbol","abstract":[{"text":"Protocol for Hummingbird Lambdas that use APIGatewayV2","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"type":"topic","role":"symbol","url":"\/documentation\/hummingbirdlambda\/apigatewayv2lambdafunction","navigatorTitle":[{"kind":"identifier","text":"APIGatewayV2LambdaFunction"}],"identifier":"doc:\/\/com.opticalaberration.hummingbird\/documentation\/HummingbirdLambda\/APIGatewayV2LambdaFunction","title":"APIGatewayV2LambdaFunction"}}}