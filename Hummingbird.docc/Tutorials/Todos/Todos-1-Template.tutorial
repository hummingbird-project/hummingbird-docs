@Tutorial(time: 5) {
    @Intro(title: "Create a Hummingbird application.") {
        Create a simple web application using the Hummingbird template.
        @Image(source: "hummingbird.png", alt: "Hummingbird logo")
    }
    
    @Section(title: "Create your project") {
        @ContentAndMedia() {
            Clone the Hummingbird template, configure a project and review the contents of the generated project.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        
        @Steps {
            @Step {
                Clone the Hummingbird template GitHub project
                @Code(name: "Clone template", file: todos-template-01.sh)
            }
            @Step {
                Create your project, using the template configure script. Press return on each question to use the default value.
                @Code(name: "Create Swift Package", file: todos-template-02.sh)
            }
            @Step {
                Now lets review what the template has setup. Open `Package.swift`.

                You can see if has dependencies for Hummingbird and the Apple's Argument Parser library.
                @Code(name: "Package.swift", file: todos-template-03.swift)
            }
            @Step {
                Open `Sources/App/App.swift`

                This contains an `App` type conforming to `AsyncParsableCommand` with three options, the `hostname` and `port` are used to define the server bind address, `logLevel` sets the level of logging required. Finally the `run()` function which calls `buildApplication(_:)` to create an `Application` and then runs it using `runService()`. You can find out more about the argument parser library [here](https://apple.github.io/swift-argument-parser/documentation/argumentparser).
                @Code(name: "Sources/App/App.swift", file: todos-template-04.swift)
            }
            @Step {
                Open `Sources/App/Application+build.swift` to find the `buildApplication(_:) function.

                Here we create a `Logger` with log level set by either the command line argument mentioned above, or the environment variable `LOG_LEVEL`. We then call a function `buildRouter()` and use the result of that to create our `Application`.
                @Code(name: "buildApplication() - Sources/App/Application+build.swift", file: todos-template-05.swift)
            }
            @Step {
                If we look further down the file we can find the `buildRouter()` function.

                Here we create the `Router`. We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use `Router.add(middleware:)` to add individual middleware. Finally we add a single endpoint GET `/health` which returns a 200 (Ok) response.
                @Code(name: "buildRouter() - Sources/App/Application+build.swift", file: todos-template-06.swift)
            }
            @Step {
                We can run this application and use curl to test it works. 
                @Code(name: "Test Application", file: todos-template-07.sh)
            }
            @Step {
                Now we have a running server, lets add some functionality to it.
                @Code(name: "Test Application", file: todos-template-08.sh)
            }
        }
    }
}