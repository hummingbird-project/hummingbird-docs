@Tutorial(time: 15) {
    @Intro(title: "Testing your application") {
        Test your application using the HummingbirdTesting framework
        @Image(source: "hummingbird.png", alt: "Hummingbird logo")
    }
    
    @Section(title: "Project testing setup") {
        @ContentAndMedia() {
            Review application testing setup from template.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        @Steps {
            @Step {
                Open Package.swift

                You see at the bottom there is a test target call `AppTests`. It is dependent on the target `App` and the library `HummingbirdTesting`.
                @Code(name: "Package.swift", file: todos-testing-01.swift)
            }
            @Step {
                Open Tests/AppTests/AppTests.swift

                It contains one test, `testApp()`. This creates a copy of the Application using `buildApplication(_:)` and uses the Hummingbird test framework to verify the GET `/health` endpoint returns a 200 (Ok) response.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-02.swift)
            }
            @Step {
                We cannot create an instance of `App`, so need another way of passing the arguments to the `buildApplication` function in our tests. So `buildApplication(_:)` doesn't take `App` as a parameter. Instead its parameter is a type that conforms to the protocol `AppArguments` which includes the parameters the function needs. We then conform `App` to  `AppArguments` and in our tests create a new type `TestArguments` which conforms to the protocol `AppArguments`.
                @Code(name: "Sources/App/Application+build.swift", file: todos-testing-03.swift)
            }
        }
    }
    @Section(title: "Test your application") {
        @ContentAndMedia() {
            Writing Tests to ensure you application API works.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        @Steps {
            @Step {
                Lets replace the `testApp` function with a test for the create todo function. Application testing is done with the function ``Hummingbird/ApplicationProtocol/test(_:_:)``. The first parameter indicates what test framework you want to use. Here we are using `.router` which sends our request directly to the router without a live server process.

                In the closure passed to `test` you are provided with a client to interact with the current test framework. With this you can send requests and verify the contents of their responses.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-08.swift)
            }
            @Step {
                Writing the whole execute line out each time and converting the responses to something readable can become tiresome. So lets break out the create API call to a separate function. You'll notice in this function we return the decoded `Todo` from the execute closure.

                Now the create test has been simplified to two lines of code. Call create function, test return value.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-09.swift)
            }
            @Step {
                In actual fact lets create helper functions for all the API calls. With these it shoud be a lot easier to write tests
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-10.swift)
            }
            @Step {
                We can now create more complex test functions. This one edits a todo twice and verifies the edits have been stored.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-11.swift)
            }
            @Step {
                The following is the equivalent of the list of curl commands we wrote in the previous chapter to test everything was working ok. Its not the most sensible test but it demonstrates how much easier it is test your application using HummingbirdTesting.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-12.swift)
            }
            @Step {
                Here are some tests that haven't been written yet. Maybe you could complete them for me.

                Hint: A couple of these require you to use execute directly instead of calling the helper functions we wrote at the top.
                @Code(name: "Tests/AppTests/AppTests.swift", file: todos-testing-13.swift)
            }
        }
    }
}
        
