@Tutorial(time: 15) {
    @Intro(title: "Testing your application") {
        Test your application using the HummingbirdXCT framework
        @Image(source: "hummingbird.png", alt: "Hummingbird logo")
    }
    
    @Section(title: "Setup your project for testing") {
        @ContentAndMedia() {
            Create a test target and restructure your project to make it easier to test.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        @Steps {
            @Step {
                Open Package.swift
                @Code(name: "Package.swift", file: todos-testing-01.swift)
            }
            @Step { 
                Add a test target for "HummingbirdTodosTests"
                @Code(name: "Package.swift", file: todos-testing-02.swift)
            }
            @Step { 
                Create a Tests folder and add the file HummingbirdTodosTests.swift inside it. 
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-03.swift)
            }
            @Step { 
                Before we can start testing the application we need a function to create the application. Currently it is created inside `HummingbirdTodos.run` and is inaccessible. 
                @Code(name: "HummingbirdTodos.swift", file: todos-testing-04.swift)
            }
            @Step { 
                We move the application creation to a global function outside of `HummingbirdTodos`.

                The `buildApplication` function returns `some HBApplicationProtocol`. This is avoid having to list all the generic parameters of `HBApplication`. FYI in this case it is `HBApplication<HBRouterResponder<TodoRequestContext>, HTTP1Channel>`.

                @Code(name: "HummingbirdTodos.swift", file: todos-testing-05.swift)
            }
            @Step { 
                We cannot instantiate `HummingbirdTodos` in our tests so need another way to pass arguments to the buildApplication function. We solve this by creating a protocol AppArguments which HummingbirdTodos conforms to. In our tests we can create a separate concrete type that conforms to this.

                We've added a testing variable to this protocol which we will use in the future.

                @Code(name: "HummingbirdTodos.swift", file: todos-testing-06.swift)
            }
        }
    }
    @Section(title: "Test you application") {
        @ContentAndMedia() {
            Writing Tests to ensure you application API works.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        @Steps {
            @Step {
                We are now in a position where we can test our application. We create a concrete type conforming to `AppArguments` which we can pass to `buildApplication`. The start of function to test the create API is here, with its first line creating the todos application.
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-07.swift)
            }
            @Step {
                This is the filled out function. Application testing is done with the function ``Hummingbird/HBApplicationProtocol/test(_:_:)``. The first parameter indicates what test framework you want to use. Here we are using `.router` which indicates we send our request directly to the router without a live server process.

                In the closure passed to `test` you are provided with a client to interact with the current test framework. With this you can send requests and verify the contents of their responses.
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-08.swift)
            }
            @Step {
                Writing the whole XCTExecute line out each time and converting the responses to something readable can become tiresome. So lets break out the create API call to a separate function. You'll notice in this function we return the decoded Todo from the XCTExecute closure.
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-09.swift)
            }
            @Step {
                In actual fact lets create helper functions for all the API calls. With these it shoud be a lot easier to write tests
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-10.swift)
            }
            @Step {
                The following is the equivalent of the list of curl commands we wrote in the previous chapter to test everything was working ok. Its not the most sensible test but it demonstrates how much easier it is test your application using HummingbirdXCT.
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-11.swift)
            }
            @Step {
                I've left these tests unwritten. Maybe you could complete them for me.
                @Code(name: "HummingbirdTodosTests.swift", file: todos-testing-12.swift)
            }
        }
    }
}
        
