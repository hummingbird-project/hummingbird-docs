@Tutorial(time: 15) {
    @Intro(title: "Create a Hummingbird + Fluent application.") {
        Create a simple web application using the Hummingbird template.
        @Image(source: "hummingbird.png", alt: "Hummingbird logo")
    }
    
    @Section(title: "Create your project") {
        @ContentAndMedia {
            Clone the Hummingbird template, configure a project and review the contents of the generated project.
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        
        @Steps {
            @Step {
                Clone the Hummingbird template GitHub project
                @Code(name: "Clone template", file: fluent-universe-01.sh)
            }
            @Step {
                Create your project, using the template configure script. Press return on each question to use the default value.
                @Code(name: "Create Swift Package", file: fluent-universe-02.sh)
            }
            @Step {
                Add the `hummingbird-fluent` and `fluent-sqlite-driver` dependencies.
                
                Like with Vapor, you can use different Fluent Drivers as your backing storage.
                @Code(name: "Package.swift", file: fluent-universe-04.swift, previousFile: fluent-universe-03.swift)
            }
        }
    }
    
    @Section(title: "Add Fluent") {
        @ContentAndMedia {
            With your Package.swift set up, lets add Fluent to your project.
            
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        
        @Steps {
            @Step {
                Open `Sources/App/Application+build.swift`.
                
                Add the Fluent dependencies, and modify the `AppArguments` to contain two new variables.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-06.swift, previousFile: fluent-universe-05.swift)
            }
            
            @Step {
                Open `Sources/App/App.swift`
                
                This contains an `App` type conforming to `AsyncParsableCommand` with three options, the `hostname` and `port` are used to define the server bind address, `logLevel` sets the level of logging required. Finally the `run()` function which calls `buildApplication(_:)` to create an `Application` and then runs it using `runService()`. You can find out more about the argument parser library [here](https://apple.github.io/swift-argument-parser/documentation/argumentparser).
                @Code(name: "Sources/App/App.swift", file: fluent-universe-07.swift)
            }
            @Step {
                Add the new app arguments with default values.
                
                @Code(name: "Sources/App/App.swift", file: fluent-universe-08.swift)
            }
            
            @Step {
                Open `Sources/App/Application+build.swift` again.
                
                We can now add Fluent to our application's lifecycle.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-06.swift)
            }
            @Step {
                First, create a Fluent object and add the SQLite driver to Fluent.
                
                Depending on the `inMemoryDatabase` boolean, this application can run completely in-memory. This is useful for testing, as it loses all data when the application is re-launched.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-09.swift)
            }
            @Step {
                Next, we'll use Fluent as a persistence mechanism for the Persist framework. This step is **optional** for this tutorial.
                
                This allows it to integrate with Hummingbird's ecosystem, including the Jobs framework and the Auth framework. 
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-10.swift)
            }
            
            @Step {
                Finally, both Fluent and the FluentPersistDriver are added to swift-service-lifecycle. 
                
                This allows it to integrate with Hummingbird's ecosystem, including the Jobs framework and the Auth framework. 
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-11.swift)
            }
        }
    }
    @Section(title: "Add Galaxy API") {
        @ContentAndMedia {
            Add your database models and routes to edit them.
            
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        @Steps {
            @Step {
                Create a file named `Galaxy.swift`, and add the following Fluent Model.
                
                This Fluent model has the 'id' and a 'name' properties.
                @Code(name: "Sources/App/Galaxy.swift", file: fluent-universe-12.swift)
            }
            @Step {
                Before being able to use a Model, a migration must be added.
                
                A migration creates or reverts a diff to the schema in the database.
                @Code(name: "Sources/App/Galaxy.swift", file: fluent-universe-13.swift)
            }
            
            @Step {
                Open `Sources/App/Application+build.swift` again. Fluent is now a completely blank slate, let's set it up.
                
                The newly added migrations are added to Fluent. Make sure that any new migrations are added to Fluent in the right order.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-14.swift, previousFile: fluent-universe-11.swift)
            }
            @Step {
                The final step to set up Fluent is to run the migrations.
                
                It's common to explicitly run migrations, but for small scale set-ups can also run migrations on every app launch.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-15.swift, previousFile: fluent-universe-14.swift)
            }
            
            @Step {
                If we look further down the file we can find the `buildRouter()` function.
                
                Here we create the `Router`. We add a logging middleware to it (this logs all requests to the router). The function uses a result builder to create a stack of middleware, but you can also use `Router.add(middleware:)` to add individual middleware. Finally we add a single endpoint GET `/` which returns "Hello!"
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-15.swift)
            }
            @Step {
                We'll add a single route `GET /galaxies`, which lists all registered galaxies.
                
                Because the database is empty now, we'll add a route `PUT /galaxies` to add your own galaxies.
                @Code(name: "Sources/App/Application+build.swift", file: fluent-universe-16.swift)
            }
        }
    }
    
    @Section(title: "Test your Backend") {
        @ContentAndMedia {
            Now that your Fluent backend is complete, it's time to validate the results!
            
            @Image(source: "hummingbird.png", alt: "Hummingbird logo")
        }
        
        @Steps {
            @Step {
                We can run this application and use curl to test it works.
                
                First, create your own galaxy!
                @Code(name: "Test Application", file: fluent-universe-17.sh)
            }
            @Step {
                Then, query the list of galaxies. 
                @Code(name: "Test Application", file: fluent-universe-18.sh)
            }
            @Step {
                Now we have a running server, lets add some functionality to it.
                @Code(name: "Test Application", file: fluent-universe-19.sh)
            }
        }
    }
}
